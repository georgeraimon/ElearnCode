import {
  require_prop_types
} from "./chunk-SGO5LRZC.js";
import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __commonJS,
  __require
} from "./chunk-2LSFTFF7.js";

// node_modules/url/node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/url/node_modules/punycode/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
      function error(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base; ; k += base) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      }
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "1.4.1",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports, module) {
    "use strict";
    var test = {
      foo: {}
    };
    var $Object = Object;
    module.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            args.concat(slice.call(arguments))
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(
            that,
            args.concat(slice.call(arguments))
          );
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/has/src/index.js"(exports, module) {
    "use strict";
    var hasOwnProperty = {}.hasOwnProperty;
    var call = Function.prototype.call;
    module.exports = call.bind ? call.bind(hasOwnProperty) : function(O, P) {
      return call.call(hasOwnProperty, O, P);
    };
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
      return x.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          // eslint-disable-line no-param-reassign
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/url/url.js
var require_url = __commonJS({
  "node_modules/url/url.js"(exports) {
    "use strict";
    var punycode = require_punycode();
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/;
    var delims = [
      "<",
      ">",
      '"',
      "`",
      " ",
      "\r",
      "\n",
      "	"
    ];
    var unwise = [
      "{",
      "}",
      "|",
      "\\",
      "^",
      "`"
    ].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = [
      "%",
      "/",
      "?",
      ";",
      "#"
    ].concat(autoEscape);
    var hostEndingChars = [
      "/",
      "?",
      "#"
    ];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      javascript: true,
      "javascript:": true
    };
    var hostlessProtocol = {
      javascript: true,
      "javascript:": true
    };
    var slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    var querystring = require_lib();
    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && typeof url === "object" && url instanceof Url) {
        return url;
      }
      var u = new Url();
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      if (typeof url !== "string") {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
      var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url = uSplit.join(splitter);
      var rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = "";
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1) {
            continue;
          }
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash = rest.indexOf("#");
      if (hash !== -1) {
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        this.search = "";
        this.query = {};
      }
      if (rest) {
        this.pathname = rest;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "/";
      }
      if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (typeof obj === "string") {
        obj = urlParse(obj);
      }
      if (!(obj instanceof Url)) {
        return Url.prototype.format.call(obj);
      }
      return obj.format();
    }
    Url.prototype.format = function() {
      var auth = this.auth || "";
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
      }
      var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) {
          host += ":" + this.port;
        }
      }
      if (this.query && typeof this.query === "object" && Object.keys(this.query).length) {
        query = querystring.stringify(this.query, {
          arrayFormat: "repeat",
          addQueryPrefix: false
        });
      }
      var search = this.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":") {
        protocol += ":";
      }
      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") {
          pathname = "/" + pathname;
        }
      } else if (!host) {
        host = "";
      }
      if (hash && hash.charAt(0) !== "#") {
        hash = "#" + hash;
      }
      if (search && search.charAt(0) !== "?") {
        search = "?" + search;
      }
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source) {
        return relative;
      }
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (typeof relative === "string") {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol") {
            result[rkey] = relative[rkey];
          }
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.pathname = "/";
          result.path = result.pathname;
        }
        result.href = result.format();
        return result;
      }
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift())) {
          }
          if (!relative.host) {
            relative.host = "";
          }
          if (!relative.hostname) {
            relative.hostname = "";
          }
          if (relPath[0] !== "") {
            relPath.unshift("");
          }
          if (relPath.length < 2) {
            relPath.unshift("");
          }
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p = result.pathname || "";
          var s = result.search || "";
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "") {
            srcPath[0] = result.host;
          } else {
            srcPath.unshift(result.host);
          }
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "") {
              relPath[0] = relative.host;
            } else {
              relPath.unshift(relative.host);
            }
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath) {
          srcPath = [];
        }
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (relative.search != null) {
        if (psychotic) {
          result.host = srcPath.shift();
          result.hostname = result.host;
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (result.pathname !== null || result.search !== null) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
          srcPath.splice(i, 1);
        } else if (last === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        result.host = result.hostname;
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.hostname = authInHost.shift();
          result.host = result.hostname;
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (srcPath.length > 0) {
        result.pathname = srcPath.join("/");
      } else {
        result.pathname = null;
        result.path = null;
      }
      if (result.pathname !== null || result.search !== null) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
  }
});

// node_modules/es6-promise/dist/es6-promise.js
var require_es6_promise = __commonJS({
  "node_modules/es6-promise/dist/es6-promise.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.ES6Promise = factory();
    })(exports, function() {
      "use strict";
      function objectOrFunction(x) {
        var type = typeof x;
        return x !== null && (type === "object" || type === "function");
      }
      function isFunction(x) {
        return typeof x === "function";
      }
      var _isArray = void 0;
      if (Array.isArray) {
        _isArray = Array.isArray;
      } else {
        _isArray = function(x) {
          return Object.prototype.toString.call(x) === "[object Array]";
        };
      }
      var isArray = _isArray;
      var len = 0;
      var vertxNext = void 0;
      var customSchedulerFn = void 0;
      var asap = function asap2(callback, arg) {
        queue[len] = callback;
        queue[len + 1] = arg;
        len += 2;
        if (len === 2) {
          if (customSchedulerFn) {
            customSchedulerFn(flush);
          } else {
            scheduleFlush();
          }
        }
      };
      function setScheduler(scheduleFn) {
        customSchedulerFn = scheduleFn;
      }
      function setAsap(asapFn) {
        asap = asapFn;
      }
      var browserWindow = typeof window !== "undefined" ? window : void 0;
      var browserGlobal = browserWindow || {};
      var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
      var isNode = typeof self === "undefined" && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
      var isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";
      function useNextTick() {
        return function() {
          return process.nextTick(flush);
        };
      }
      function useVertxTimer() {
        if (typeof vertxNext !== "undefined") {
          return function() {
            vertxNext(flush);
          };
        }
        return useSetTimeout();
      }
      function useMutationObserver() {
        var iterations = 0;
        var observer = new BrowserMutationObserver(flush);
        var node = document.createTextNode("");
        observer.observe(node, { characterData: true });
        return function() {
          node.data = iterations = ++iterations % 2;
        };
      }
      function useMessageChannel() {
        var channel = new MessageChannel();
        channel.port1.onmessage = flush;
        return function() {
          return channel.port2.postMessage(0);
        };
      }
      function useSetTimeout() {
        var globalSetTimeout = setTimeout;
        return function() {
          return globalSetTimeout(flush, 1);
        };
      }
      var queue = new Array(1e3);
      function flush() {
        for (var i = 0; i < len; i += 2) {
          var callback = queue[i];
          var arg = queue[i + 1];
          callback(arg);
          queue[i] = void 0;
          queue[i + 1] = void 0;
        }
        len = 0;
      }
      function attemptVertx() {
        try {
          var vertx = Function("return this")().require("vertx");
          vertxNext = vertx.runOnLoop || vertx.runOnContext;
          return useVertxTimer();
        } catch (e) {
          return useSetTimeout();
        }
      }
      var scheduleFlush = void 0;
      if (isNode) {
        scheduleFlush = useNextTick();
      } else if (BrowserMutationObserver) {
        scheduleFlush = useMutationObserver();
      } else if (isWorker) {
        scheduleFlush = useMessageChannel();
      } else if (browserWindow === void 0 && typeof __require === "function") {
        scheduleFlush = attemptVertx();
      } else {
        scheduleFlush = useSetTimeout();
      }
      function then(onFulfillment, onRejection) {
        var parent = this;
        var child = new this.constructor(noop);
        if (child[PROMISE_ID] === void 0) {
          makePromise(child);
        }
        var _state = parent._state;
        if (_state) {
          var callback = arguments[_state - 1];
          asap(function() {
            return invokeCallback(_state, child, callback, parent._result);
          });
        } else {
          subscribe(parent, child, onFulfillment, onRejection);
        }
        return child;
      }
      function resolve$1(object) {
        var Constructor = this;
        if (object && typeof object === "object" && object.constructor === Constructor) {
          return object;
        }
        var promise = new Constructor(noop);
        resolve(promise, object);
        return promise;
      }
      var PROMISE_ID = Math.random().toString(36).substring(2);
      function noop() {
      }
      var PENDING = void 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      function selfFulfillment() {
        return new TypeError("You cannot resolve a promise with itself");
      }
      function cannotReturnOwn() {
        return new TypeError("A promises callback cannot return that same promise.");
      }
      function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
        try {
          then$$1.call(value, fulfillmentHandler, rejectionHandler);
        } catch (e) {
          return e;
        }
      }
      function handleForeignThenable(promise, thenable, then$$1) {
        asap(function(promise2) {
          var sealed = false;
          var error = tryThen(then$$1, thenable, function(value) {
            if (sealed) {
              return;
            }
            sealed = true;
            if (thenable !== value) {
              resolve(promise2, value);
            } else {
              fulfill(promise2, value);
            }
          }, function(reason) {
            if (sealed) {
              return;
            }
            sealed = true;
            reject(promise2, reason);
          }, "Settle: " + (promise2._label || " unknown promise"));
          if (!sealed && error) {
            sealed = true;
            reject(promise2, error);
          }
        }, promise);
      }
      function handleOwnThenable(promise, thenable) {
        if (thenable._state === FULFILLED) {
          fulfill(promise, thenable._result);
        } else if (thenable._state === REJECTED) {
          reject(promise, thenable._result);
        } else {
          subscribe(thenable, void 0, function(value) {
            return resolve(promise, value);
          }, function(reason) {
            return reject(promise, reason);
          });
        }
      }
      function handleMaybeThenable(promise, maybeThenable, then$$1) {
        if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
          handleOwnThenable(promise, maybeThenable);
        } else {
          if (then$$1 === void 0) {
            fulfill(promise, maybeThenable);
          } else if (isFunction(then$$1)) {
            handleForeignThenable(promise, maybeThenable, then$$1);
          } else {
            fulfill(promise, maybeThenable);
          }
        }
      }
      function resolve(promise, value) {
        if (promise === value) {
          reject(promise, selfFulfillment());
        } else if (objectOrFunction(value)) {
          var then$$1 = void 0;
          try {
            then$$1 = value.then;
          } catch (error) {
            reject(promise, error);
            return;
          }
          handleMaybeThenable(promise, value, then$$1);
        } else {
          fulfill(promise, value);
        }
      }
      function publishRejection(promise) {
        if (promise._onerror) {
          promise._onerror(promise._result);
        }
        publish(promise);
      }
      function fulfill(promise, value) {
        if (promise._state !== PENDING) {
          return;
        }
        promise._result = value;
        promise._state = FULFILLED;
        if (promise._subscribers.length !== 0) {
          asap(publish, promise);
        }
      }
      function reject(promise, reason) {
        if (promise._state !== PENDING) {
          return;
        }
        promise._state = REJECTED;
        promise._result = reason;
        asap(publishRejection, promise);
      }
      function subscribe(parent, child, onFulfillment, onRejection) {
        var _subscribers = parent._subscribers;
        var length = _subscribers.length;
        parent._onerror = null;
        _subscribers[length] = child;
        _subscribers[length + FULFILLED] = onFulfillment;
        _subscribers[length + REJECTED] = onRejection;
        if (length === 0 && parent._state) {
          asap(publish, parent);
        }
      }
      function publish(promise) {
        var subscribers = promise._subscribers;
        var settled = promise._state;
        if (subscribers.length === 0) {
          return;
        }
        var child = void 0, callback = void 0, detail = promise._result;
        for (var i = 0; i < subscribers.length; i += 3) {
          child = subscribers[i];
          callback = subscribers[i + settled];
          if (child) {
            invokeCallback(settled, child, callback, detail);
          } else {
            callback(detail);
          }
        }
        promise._subscribers.length = 0;
      }
      function invokeCallback(settled, promise, callback, detail) {
        var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;
        if (hasCallback) {
          try {
            value = callback(detail);
          } catch (e) {
            succeeded = false;
            error = e;
          }
          if (promise === value) {
            reject(promise, cannotReturnOwn());
            return;
          }
        } else {
          value = detail;
        }
        if (promise._state !== PENDING) {
        } else if (hasCallback && succeeded) {
          resolve(promise, value);
        } else if (succeeded === false) {
          reject(promise, error);
        } else if (settled === FULFILLED) {
          fulfill(promise, value);
        } else if (settled === REJECTED) {
          reject(promise, value);
        }
      }
      function initializePromise(promise, resolver) {
        try {
          resolver(function resolvePromise(value) {
            resolve(promise, value);
          }, function rejectPromise(reason) {
            reject(promise, reason);
          });
        } catch (e) {
          reject(promise, e);
        }
      }
      var id = 0;
      function nextId() {
        return id++;
      }
      function makePromise(promise) {
        promise[PROMISE_ID] = id++;
        promise._state = void 0;
        promise._result = void 0;
        promise._subscribers = [];
      }
      function validationError() {
        return new Error("Array Methods must be provided an Array");
      }
      var Enumerator = function() {
        function Enumerator2(Constructor, input) {
          this._instanceConstructor = Constructor;
          this.promise = new Constructor(noop);
          if (!this.promise[PROMISE_ID]) {
            makePromise(this.promise);
          }
          if (isArray(input)) {
            this.length = input.length;
            this._remaining = input.length;
            this._result = new Array(this.length);
            if (this.length === 0) {
              fulfill(this.promise, this._result);
            } else {
              this.length = this.length || 0;
              this._enumerate(input);
              if (this._remaining === 0) {
                fulfill(this.promise, this._result);
              }
            }
          } else {
            reject(this.promise, validationError());
          }
        }
        Enumerator2.prototype._enumerate = function _enumerate(input) {
          for (var i = 0; this._state === PENDING && i < input.length; i++) {
            this._eachEntry(input[i], i);
          }
        };
        Enumerator2.prototype._eachEntry = function _eachEntry(entry, i) {
          var c = this._instanceConstructor;
          var resolve$$1 = c.resolve;
          if (resolve$$1 === resolve$1) {
            var _then = void 0;
            var error = void 0;
            var didError = false;
            try {
              _then = entry.then;
            } catch (e) {
              didError = true;
              error = e;
            }
            if (_then === then && entry._state !== PENDING) {
              this._settledAt(entry._state, i, entry._result);
            } else if (typeof _then !== "function") {
              this._remaining--;
              this._result[i] = entry;
            } else if (c === Promise$1) {
              var promise = new c(noop);
              if (didError) {
                reject(promise, error);
              } else {
                handleMaybeThenable(promise, entry, _then);
              }
              this._willSettleAt(promise, i);
            } else {
              this._willSettleAt(new c(function(resolve$$12) {
                return resolve$$12(entry);
              }), i);
            }
          } else {
            this._willSettleAt(resolve$$1(entry), i);
          }
        };
        Enumerator2.prototype._settledAt = function _settledAt(state, i, value) {
          var promise = this.promise;
          if (promise._state === PENDING) {
            this._remaining--;
            if (state === REJECTED) {
              reject(promise, value);
            } else {
              this._result[i] = value;
            }
          }
          if (this._remaining === 0) {
            fulfill(promise, this._result);
          }
        };
        Enumerator2.prototype._willSettleAt = function _willSettleAt(promise, i) {
          var enumerator = this;
          subscribe(promise, void 0, function(value) {
            return enumerator._settledAt(FULFILLED, i, value);
          }, function(reason) {
            return enumerator._settledAt(REJECTED, i, reason);
          });
        };
        return Enumerator2;
      }();
      function all(entries) {
        return new Enumerator(this, entries).promise;
      }
      function race(entries) {
        var Constructor = this;
        if (!isArray(entries)) {
          return new Constructor(function(_, reject2) {
            return reject2(new TypeError("You must pass an array to race."));
          });
        } else {
          return new Constructor(function(resolve2, reject2) {
            var length = entries.length;
            for (var i = 0; i < length; i++) {
              Constructor.resolve(entries[i]).then(resolve2, reject2);
            }
          });
        }
      }
      function reject$1(reason) {
        var Constructor = this;
        var promise = new Constructor(noop);
        reject(promise, reason);
        return promise;
      }
      function needsResolver() {
        throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
      }
      function needsNew() {
        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
      }
      var Promise$1 = function() {
        function Promise2(resolver) {
          this[PROMISE_ID] = nextId();
          this._result = this._state = void 0;
          this._subscribers = [];
          if (noop !== resolver) {
            typeof resolver !== "function" && needsResolver();
            this instanceof Promise2 ? initializePromise(this, resolver) : needsNew();
          }
        }
        Promise2.prototype.catch = function _catch(onRejection) {
          return this.then(null, onRejection);
        };
        Promise2.prototype.finally = function _finally(callback) {
          var promise = this;
          var constructor = promise.constructor;
          if (isFunction(callback)) {
            return promise.then(function(value) {
              return constructor.resolve(callback()).then(function() {
                return value;
              });
            }, function(reason) {
              return constructor.resolve(callback()).then(function() {
                throw reason;
              });
            });
          }
          return promise.then(callback, callback);
        };
        return Promise2;
      }();
      Promise$1.prototype.then = then;
      Promise$1.all = all;
      Promise$1.race = race;
      Promise$1.resolve = resolve$1;
      Promise$1.reject = reject$1;
      Promise$1._setScheduler = setScheduler;
      Promise$1._setAsap = setAsap;
      Promise$1._asap = asap;
      function polyfill() {
        var local = void 0;
        if (typeof global !== "undefined") {
          local = global;
        } else if (typeof self !== "undefined") {
          local = self;
        } else {
          try {
            local = Function("return this")();
          } catch (e) {
            throw new Error("polyfill failed because global object is unavailable in this environment");
          }
        }
        var P = local.Promise;
        if (P) {
          var promiseToString = null;
          try {
            promiseToString = Object.prototype.toString.call(P.resolve());
          } catch (e) {
          }
          if (promiseToString === "[object Promise]" && !P.cast) {
            return;
          }
        }
        local.Promise = Promise$1;
      }
      Promise$1.polyfill = polyfill;
      Promise$1.Promise = Promise$1;
      return Promise$1;
    });
  }
});

// node_modules/lodash._getnative/index.js
var require_lodash = __commonJS({
  "node_modules/lodash._getnative/index.js"(exports, module) {
    var funcTag = "[object Function]";
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var objectProto = Object.prototype;
    var fnToString = Function.prototype.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function getNative(object, key) {
      var value = object == null ? void 0 : object[key];
      return isNative(value) ? value : void 0;
    }
    function isFunction(value) {
      return isObject(value) && objToString.call(value) == funcTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }
    module.exports = getNative;
  }
});

// node_modules/lodash.isarguments/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.isarguments/index.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    module.exports = isArguments;
  }
});

// node_modules/lodash.isarray/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.isarray/index.js"(exports, module) {
    var arrayTag = "[object Array]";
    var funcTag = "[object Function]";
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var objectProto = Object.prototype;
    var fnToString = Function.prototype.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var nativeIsArray = getNative(Array, "isArray");
    var MAX_SAFE_INTEGER = 9007199254740991;
    function getNative(object, key) {
      var value = object == null ? void 0 : object[key];
      return isNative(value) ? value : void 0;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };
    function isFunction(value) {
      return isObject(value) && objToString.call(value) == funcTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }
    module.exports = isArray;
  }
});

// node_modules/lodash.keys/index.js
var require_lodash4 = __commonJS({
  "node_modules/lodash.keys/index.js"(exports, module) {
    var getNative = require_lodash();
    var isArguments = require_lodash2();
    var isArray = require_lodash3();
    var reIsUint = /^\d+$/;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeKeys = getNative(Object, "keys");
    var MAX_SAFE_INTEGER = 9007199254740991;
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    var getLength = baseProperty("length");
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }
    function isIndex(value, length) {
      value = typeof value == "number" || reIsUint.test(value) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function shimKeys(object) {
      var props = keysIn(object), propsLength = props.length, length = propsLength && object.length;
      var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
      var index = -1, result = [];
      while (++index < propsLength) {
        var key = props[index];
        if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? void 0 : object.constructor;
      if (typeof Ctor == "function" && Ctor.prototype === object || typeof object != "function" && isArrayLike(object)) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
      var Ctor = object.constructor, index = -1, isProto = typeof Ctor == "function" && Ctor.prototype === object, result = Array(length), skipIndexes = length > 0;
      while (++index < length) {
        result[index] = index + "";
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) && !(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = keys;
  }
});

// node_modules/shallowequal/modules/index.js
var require_modules = __commonJS({
  "node_modules/shallowequal/modules/index.js"(exports, module) {
    "use strict";
    var fetchKeys = require_lodash4();
    module.exports = function shallowEqual(objA, objB, compare, compareContext) {
      var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
      if (ret !== void 0) {
        return !!ret;
      }
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = fetchKeys(objA);
      var keysB = fetchKeys(objB);
      var len = keysA.length;
      if (len !== keysB.length) {
        return false;
      }
      compareContext = compareContext || null;
      var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
      for (var i = 0; i < len; i++) {
        var key = keysA[i];
        if (!bHasOwnProperty(key)) {
          return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (_ret === false || _ret === void 0 && valueA !== valueB) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/tableau-react/dist/tokenizeUrl.js
var require_tokenizeUrl = __commonJS({
  "node_modules/tableau-react/dist/tokenizeUrl.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _url2 = require_url();
    var _url3 = _interopRequireDefault(_url2);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function tokenizeUrl(_url, token) {
      var parsed = _url3.default.parse(_url, true);
      var protocol = parsed.protocol, host = parsed.host, pathname = parsed.pathname;
      return protocol + "//" + host + "/trusted/" + token + pathname;
    }
    exports.default = tokenizeUrl;
    module.exports = exports["default"];
  }
});

// node_modules/tableau-react/dist/tableau-sdk.js
var require_tableau_sdk = __commonJS({
  "node_modules/tableau-react/dist/tableau-sdk.js"(exports, module) {
    "use strict";
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var tableauSoftware = {};
    var global2 = {};
    (function(global3) {
      "use strict";
      var ss2 = { __assemblies: {} };
      ss2.initAssembly = function(obj, name, res) {
        res = res || {};
        obj.name = name;
        obj.toString = function() {
          return this.name;
        };
        obj.__types = {};
        obj.getResourceNames = function() {
          return Object.keys(res);
        };
        obj.getResourceDataBase64 = function(name2) {
          return res[name2] || null;
        };
        obj.getResourceData = function(name2) {
          var r = res[name2];
          return r ? ss2.dec64(r) : null;
        };
        ss2.__assemblies[name] = obj;
      };
      ss2.initAssembly(ss2, "mscorlib");
      ss2.getAssemblies = function() {
        return Object.keys(ss2.__assemblies).map(function(n) {
          return ss2.__assemblies[n];
        });
      };
      ss2.isNullOrUndefined = function(o) {
        return o === null || o === void 0;
      };
      ss2.isValue = function(o) {
        return o !== null && o !== void 0;
      };
      ss2.referenceEquals = function(a, b) {
        return ss2.isValue(a) ? a === b : !ss2.isValue(b);
      };
      ss2.mkdict = function() {
        var a = arguments.length !== 1 ? arguments : arguments[0];
        var r = {};
        for (var i = 0; i < a.length; i += 2) {
          r[a[i]] = a[i + 1];
        }
        return r;
      };
      ss2.clone = function(t, o) {
        return o ? t.$clone(o) : o;
      };
      ss2.coalesce = function(a, b) {
        return ss2.isValue(a) ? a : b;
      };
      ss2.isDate = function(obj) {
        return Object.prototype.toString.call(obj) === "[object Date]";
      };
      ss2.isArray = function(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      };
      ss2.isTypedArrayType = function(type) {
        return ["Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray"].indexOf(ss2.getTypeFullName(type)) >= 0;
      };
      ss2.isArrayOrTypedArray = function(obj) {
        return ss2.isArray(obj) || ss2.isTypedArrayType(ss2.getInstanceType(obj));
      };
      ss2.equals = function(a, b) {
        if (!ss2.isValue(a))
          throw new ss_NullReferenceException("Object is null");
        else if (a !== ss2 && typeof a.equals === "function")
          return a.equals(b);
        if (ss2.isDate(a) && ss2.isDate(b))
          return a.valueOf() === b.valueOf();
        else if (typeof a === "function" && typeof b === "function")
          return ss2.delegateEquals(a, b);
        else if (ss2.isNullOrUndefined(a) && ss2.isNullOrUndefined(b))
          return true;
        else
          return a === b;
      };
      ss2.compare = function(a, b) {
        if (!ss2.isValue(a))
          throw new ss_NullReferenceException("Object is null");
        else if (typeof a === "number" || typeof a === "string" || typeof a === "boolean")
          return ss2.isValue(b) ? a < b ? -1 : a > b ? 1 : 0 : 1;
        else if (ss2.isDate(a))
          return ss2.isValue(b) ? ss2.compare(a.valueOf(), b.valueOf()) : 1;
        else
          return a.compareTo(b);
      };
      ss2.equalsT = function(a, b) {
        if (!ss2.isValue(a))
          throw new ss_NullReferenceException("Object is null");
        else if (typeof a === "number" || typeof a === "string" || typeof a === "boolean")
          return a === b;
        else if (ss2.isDate(a))
          return a.valueOf() === b.valueOf();
        else
          return a.equalsT(b);
      };
      ss2.staticEquals = function(a, b) {
        if (!ss2.isValue(a))
          return !ss2.isValue(b);
        else
          return ss2.isValue(b) ? ss2.equals(a, b) : false;
      };
      ss2.shallowCopy = function() {
        try {
          var x = Object.getOwnPropertyDescriptor({ a: 0 }, "a").value;
          return true;
        } catch (ex) {
          return false;
        }
      }() ? function(source, target) {
        var keys = Object.keys(source);
        for (var i = 0, l = keys.length; i < l; i++) {
          Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
        }
      } : function(source, target) {
        var keys = Object.keys(source);
        for (var i = 0, l = keys.length; i < l; i++) {
          target[keys[i]] = source[keys[i]];
        }
      };
      if ((typeof window === "undefined" ? "undefined" : _typeof(window)) == "object") {
        if (!window.Element) {
          window.Element = function() {
          };
          window.Element.isInstanceOfType = function(instance) {
            return instance && typeof instance.constructor === "undefined" && typeof instance.tagName === "string";
          };
        }
        window.Element.__typeName = "Element";
        ss2.parseXml = function(markup) {
          var domParser = new DOMParser();
          return domParser.parseFromString(markup, "text/xml");
        };
      }
      ss2.clearKeys = function(d) {
        for (var n in d) {
          if (d.hasOwnProperty(n))
            delete d[n];
        }
      };
      ss2.keyExists = function(d, key) {
        return d[key] !== void 0;
      };
      if (!Object.keys) {
        Object.keys = function() {
          "use strict";
          var hasOwnProperty = Object.prototype.hasOwnProperty, hasDontEnumBug = !{ toString: null }.propertyIsEnumerable("toString"), dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], dontEnumsLength = dontEnums.length;
          return function(obj) {
            if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object" && (typeof obj !== "function" || obj === null)) {
              throw new TypeError("Object.keys called on non-object");
            }
            var result = [], prop, i;
            for (prop in obj) {
              if (hasOwnProperty.call(obj, prop)) {
                result.push(prop);
              }
            }
            if (hasDontEnumBug) {
              for (i = 0; i < dontEnumsLength; i++) {
                if (hasOwnProperty.call(obj, dontEnums[i])) {
                  result.push(dontEnums[i]);
                }
              }
            }
            return result;
          };
        }();
      }
      ss2.getKeyCount = function(d) {
        return Object.keys(d).length;
      };
      ss2.__genericCache = {};
      ss2._makeGenericTypeName = function(genericType, typeArguments) {
        var result = ss2.getTypeFullName(genericType);
        for (var i = 0; i < typeArguments.length; i++) {
          result += (i === 0 ? "[" : ",") + "[" + ss2.getTypeFullName(typeArguments[i]) + "]";
        }
        result += "]";
        return result;
      };
      ss2.makeGenericType = function(genericType, typeArguments) {
        var name = ss2._makeGenericTypeName(genericType, typeArguments);
        return ss2.__genericCache[ss2._makeQName(name, genericType.__assembly)] || genericType.apply(null, typeArguments);
      };
      ss2._registerGenericInstance = function(genericType, typeArguments, instance, members, statics, init) {
        if (!instance) {
          instance = function instance2() {
          };
        }
        var name = ss2._makeGenericTypeName(genericType, typeArguments);
        ss2.__genericCache[ss2._makeQName(name, genericType.__assembly)] = instance;
        instance.__typeName = name;
        instance.__assembly = genericType.__assembly;
        instance.__genericTypeDefinition = genericType;
        instance.__typeArguments = typeArguments;
        if (statics) {
          ss2.shallowCopy(statics, instance);
        }
        init(instance);
        if (members) {
          ss2.shallowCopy(members, instance.prototype);
        }
        return instance;
      };
      ss2.registerGenericClassInstance = function(genericType, typeArguments, instance, members, statics, baseType, getInterfaceTypesFunc) {
        return ss2._registerGenericInstance(genericType, typeArguments, instance, members, statics, function(inst) {
          ss2.initClass(inst, baseType ? baseType() : null, getInterfaceTypesFunc ? getInterfaceTypesFunc() : null);
        });
      };
      ss2.registerGenericStructInstance = function(genericType, typeArguments, instance, members, statics, getInterfaceTypesFunc) {
        return ss2._registerGenericInstance(genericType, typeArguments, instance, members, statics, function(inst) {
          ss2.initStruct(inst, getInterfaceTypesFunc ? getInterfaceTypesFunc() : null);
        });
      };
      ss2.registerGenericInterfaceInstance = function(genericType, typeArguments, members, getBaseInterfacesFunc) {
        return ss2._registerGenericInstance(genericType, typeArguments, null, members, null, function(instance) {
          ss2.initInterface(instance, members, getBaseInterfacesFunc ? getBaseInterfacesFunc() : null);
        });
      };
      ss2.isGenericTypeDefinition = function(type) {
        return type.__isGenericTypeDefinition || false;
      };
      ss2.getGenericTypeDefinition = function(type) {
        return type.__genericTypeDefinition || null;
      };
      ss2.getGenericParameterCount = function(type) {
        return type.__typeArgumentCount || 0;
      };
      ss2.getGenericArguments = function(type) {
        return type.__typeArguments || null;
      };
      ss2.__anonymousCache = {};
      ss2.anonymousType = function() {
        var members = Array.prototype.slice.call(arguments);
        var name = "Anonymous<" + members.map(function(m) {
          return m[1] + ":" + ss2.getTypeFullName(m[0]);
        }).join(",") + ">";
        var type = ss2.__anonymousCache[name];
        if (!type) {
          type = new Function(members.map(function(m) {
            return m[1];
          }).join(","), members.map(function(m) {
            return "this." + m[1] + "=" + m[1] + ";";
          }).join(""));
          type.__typeName = name;
          var infos = members.map(function(m) {
            return {
              name: m[1],
              typeDef: type,
              type: 16,
              returnType: m[0],
              getter: { name: "get_" + m[1], typeDef: type, params: [], returnType: m[0], fget: m[1] }
            };
          });
          infos.push({ name: ".ctor", typeDef: type, type: 1, params: members.map(function(m) {
            return m[0];
          }) });
          type.__metadata = { members: infos };
          ss2.__anonymousCache[name] = type;
        }
        return type;
      };
      ss2.setMetadata = function(type, metadata) {
        if (metadata.members) {
          for (var i = 0; i < metadata.members.length; i++) {
            var m = metadata.members[i];
            m.typeDef = type;
            if (m.adder)
              m.adder.typeDef = type;
            if (m.remover)
              m.remover.typeDef = type;
            if (m.getter)
              m.getter.typeDef = type;
            if (m.setter)
              m.setter.typeDef = type;
          }
        }
        type.__metadata = metadata;
        if (metadata.variance) {
          type.isAssignableFrom = function(source) {
            var check = function check2(target, type2) {
              if (type2.__genericTypeDefinition === target.__genericTypeDefinition && type2.__typeArguments.length === target.__typeArguments.length) {
                for (var i3 = 0; i3 < target.__typeArguments.length; i3++) {
                  var v = target.__metadata.variance[i3], t = target.__typeArguments[i3], s = type2.__typeArguments[i3];
                  switch (v) {
                    case 1:
                      if (!ss2.isAssignableFrom(t, s))
                        return false;
                      break;
                    case 2:
                      if (!ss2.isAssignableFrom(s, t))
                        return false;
                      break;
                    default:
                      if (s !== t)
                        return false;
                  }
                }
                return true;
              }
              return false;
            };
            if (source.__interface && check(this, source))
              return true;
            var ifs = ss2.getInterfaces(source);
            for (var i2 = 0; i2 < ifs.length; i2++) {
              if (ifs[i2] === this || check(this, ifs[i2]))
                return true;
            }
            return false;
          };
        }
      };
      ss2.setMetadata = function(type, metadata) {
      };
      ss2.mkType = function(asm, typeName, ctor, members, statics) {
        if (!ctor)
          ctor = function ctor2() {
          };
        ctor.__assembly = asm;
        ctor.__typeName = typeName;
        if (asm)
          asm.__types[typeName] = ctor;
        if (members)
          ctor.__members = members;
        if (statics)
          ss2.shallowCopy(statics, ctor);
        return ctor;
      };
      ss2.mkEnum = function(asm, typeName, values, namedValues) {
        var result = ss2.mkType(asm, typeName);
        ss2.shallowCopy(values, result.prototype);
        result.__enum = true;
        result.getDefaultValue = result.createInstance = function() {
          return namedValues ? null : 0;
        };
        result.isInstanceOfType = function(instance) {
          return (typeof instance === "undefined" ? "undefined" : _typeof(instance)) === (namedValues ? "string" : "number");
        };
        return result;
      };
      ss2.initClass = function(ctor, baseType, interfaces) {
        ctor.__class = true;
        if (baseType && baseType !== Object) {
          var f = function f2() {
          };
          f.prototype = baseType.prototype;
          ctor.prototype = new f();
          ctor.prototype.constructor = ctor;
        }
        if (ctor.__members) {
          ss2.shallowCopy(ctor.__members, ctor.prototype);
          delete ctor.__members;
        }
        if (interfaces)
          ctor.__interfaces = interfaces;
      };
      ss2.initStruct = function(ctor, interfaces) {
        ss2.initClass(ctor, null, interfaces);
        ctor.__class = false;
        ctor.getDefaultValue = ctor.getDefaultValue || ctor.createInstance || function() {
          return new ctor();
        };
      };
      ss2.initGenericClass = function(ctor, typeArgumentCount) {
        ctor.__class = true;
        ctor.__typeArgumentCount = typeArgumentCount;
        ctor.__isGenericTypeDefinition = true;
      };
      ss2.initGenericStruct = function(ctor, typeArgumentCount) {
        ss2.initGenericClass(ctor, typeArgumentCount);
        ctor.__class = false;
      };
      ss2.initInterface = function(ctor, members, baseInterfaces) {
        ctor.__interface = true;
        if (baseInterfaces) {
          ctor.__interfaces = baseInterfaces;
        }
        ss2.shallowCopy(members, ctor.prototype);
        ctor.isAssignableFrom = function(type) {
          return ss2.contains(ss2.getInterfaces(type), this);
        };
      };
      ss2.initGenericInterface = function(ctor, typeArgumentCount) {
        ctor.__interface = true;
        ctor.__typeArgumentCount = typeArgumentCount;
        ctor.__isGenericTypeDefinition = true;
      };
      ss2.getBaseType = function(type) {
        if (type === Object || type.__interface) {
          return null;
        } else if (Object.getPrototypeOf) {
          return Object.getPrototypeOf(type.prototype).constructor;
        } else {
          var p = type.prototype;
          if (Object.prototype.hasOwnProperty.call(p, "constructor")) {
            var ownValue = p.constructor;
            try {
              delete p.constructor;
              return p.constructor;
            } finally {
              p.constructor = ownValue;
            }
          }
          return p.constructor;
        }
      };
      ss2.getTypeFullName = function(type) {
        return type.__typeName || type.name || (type.toString().match(/^\s*function\s*([^\s(]+)/) || [])[1] || "Object";
      };
      ss2._makeQName = function(name, asm) {
        return name + (asm ? ", " + asm.name : "");
      };
      ss2.getTypeQName = function(type) {
        return ss2._makeQName(ss2.getTypeFullName(type), type.__assembly);
      };
      ss2.getTypeName = function(type) {
        var fullName = ss2.getTypeFullName(type);
        var bIndex = fullName.indexOf("[");
        var nsIndex = fullName.lastIndexOf(".", bIndex >= 0 ? bIndex : fullName.length);
        return nsIndex > 0 ? fullName.substr(nsIndex + 1) : fullName;
      };
      ss2.getTypeNamespace = function(type) {
        var fullName = ss2.getTypeFullName(type);
        var bIndex = fullName.indexOf("[");
        var nsIndex = fullName.lastIndexOf(".", bIndex >= 0 ? bIndex : fullName.length);
        return nsIndex > 0 ? fullName.substr(0, nsIndex) : "";
      };
      ss2.getTypeAssembly = function(type) {
        if (ss2.contains([Date, Number, Boolean, String, Function, Array], type))
          return ss2;
        else
          return type.__assembly || null;
      };
      ss2._getAssemblyType = function(asm, name) {
        if (asm.__types) {
          return asm.__types[name] || null;
        } else {
          var a = name.split(".");
          for (var i = 0; i < a.length; i++) {
            asm = asm[a[i]];
            if (!ss2.isValue(asm))
              return null;
          }
          if (typeof asm !== "function")
            return null;
          return asm;
        }
      };
      ss2.getAssemblyTypes = function(asm) {
        var result = [];
        if (asm.__types) {
          for (var t in asm.__types) {
            if (asm.__types.hasOwnProperty(t))
              result.push(asm.__types[t]);
          }
        } else {
          var traverse = function traverse2(s, n) {
            for (var c in s) {
              if (s.hasOwnProperty(c))
                traverse2(s[c], c);
            }
            if (typeof s === "function" && ss2.isUpper(n.charCodeAt(0)))
              result.push(s);
          };
          traverse(asm, "");
        }
        return result;
      };
      ss2.createAssemblyInstance = function(asm, typeName) {
        var t = ss2.getType(typeName, asm);
        return t ? ss2.createInstance(t) : null;
      };
      ss2.getInterfaces = function(type) {
        if (type.__interfaces)
          return type.__interfaces;
        else if (type === Date || type === Number)
          return [ss_IEquatable, ss_IComparable, ss_IFormattable];
        else if (type === Boolean || type === String)
          return [ss_IEquatable, ss_IComparable];
        else if (type === Array || ss2.isTypedArrayType(type))
          return [ss_IEnumerable, ss_ICollection, ss_IList, ss_IReadOnlyCollection, ss_IReadOnlyList];
        else
          return [];
      };
      ss2.isInstanceOfType = function(instance, type) {
        if (ss2.isNullOrUndefined(instance))
          return false;
        if (typeof type.isInstanceOfType === "function")
          return type.isInstanceOfType(instance);
        return ss2.isAssignableFrom(type, ss2.getInstanceType(instance));
      };
      ss2.isAssignableFrom = function(target, type) {
        return target === type || typeof target.isAssignableFrom === "function" && target.isAssignableFrom(type) || type.prototype instanceof target;
      };
      ss2.isClass = function(type) {
        return type.__class === true || type === Array || type === Function || type === RegExp || type === String || type === Error || type === Object;
      };
      ss2.isEnum = function(type) {
        return !!type.__enum;
      };
      ss2.isFlags = function(type) {
        return type.__metadata && type.__metadata.enumFlags || false;
      };
      ss2.isInterface = function(type) {
        return !!type.__interface;
      };
      ss2.safeCast = function(instance, type) {
        if (type === true)
          return instance;
        else if (type === false)
          return null;
        else
          return ss2.isInstanceOfType(instance, type) ? instance : null;
      };
      ss2.cast = function(instance, type) {
        if (instance === null || typeof instance === "undefined")
          return instance;
        else if (type === true || type !== false && ss2.isInstanceOfType(instance, type))
          return instance;
        throw new ss_InvalidCastException("Cannot cast object to type " + ss2.getTypeFullName(type));
      };
      ss2.getInstanceType = function(instance) {
        if (!ss2.isValue(instance))
          throw new ss_NullReferenceException("Cannot get type of null");
        try {
          return instance.constructor;
        } catch (ex) {
          return Object;
        }
      };
      ss2._getType = function(typeName, asm, re) {
        var outer = !re;
        re = re || /[[,\]]/g;
        var last = re.lastIndex, m = re.exec(typeName), tname, targs = [];
        var t;
        if (m) {
          tname = typeName.substring(last, m.index);
          switch (m[0]) {
            case "[":
              if (typeName[m.index + 1] !== "[")
                return null;
              for (; ; ) {
                re.exec(typeName);
                t = ss2._getType(typeName, global3, re);
                if (!t)
                  return null;
                targs.push(t);
                m = re.exec(typeName);
                if (m[0] === "]")
                  break;
                else if (m[0] !== ",")
                  return null;
              }
              m = re.exec(typeName);
              if (m && m[0] === ",") {
                re.exec(typeName);
                if (!(asm = ss2.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
                  return null;
              }
              break;
            case "]":
              break;
            case ",":
              re.exec(typeName);
              if (!(asm = ss2.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
                return null;
              break;
          }
        } else {
          tname = typeName.substring(last);
        }
        if (outer && re.lastIndex)
          return null;
        t = ss2._getAssemblyType(asm, tname.trim());
        return targs.length ? ss2.makeGenericType(t, targs) : t;
      };
      ss2.getType = function(typeName, asm) {
        return typeName ? ss2._getType(typeName, asm || global3) : null;
      };
      ss2.getDefaultValue = function(type) {
        if (typeof type.getDefaultValue === "function")
          return type.getDefaultValue();
        else if (type === Boolean)
          return false;
        else if (type === Date)
          return /* @__PURE__ */ new Date(0);
        else if (type === Number)
          return 0;
        return null;
      };
      ss2.createInstance = function(type) {
        if (typeof type.createInstance === "function")
          return type.createInstance();
        else if (type === Boolean)
          return false;
        else if (type === Date)
          return /* @__PURE__ */ new Date(0);
        else if (type === Number)
          return 0;
        else if (type === String)
          return "";
        else
          return new type();
      };
      var ss_IFormattable = ss2.IFormattable = ss2.mkType(ss2, "ss.IFormattable");
      ss2.initInterface(ss_IFormattable, { format: null });
      var ss_IComparable = ss2.IComparable = ss2.mkType(ss2, "ss.IComparable");
      ss2.initInterface(ss_IComparable, { compareTo: null });
      var ss_IEquatable = ss2.IEquatable = ss2.mkType(ss2, "ss.IEquatable");
      ss2.initInterface(ss_IEquatable, { equalsT: null });
      ss2.isNullOrEmptyString = function(s) {
        return !s || !s.length;
      };
      if (!String.prototype.trim) {
        String.prototype.trim = function() {
          return ss2.trimStartString(ss2.trimEndString(this));
        };
      }
      ss2.trimEndString = function(s, chars) {
        return s.replace(chars ? new RegExp("[" + String.fromCharCode.apply(null, chars) + "]+$") : /\s*$/, "");
      };
      ss2.trimStartString = function(s, chars) {
        return s.replace(chars ? new RegExp("^[" + String.fromCharCode.apply(null, chars) + "]+") : /^\s*/, "");
      };
      ss2.trimString = function(s, chars) {
        return ss2.trimStartString(ss2.trimEndString(s, chars), chars);
      };
      ss2.arrayClone = function(arr) {
        if (arr.length === 1) {
          return [arr[0]];
        } else {
          return Array.apply(null, arr);
        }
      };
      if (!Array.prototype.map) {
        Array.prototype.map = function(callback, instance) {
          var length = this.length;
          var mapped = new Array(length);
          for (var i = 0; i < length; i++) {
            if (i in this) {
              mapped[i] = callback.call(instance, this[i], i, this);
            }
          }
          return mapped;
        };
      }
      if (!Array.prototype.some) {
        Array.prototype.some = function(callback, instance) {
          var length = this.length;
          for (var i = 0; i < length; i++) {
            if (i in this && callback.call(instance, this[i], i, this)) {
              return true;
            }
          }
          return false;
        };
      }
      if (!Array.prototype.forEach) {
        Array.prototype.forEach = function(callback, thisArg) {
          var T, k;
          if (this == null) {
            throw new TypeError(" this is null or not defined");
          }
          var O = Object(this);
          var len = O.length >>> 0;
          if (typeof callback !== "function") {
            throw new TypeError(callback + " is not a function");
          }
          if (arguments.length > 1) {
            T = thisArg;
          }
          k = 0;
          while (k < len) {
            var kValue;
            if (k in O) {
              kValue = O[k];
              callback.call(T, kValue, k, O);
            }
            k++;
          }
        };
      }
      if (!Array.prototype.filter) {
        Array.prototype.filter = function(fun) {
          if (this === void 0 || this === null) {
            throw new TypeError();
          }
          var t = Object(this);
          var len = t.length >>> 0;
          if (typeof fun !== "function") {
            throw new TypeError();
          }
          var res = [];
          var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
          for (var i = 0; i < len; i++) {
            if (i in t) {
              var val = t[i];
              if (fun.call(thisArg, val, i, t)) {
                res.push(val);
              }
            }
          }
          return res;
        };
      }
      ss2._delegateContains = function(targets, object, method) {
        for (var i = 0; i < targets.length; i += 2) {
          if (targets[i] === object && targets[i + 1] === method) {
            return true;
          }
        }
        return false;
      };
      ss2._mkdel = function(targets) {
        var delegate = function delegate2() {
          if (targets.length === 2) {
            return targets[1].apply(targets[0], arguments);
          } else {
            var clone = ss2.arrayClone(targets);
            for (var i = 0; i < clone.length; i += 2) {
              if (ss2._delegateContains(targets, clone[i], clone[i + 1])) {
                clone[i + 1].apply(clone[i], arguments);
              }
            }
            return null;
          }
        };
        delegate._targets = targets;
        return delegate;
      };
      ss2.mkdel = function(object, method) {
        if (!object) {
          return method;
        }
        if (typeof method === "string") {
          method = object[method];
        }
        return ss2._mkdel([object, method]);
      };
      ss2.delegateCombine = function(delegate1, delegate2) {
        if (!delegate1) {
          if (!delegate2._targets) {
            return ss2.mkdel(null, delegate2);
          }
          return delegate2;
        }
        if (!delegate2) {
          if (!delegate1._targets) {
            return ss2.mkdel(null, delegate1);
          }
          return delegate1;
        }
        var targets1 = delegate1._targets ? delegate1._targets : [null, delegate1];
        var targets2 = delegate2._targets ? delegate2._targets : [null, delegate2];
        return ss2._mkdel(targets1.concat(targets2));
      };
      ss2.delegateRemove = function(delegate1, delegate2) {
        if (!delegate1 || delegate1 === delegate2) {
          return null;
        }
        var targets = delegate1._targets;
        if (!delegate2 || !targets) {
          return delegate1;
        }
        var object = null;
        var method;
        if (delegate2._targets) {
          object = delegate2._targets[0];
          method = delegate2._targets[1];
        } else {
          method = delegate2;
        }
        for (var i = 0; i < targets.length; i += 2) {
          if (targets[i] === object && targets[i + 1] === method) {
            if (targets.length === 2) {
              return null;
            }
            var t = ss2.arrayClone(targets);
            t.splice(i, 2);
            return ss2._mkdel(t);
          }
        }
        return delegate1;
      };
      ss2.delegateEquals = function(a, b) {
        if (a === b)
          return true;
        if (!a._targets && !b._targets)
          return false;
        var ta = a._targets || [null, a], tb = b._targets || [null, b];
        if (ta.length !== tb.length)
          return false;
        for (var i = 0; i < ta.length; i++) {
          if (ta[i] !== tb[i])
            return false;
        }
        return true;
      };
      var ss_Enum = ss2.Enum = ss2.mkType(ss2, "ss.Enum", {});
      ss2.initClass(ss_Enum);
      ss_Enum.getValues = function Enum$getValues(enumType) {
        var parts = [];
        var values = enumType.prototype;
        for (var i in values) {
          if (values.hasOwnProperty(i))
            parts.push(values[i]);
        }
        return parts;
      };
      var ss_IEnumerator = ss2.IEnumerator = ss2.mkType(ss2, "ss.IEnumerator");
      ss2.initInterface(ss_IEnumerator, { current: null, moveNext: null, reset: null }, [ss_IDisposable]);
      var ss_IEnumerable = ss2.IEnumerable = ss2.mkType(ss2, "ss.IEnumerable");
      ss2.initInterface(ss_IEnumerable, { getEnumerator: null });
      ss2.getEnumerator = function(obj) {
        return obj.getEnumerator ? obj.getEnumerator() : new ss_ArrayEnumerator(obj);
      };
      var ss_ICollection = ss2.ICollection = ss2.mkType(ss2, "ss.ICollection");
      ss2.initInterface(ss_ICollection, { get_count: null, add: null, clear: null, remove: null, contains: null }, [ss_IEnumerable]);
      ss2.count = function(obj) {
        return obj.get_count ? obj.get_count() : obj.length;
      };
      ss2.add = function(obj, item) {
        if (obj.add)
          obj.add(item);
        else if (ss2.isArray(obj))
          obj.push(item);
        else
          throw new ss_NotSupportedException();
      };
      ss2.clear = function(obj) {
        if (obj.clear)
          obj.clear();
        else if (ss2.isArray(obj))
          obj.length = 0;
        else
          throw new ss_NotSupportedException();
      };
      ss2.remove = function(obj, item) {
        if (obj.remove)
          return obj.remove(item);
        else if (ss2.isArray(obj)) {
          var index = ss2.indexOf(obj, item);
          if (index >= 0) {
            obj.splice(index, 1);
            return true;
          }
          return false;
        } else
          throw new ss_NotSupportedException();
      };
      ss2.contains = function(obj, item) {
        if (obj.contains)
          return obj.contains(item);
        else
          return ss2.indexOf(obj, item) >= 0;
      };
      var ss_IReadOnlyCollection = ss2.IReadOnlyCollection = ss2.mkType(ss2, "ss.IReadOnlyCollection");
      ss2.initInterface(ss_IReadOnlyCollection, { get_count: null, contains: null }, [ss_IEnumerable]);
      var ss_IEqualityComparer = ss2.IEqualityComparer = ss2.mkType(ss2, "ss.IEqualityComparer");
      ss2.initInterface(ss_IEqualityComparer, { areEqual: null, getObjectHashCode: null });
      var ss_IComparer = ss2.IComparer = ss2.mkType(ss2, "ss.IComparer");
      ss2.initInterface(ss_IComparer, { compare: null });
      ss2.unbox = function(instance) {
        if (!ss2.isValue(instance))
          throw new ss_InvalidOperationException("Nullable object must have a value.");
        return instance;
      };
      var ss_Nullable$1 = ss2.Nullable$1 = ss2.mkType(ss2, "ss.Nullable$1", function(T) {
        var $type = ss2.registerGenericClassInstance(ss_Nullable$1, [T], null, {}, {
          isInstanceOfType: function isInstanceOfType(instance) {
            return ss2.isInstanceOfType(instance, T);
          }
        });
        return $type;
      }, null, {
        eq: function eq(a, b) {
          return !ss2.isValue(a) ? !ss2.isValue(b) : a === b;
        },
        ne: function ne(a, b) {
          return !ss2.isValue(a) ? ss2.isValue(b) : a !== b;
        },
        le: function le(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) && a <= b;
        },
        ge: function ge(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) && a >= b;
        },
        lt: function lt(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) && a < b;
        },
        gt: function gt(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) && a > b;
        },
        sub: function sub(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a - b : null;
        },
        add: function add(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a + b : null;
        },
        mod: function mod(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a % b : null;
        },
        div: function div(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a / b : null;
        },
        mul: function mul(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a * b : null;
        },
        band: function band(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a & b : null;
        },
        bor: function bor(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a | b : null;
        },
        bxor: function bxor(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a ^ b : null;
        },
        shl: function shl(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a << b : null;
        },
        srs: function srs(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a >> b : null;
        },
        sru: function sru(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? a >>> b : null;
        },
        and: function and(a, b) {
          if (a === true && b === true)
            return true;
          else if (a === false || b === false)
            return false;
          else
            return null;
        },
        or: function or(a, b) {
          if (a === true || b === true)
            return true;
          else if (a === false && b === false)
            return false;
          else
            return null;
        },
        xor: function xor(a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? !!(a ^ b) : null;
        },
        not: function not(a) {
          return ss2.isValue(a) ? !a : null;
        },
        neg: function neg(a) {
          return ss2.isValue(a) ? -a : null;
        },
        pos: function pos(a) {
          return ss2.isValue(a) ? +a : null;
        },
        cpl: function cpl(a) {
          return ss2.isValue(a) ? ~a : null;
        },
        lift1: function lift1(f, o) {
          return ss2.isValue(o) ? f(o) : null;
        },
        lift2: function lift2(f, a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? f(a, b) : null;
        },
        liftcmp: function liftcmp(f, a, b) {
          return ss2.isValue(a) && ss2.isValue(b) ? f(a, b) : false;
        },
        lifteq: function lifteq(f, a, b) {
          var va = ss2.isValue(a), vb = ss2.isValue(b);
          return !va && !vb || va && vb && f(a, b);
        },
        liftne: function liftne(f, a, b) {
          var va = ss2.isValue(a), vb = ss2.isValue(b);
          return va !== vb || va && f(a, b);
        }
      });
      ss2.initGenericClass(ss_Nullable$1, 1);
      var ss_IList = ss2.IList = ss2.mkType(ss2, "ss.IList");
      ss2.initInterface(ss_IList, { get_item: null, set_item: null, indexOf: null, insert: null, removeAt: null }, [ss_ICollection, ss_IEnumerable]);
      ss2.getItem = function(obj, index) {
        return obj.get_item ? obj.get_item(index) : obj[index];
      };
      ss2.setItem = function(obj, index, value) {
        obj.set_item ? obj.set_item(index, value) : obj[index] = value;
      };
      ss2.indexOf = function(obj, item) {
        if ((!item || typeof item.equals !== "function") && typeof obj.indexOf === "function") {
          return obj.indexOf(item);
        } else if (ss2.isArrayOrTypedArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            if (ss2.staticEquals(obj[i], item)) {
              return i;
            }
          }
          return -1;
        } else
          return obj.indexOf(item);
      };
      ss2.insert = function(obj, index, item) {
        if (obj.insert)
          obj.insert(index, item);
        else if (ss2.isArray(obj))
          obj.splice(index, 0, item);
        else
          throw new ss_NotSupportedException();
      };
      ss2.removeAt = function(obj, index) {
        if (obj.removeAt)
          obj.removeAt(index);
        else if (ss2.isArray(obj))
          obj.splice(index, 1);
        else
          throw new ss_NotSupportedException();
      };
      var ss_IReadOnlyList = ss2.IReadOnlyList = ss2.mkType(ss2, "ss.IReadOnlyList");
      ss2.initInterface(ss_IReadOnlyList, { get_item: null }, [ss_IReadOnlyCollection, ss_IEnumerable]);
      var defInt = function defInt2(name, min, max) {
        var type = ss2[name] = ss2.mkType(ss2, "ss." + name, function() {
        }, null, {
          isInstanceOfType: function isInstanceOfType(instance) {
            return typeof instance === "number" && Math.round(instance, 0) === instance && instance >= min && instance <= max;
          },
          createInstance: function createInstance() {
            return 0;
          }
        });
        ss2.initStruct(type, [ss_IEquatable, ss_IComparable, ss_IFormattable]);
        return type;
      };
      var ss_Byte = defInt("Byte", 0, 255);
      var ss_SByte = defInt("SByte", -128, 127);
      var ss_Int16 = defInt("Int16", -32768, 32767);
      var ss_UInt16 = defInt("UInt16", 0, 65535);
      var ss_Int32 = defInt("Int32", -2147483648, 2147483647);
      var ss_UInt32 = defInt("UInt32", 0, 4294967295);
      var ss_Int64 = defInt("Int64", -9223372036854776e3, 9223372036854776e3);
      var ss_UInt64 = defInt("UInt64", 0, 18446744073709552e3);
      var ss_Char = defInt("Char", 0, 65535);
      ss2.sxb = function(x) {
        return x | (x & 128 ? 4294967040 : 0);
      };
      ss2.sxs = function(x) {
        return x | (x & 32768 ? 4294901760 : 0);
      };
      ss2.clip8 = function(x) {
        return ss2.isValue(x) ? ss2.sxb(x & 255) : null;
      };
      ss2.clipu8 = function(x) {
        return ss2.isValue(x) ? x & 255 : null;
      };
      ss2.clip16 = function(x) {
        return ss2.isValue(x) ? ss2.sxs(x & 65535) : null;
      };
      ss2.clipu16 = function(x) {
        return ss2.isValue(x) ? x & 65535 : null;
      };
      ss2.clip32 = function(x) {
        return ss2.isValue(x) ? x | 0 : null;
      };
      ss2.clipu32 = function(x) {
        return ss2.isValue(x) ? x >>> 0 : null;
      };
      ss2.clip64 = function(x) {
        return ss2.isValue(x) ? (Math.floor(x / 4294967296) | 0) * 4294967296 + (x >>> 0) : null;
      };
      ss2.clipu64 = function(x) {
        return ss2.isValue(x) ? (Math.floor(x / 4294967296) >>> 0) * 4294967296 + (x >>> 0) : null;
      };
      ss2.ck = function(x, tp) {
        if (ss2.isValue(x) && !tp.isInstanceOfType(x))
          throw new ss_OverflowException();
        return x;
      };
      ss2.trunc = function(n) {
        return ss2.isValue(n) ? n > 0 ? Math.floor(n) : Math.ceil(n) : null;
      };
      ss2.idiv = function(a, b) {
        if (!ss2.isValue(a) || !ss2.isValue(b))
          return null;
        if (!b)
          throw new ss_DivideByZeroException();
        return ss2.trunc(a / b);
      };
      ss2.imod = function(a, b) {
        if (!ss2.isValue(a) || !ss2.isValue(b))
          return null;
        if (!b)
          throw new ss_DivideByZeroException();
        return a % b;
      };
      var ss_JsDate = ss2.JsDate = ss2.mkType(ss2, "ss.JsDate", function() {
      }, null, {
        createInstance: function createInstance() {
          return /* @__PURE__ */ new Date();
        },
        isInstanceOfType: function isInstanceOfType(instance) {
          return instance instanceof Date;
        }
      });
      ss2.initClass(ss_JsDate, null, [ss_IEquatable, ss_IComparable]);
      var ss_ArrayEnumerator = ss2.ArrayEnumerator = ss2.mkType(ss2, "ss.ArrayEnumerator", function(array) {
        this._array = array;
        this._index = -1;
      }, {
        moveNext: function moveNext() {
          this._index++;
          return this._index < this._array.length;
        },
        reset: function reset() {
          this._index = -1;
        },
        current: function current() {
          if (this._index < 0 || this._index >= this._array.length)
            throw "Invalid operation";
          return this._array[this._index];
        },
        dispose: function dispose() {
        }
      });
      ss2.initClass(ss_ArrayEnumerator, null, [ss_IEnumerator, ss_IDisposable]);
      var ss_ObjectEnumerator = ss2.ObjectEnumerator = ss2.mkType(ss2, "ss.ObjectEnumerator", function(o) {
        this._keys = Object.keys(o);
        this._index = -1;
        this._object = o;
      }, {
        moveNext: function moveNext() {
          this._index++;
          return this._index < this._keys.length;
        },
        reset: function reset() {
          this._index = -1;
        },
        current: function current() {
          if (this._index < 0 || this._index >= this._keys.length)
            throw new ss_InvalidOperationException("Invalid operation");
          var k = this._keys[this._index];
          return { key: k, value: this._object[k] };
        },
        dispose: function dispose() {
        }
      });
      ss2.initClass(ss_ObjectEnumerator, null, [ss_IEnumerator, ss_IDisposable]);
      var ss_EqualityComparer = ss2.EqualityComparer = ss2.mkType(ss2, "ss.EqualityComparer", function() {
      }, {
        areEqual: function areEqual(x, y) {
          return ss2.staticEquals(x, y);
        },
        getObjectHashCode: function getObjectHashCode(obj) {
          return ss2.isValue(obj) ? ss2.getHashCode(obj) : 0;
        }
      });
      ss2.initClass(ss_EqualityComparer, null, [ss_IEqualityComparer]);
      ss_EqualityComparer.def = new ss_EqualityComparer();
      var ss_Comparer = ss2.Comparer = ss2.mkType(ss2, "ss.Comparer", function(f) {
        this.f = f;
      }, {
        compare: function compare(x, y) {
          return this.f(x, y);
        }
      });
      ss2.initClass(ss_Comparer, null, [ss_IComparer]);
      ss_Comparer.def = new ss_Comparer(function(a, b) {
        if (!ss2.isValue(a))
          return !ss2.isValue(b) ? 0 : -1;
        else if (!ss2.isValue(b))
          return 1;
        else
          return ss2.compare(a, b);
      });
      var ss_IDisposable = ss2.IDisposable = ss2.mkType(ss2, "ss.IDisposable");
      ss2.initInterface(ss_IDisposable, { dispose: null });
      var ss_StringBuilder = ss2.StringBuilder = ss2.mkType(ss2, "ss.StringBuilder", function(s) {
        this._parts = ss2.isValue(s) && s !== "" ? [s] : [];
        this.length = ss2.isValue(s) ? s.length : 0;
      }, {
        append: function append(o) {
          if (ss2.isValue(o)) {
            var s = o.toString();
            ss2.add(this._parts, s);
            this.length += s.length;
          }
          return this;
        },
        appendChar: function appendChar(c) {
          return this.append(String.fromCharCode(c));
        },
        appendLine: function appendLine(s) {
          this.append(s);
          this.append("\r\n");
          return this;
        },
        appendLineChar: function appendLineChar(c) {
          return this.appendLine(String.fromCharCode(c));
        },
        clear: function clear() {
          this._parts = [];
          this.length = 0;
        },
        toString: function toString() {
          return this._parts.join("");
        }
      });
      ss2.initClass(ss_StringBuilder);
      var ss_EventArgs = ss2.EventArgs = ss2.mkType(ss2, "ss.EventArgs", function() {
      });
      ss2.initClass(ss_EventArgs);
      ss_EventArgs.Empty = new ss_EventArgs();
      var ss_Exception = ss2.Exception = ss2.mkType(ss2, "ss.Exception", function(message, innerException) {
        this._message = message || "An error occurred.";
        this._innerException = innerException || null;
        this._error = new Error();
      }, {
        get_message: function get_message() {
          return this._message;
        },
        get_innerException: function get_innerException() {
          return this._innerException;
        },
        get_stack: function get_stack() {
          return this._error.stack;
        },
        toString: function toString() {
          var message = this._message;
          var exception = this;
          if (ss2.isNullOrEmptyString(message)) {
            if (ss2.isValue(ss2.getInstanceType(exception)) && ss2.isValue(ss2.getTypeFullName(ss2.getInstanceType(exception)))) {
              message = ss2.getTypeFullName(ss2.getInstanceType(exception));
            } else {
              message = "[object Exception]";
            }
          }
          return message;
        }
      }, {
        wrap: function wrap(o) {
          if (ss2.isInstanceOfType(o, ss_Exception)) {
            return o;
          } else if (o instanceof TypeError) {
            return new ss_NullReferenceException(o.message, new ss_JsErrorException(o));
          } else if (o instanceof RangeError) {
            return new ss_ArgumentOutOfRangeException(null, o.message, new ss_JsErrorException(o));
          } else if (o instanceof Error) {
            return new ss_JsErrorException(o);
          } else {
            return new ss_Exception(o.toString());
          }
        }
      });
      ss2.initClass(ss_Exception);
      var ss_NotImplementedException = ss2.NotImplementedException = ss2.mkType(ss2, "ss.NotImplementedException", function(message, innerException) {
        ss_Exception.call(this, message || "The method or operation is not implemented.", innerException);
      });
      ss2.initClass(ss_NotImplementedException, ss_Exception);
      var ss_NotSupportedException = ss2.NotSupportedException = ss2.mkType(ss2, "ss.NotSupportedException", function(message, innerException) {
        ss_Exception.call(this, message || "Specified method is not supported.", innerException);
      });
      ss2.initClass(ss_NotSupportedException, ss_Exception);
      var ss_JsErrorException = ss2.JsErrorException = ss2.mkType(ss2, "ss.JsErrorException", function(error, message, innerException) {
        ss_Exception.call(this, message || error.message, innerException);
        this.error = error;
      }, {
        get_stack: function get_stack() {
          return this.error.stack;
        }
      });
      ss2.initClass(ss_JsErrorException, ss_Exception);
      var ss_ArgumentException = ss2.ArgumentException = ss2.mkType(ss2, "ss.ArgumentException", function(message, paramName, innerException) {
        ss_Exception.call(this, message || "Value does not fall within the expected range.", innerException);
        this.paramName = paramName || null;
      });
      ss2.initClass(ss_ArgumentException, ss_Exception);
      var ss_ArgumentNullException = ss2.ArgumentNullException = ss2.mkType(ss2, "ss.ArgumentNullException", function(paramName, message, innerException) {
        if (!message) {
          message = "Value cannot be null.";
          if (paramName)
            message += "\nParameter name: " + paramName;
        }
        ss_ArgumentException.call(this, message, paramName, innerException);
      });
      ss2.initClass(ss_ArgumentNullException, ss_ArgumentException);
      var ss_ArgumentOutOfRangeException = ss2.ArgumentOutOfRangeException = ss2.mkType(ss2, "ss.ArgumentOutOfRangeException", function(paramName, message, innerException, actualValue) {
        if (!message) {
          message = "Value is out of range.";
          if (paramName)
            message += "\nParameter name: " + paramName;
        }
        ss_ArgumentException.call(this, message, paramName, innerException);
        this.actualValue = actualValue || null;
      });
      ss2.initClass(ss_ArgumentOutOfRangeException, ss_ArgumentException);
      var ss_FormatException = ss2.FormatException = ss2.mkType(ss2, "ss.FormatException", function(message, innerException) {
        ss_Exception.call(this, message || "Invalid format.", innerException);
      });
      ss2.initClass(ss_FormatException, ss_Exception);
      var ss_ArithmeticException = ss2.ArithmeticException = ss2.mkType(ss2, "ss.ArithmeticException", function(message, innerException) {
        ss_Exception.call(this, message || "Overflow or underflow in the arithmetic operation.", innerException);
      });
      ss2.initClass(ss_ArithmeticException, ss_Exception);
      var ss_OverflowException = ss2.OverflowException = ss2.mkType(ss2, "ss.OverflowException", function(message, innerException) {
        ss_ArithmeticException.call(this, message || "Arithmetic operation resulted in an overflow.", innerException);
      });
      ss2.initClass(ss_OverflowException, ss_ArithmeticException);
      var ss_DivideByZeroException = ss2.DivideByZeroException = ss2.mkType(ss2, "ss.DivideByZeroException", function(message, innerException) {
        ss_ArithmeticException.call(this, message || "Division by 0.", innerException);
      });
      ss2.initClass(ss_DivideByZeroException, ss_ArithmeticException);
      var ss_InvalidCastException = ss2.InvalidCastException = ss2.mkType(ss2, "ss.InvalidCastException", function(message, innerException) {
        ss_Exception.call(this, message || "The cast is not valid.", innerException);
      });
      ss2.initClass(ss_InvalidCastException, ss_Exception);
      var ss_InvalidOperationException = ss2.InvalidOperationException = ss2.mkType(ss2, "ss.InvalidOperationException", function(message, innerException) {
        ss_Exception.call(this, message || "Operation is not valid due to the current state of the object.", innerException);
      });
      ss2.initClass(ss_InvalidOperationException, ss_Exception);
      var ss_NullReferenceException = ss2.NullReferenceException = ss2.mkType(ss2, "ss.NullReferenceException", function(message, innerException) {
        ss_Exception.call(this, message || "Object is null.", innerException);
      });
      ss2.initClass(ss_NullReferenceException, ss_Exception);
      var ss_KeyNotFoundException = ss2.KeyNotFoundException = ss2.mkType(ss2, "ss.KeyNotFoundException", function(message, innerException) {
        ss_Exception.call(this, message || "Key not found.", innerException);
      });
      ss2.initClass(ss_KeyNotFoundException, ss_Exception);
      var ss_AmbiguousMatchException = ss2.AmbiguousMatchException = ss2.mkType(ss2, "ss.AmbiguousMatchException", function(message, innerException) {
        ss_Exception.call(this, message || "Ambiguous match.", innerException);
      });
      ss2.initClass(ss_AmbiguousMatchException, ss_Exception);
      global3.ss = ss2;
    })(global2);
    var ss = global2.ss;
    (function() {
      "dont use strict";
      var $asm = {};
      global2.tab = global2.tab || {};
      ss.initAssembly($asm, "tabcoreslim");
      var $tab_BaseLogAppender = global2.tab.BaseLogAppender = ss.mkType($asm, "tab.BaseLogAppender", function() {
        this.$filters = null;
        this.$filters = [];
      }, {
        clearFilters: function BaseLogAppender$ClearFilters() {
          ss.clear(this.$filters);
        },
        addFilter: function BaseLogAppender$AddFilter(f) {
          this.$filters.push(f);
        },
        removeFilter: function BaseLogAppender$RemoveFilter(f) {
          ss.remove(this.$filters, f);
        },
        log: function BaseLogAppender$Log(source, level, message, args) {
          for (var $t1 = 0; $t1 < this.$filters.length; $t1++) {
            var filter = this.$filters[$t1];
            if (!filter(source, level)) {
              continue;
            }
            this.logInternal(source, level, message, args);
            return;
          }
        },
        logInternal: null,
        formatMessage: function BaseLogAppender$FormatMessage(message, args) {
          if (ss.isNullOrUndefined(args) || args.length === 0) {
            return message;
          }
          var sb = new ss.StringBuilder();
          var argNum = 0;
          var prevPercent = false;
          for (var i = 0; i < message.length; i++) {
            var currChar = message.charCodeAt(i);
            if (currChar === 37) {
              if (prevPercent) {
                sb.append("%");
                prevPercent = false;
              } else {
                prevPercent = true;
              }
            } else {
              if (prevPercent) {
                switch (currChar) {
                  case 98:
                  case 115:
                  case 100:
                  case 110:
                  case 111: {
                    sb.append(args.length > argNum ? args[argNum] : "");
                    argNum++;
                    break;
                  }
                }
              } else {
                sb.appendChar(currChar);
              }
              prevPercent = false;
            }
          }
          return sb.toString();
        }
      });
      var $tab_ConsoleLogAppender = global2.tab.ConsoleLogAppender = ss.mkType($asm, "tab.ConsoleLogAppender", function() {
        this.$levelMethods = null;
        $tab_BaseLogAppender.call(this);
      }, {
        logInternal: function ConsoleLogAppender$LogInternal(source, level, message, args) {
          if (_typeof(window.console) !== "object") {
            return;
          }
          message = source.get_name() + ": " + message;
          var consoleArgs = [];
          var $t1 = consoleArgs.concat(message);
          consoleArgs = $t1.concat.apply($t1, args);
          try {
            Function.prototype.apply.call(this.$getConsoleMethod(level), window.console, consoleArgs);
          } catch ($t2) {
          }
        },
        $getConsoleMethod: function ConsoleLogAppender$GetConsoleMethod(level) {
          var console2 = window.self["console"];
          if (ss.isNullOrUndefined(this.$levelMethods)) {
            this.$levelMethods = {};
            this.$levelMethods[1 .toString()] = console2.log;
            this.$levelMethods[4 .toString()] = console2.error;
            this.$levelMethods[2 .toString()] = console2.info;
            this.$levelMethods[3 .toString()] = console2.warn;
          }
          var $t1 = this.$levelMethods[level.toString()];
          if (ss.isNullOrUndefined($t1)) {
            $t1 = console2.log;
          }
          return $t1;
        }
      });
      var $tab_EscapingUtil = global2.tab.EscapingUtil = ss.mkType($asm, "tab.EscapingUtil", null, null, {
        escapeHtml: function EscapingUtil$EscapeHtml(html) {
          var escaped = ss.coalesce(html, "");
          escaped = escaped.replace(new RegExp("&", "g"), "&amp;");
          escaped = escaped.replace(new RegExp("<", "g"), "&lt;");
          escaped = escaped.replace(new RegExp(">", "g"), "&gt;");
          escaped = escaped.replace(new RegExp('"', "g"), "&quot;");
          escaped = escaped.replace(new RegExp("'", "g"), "&#39;");
          escaped = escaped.replace(new RegExp("/", "g"), "&#47;");
          if (new RegExp("^ +$").test(escaped)) {
            escaped = escaped.replace(new RegExp(" ", "g"), "&nbsp;");
          }
          return escaped;
        }
      });
      var $tab_Log = global2.tab.Log = ss.mkType($asm, "tab.Log", function() {
      }, null, {
        get: function Log$Get(o) {
          return $tab_Logger.lazyGetLogger(ss.getInstanceType(o));
        },
        get$1: function Log$Get(t) {
          return $tab_Logger.lazyGetLogger(t);
        }
      });
      var $tab_LogAppenderInstance = global2.tab.LogAppenderInstance = ss.mkType($asm, "tab.LogAppenderInstance", function(appenderFactoryFunc) {
        this.$appenderFactoryFunc = null;
        this.$1$InstanceField = null;
        this.$appenderFactoryFunc = appenderFactoryFunc;
      }, {
        get_instance: function LogAppenderInstance$get_Instance() {
          return this.$1$InstanceField;
        },
        set_instance: function LogAppenderInstance$set_Instance(value) {
          this.$1$InstanceField = value;
        },
        enableLogging: function LogAppenderInstance$EnableLogging(filter) {
          if (ss.isNullOrUndefined(this.get_instance())) {
            this.set_instance(this.$appenderFactoryFunc());
            $tab_Logger.addAppender(this.get_instance());
          } else if (!$tab_Logger.hasAppender(this.get_instance())) {
            $tab_Logger.addAppender(this.get_instance());
          }
          this.get_instance().addFilter(ss.coalesce(filter, function(_, __) {
            return true;
          }));
        },
        disableLogging: function LogAppenderInstance$DisableLogging() {
          if (ss.isNullOrUndefined(this.get_instance())) {
            return;
          }
          $tab_Logger.removeAppender(this.get_instance());
          this.set_instance(null);
        }
      });
      var $tab_Logger = global2.tab.Logger = ss.mkType($asm, "tab.Logger", function(name) {
        this.$name = null;
        this.$name = name;
      }, {
        get_name: function Logger$get_Name() {
          return this.$name;
        },
        debug: function Logger$Debug(message, args) {
          this.$logInternal(1, message, args);
        },
        info: function Logger$Info(message, args) {
          this.$logInternal(2, message, args);
        },
        warn: function Logger$Warn(message, args) {
          this.$logInternal(3, message, args);
        },
        error: function Logger$Error(message, args) {
          this.$logInternal(4, message, args);
        },
        log: function Logger$Log(level, message, args) {
          this.$logInternal(level, message, args);
        },
        $logInternal: function Logger$LogInternal(level, message, args) {
          try {
            for (var $t1 = 0; $t1 < $tab_Logger.$appenders.length; $t1++) {
              var logAppender = $tab_Logger.$appenders[$t1];
              logAppender.log(this, level, message, args);
            }
          } catch ($t2) {
          }
        }
      }, {
        get_globalLog: function Logger$get_GlobalLog() {
          return $tab_Logger.global;
        },
        clearFilters: function Logger$ClearFilters() {
          for (var $t1 = 0; $t1 < $tab_Logger.$appenders.length; $t1++) {
            var logAppender = $tab_Logger.$appenders[$t1];
            logAppender.clearFilters();
          }
          $tab_Logger.$filters.splice(0, $tab_Logger.$filters.length);
        },
        filterByLogger: function Logger$FilterByLogger(validLogger, minLogLevel) {
          minLogLevel = minLogLevel || 0;
          $tab_Logger.$addFilter(function(l, ll) {
            return ss.referenceEquals(l, validLogger) && ll >= minLogLevel;
          });
        },
        filterByType: function Logger$FilterByType(t, minLogLevel) {
          minLogLevel = minLogLevel || 0;
          $tab_Logger.$addFilter(function(l, ll) {
            return ll >= minLogLevel && ss.referenceEquals(l.get_name(), ss.getTypeName(t));
          });
        },
        filterByName: function Logger$FilterByName(namePattern, minLogLevel) {
          minLogLevel = minLogLevel || 0;
          var regex = new RegExp(namePattern, "i");
          $tab_Logger.$addFilter(function(l, ll) {
            return ll >= minLogLevel && ss.isValue(l.get_name().match(regex));
          });
        },
        clearAppenders: function Logger$ClearAppenders() {
          $tab_Logger.$appenders.splice(0, $tab_Logger.$filters.length);
        },
        hasAppender: function Logger$HasAppender(appender) {
          return $tab_Logger.$appenders.indexOf(appender) > -1;
        },
        addAppender: function Logger$AddAppender(appender) {
          for (var $t1 = 0; $t1 < $tab_Logger.$filters.length; $t1++) {
            var filter = $tab_Logger.$filters[$t1];
            appender.addFilter(filter);
          }
          $tab_Logger.$appenders.push(appender);
        },
        removeAppender: function Logger$RemoveAppender(appender) {
          var indexOfAppender = $tab_Logger.$appenders.indexOf(appender);
          if (indexOfAppender > -1) {
            $tab_Logger.$appenders.splice(indexOfAppender, 1);
          }
        },
        lazyGetLogger: function Logger$LazyGetLogger(t) {
          var FieldName = "_logger";
          var logger = t[FieldName];
          if (ss.isNullOrUndefined(logger)) {
            logger = $tab_Logger.getLogger(t, null);
            t[FieldName] = logger;
          }
          return logger;
        },
        getLogger: function Logger$GetLogger(t, ll) {
          var l = $tab_Logger.getLoggerWithName(ss.getTypeName(t));
          if (ss.isValue(ll)) {
            $tab_Logger.filterByLogger(l, ss.unbox(ll));
          }
          return l;
        },
        getLoggerWithName: function Logger$GetLoggerWithName(name) {
          return new $tab_Logger(name);
        },
        $setupUrlFilters: function Logger$SetupUrlFilters() {
          var queryParams = $tab_UriExtensions.getUriQueryParameters(window.self.location.search);
          if (!ss.keyExists(queryParams, $tab_Logger.$logQueryParam)) {
            return;
          }
          $tab_Logger.clearFilters();
          var logParams = queryParams[$tab_Logger.$logQueryParam];
          if (logParams.length === 0) {
            $tab_Logger.filterByName(".*", 0);
          }
          for (var $t1 = 0; $t1 < logParams.length; $t1++) {
            var logParam = logParams[$t1];
            var logVals = logParam.split(String.fromCharCode(58));
            var level = 1;
            if (logVals.length > 0 && ss.isValue(logVals[1])) {
              var key = logVals[1].toLowerCase();
              var index = $tab_Logger.loggerLevelNames.indexOf(key);
              if (index >= 0) {
                level = index;
              }
            }
            $tab_Logger.filterByName(logVals[0], level);
          }
        },
        $addFilter: function Logger$AddFilter(filterFunc) {
          $tab_Logger.$filters.push(filterFunc);
          for (var $t1 = 0; $t1 < $tab_Logger.$appenders.length; $t1++) {
            var logAppender = $tab_Logger.$appenders[$t1];
            logAppender.addFilter(filterFunc);
          }
        }
      });
      var $tab_LoggerLevel = global2.tab.LoggerLevel = ss.mkEnum($asm, "tab.LoggerLevel", { all: 0, debug: 1, info: 2, warn: 3, error: 4, off: 5 });
      var $tab_ScriptEx = global2.tab.ScriptEx = ss.mkType($asm, "tab.ScriptEx");
      var $tab_StringExtensions = global2.tab.StringExtensions = ss.mkType($asm, "tab.StringExtensions", null, null, {
        decodeUriComponentCorrectly: function StringExtensions$DecodeUriComponentCorrectly(s) {
          return decodeURIComponent(s.replace(new RegExp("\\+", "g"), " "));
        }
      });
      var $tab_UriExtensions = global2.tab.UriExtensions = ss.mkType($asm, "tab.UriExtensions", null, null, {
        getUriQueryParameters: function UriExtensions$GetUriQueryParameters(uri) {
          var parameters = {};
          if (ss.isNullOrUndefined(uri)) {
            return parameters;
          }
          var indexOfQuery = uri.indexOf("?");
          if (indexOfQuery < 0) {
            return parameters;
          }
          var query = uri.substr(indexOfQuery + 1);
          var indexOfHash = query.indexOf("#");
          if (indexOfHash >= 0) {
            query = query.substr(0, indexOfHash);
          }
          if (ss.isNullOrEmptyString(query)) {
            return parameters;
          }
          var paramPairs = query.split("&");
          for (var $t1 = 0; $t1 < paramPairs.length; $t1++) {
            var pair = paramPairs[$t1];
            var keyValue = pair.split("=");
            var key = $tab_StringExtensions.decodeUriComponentCorrectly(keyValue[0]);
            var values;
            if (ss.keyExists(parameters, key)) {
              values = parameters[key];
            } else {
              values = [];
              parameters[key] = values;
            }
            if (keyValue.length > 1) {
              values.push($tab_StringExtensions.decodeUriComponentCorrectly(keyValue[1]));
            }
          }
          return parameters;
        }
      });
      var $tab_WindowHelper = global2.tab.WindowHelper = ss.mkType($asm, "tab.WindowHelper", function(window2) {
        this.$window = null;
        this.$window = window2;
      }, {
        get_pageXOffset: function WindowHelper$get_PageXOffset() {
          return $tab_WindowHelper.$pageXOffsetFunc(this.$window);
        },
        get_pageYOffset: function WindowHelper$get_PageYOffset() {
          return $tab_WindowHelper.$pageYOffsetFunc(this.$window);
        },
        get_clientWidth: function WindowHelper$get_ClientWidth() {
          return $tab_WindowHelper.$clientWidthFunc(this.$window);
        },
        get_clientHeight: function WindowHelper$get_ClientHeight() {
          return $tab_WindowHelper.$clientHeightFunc(this.$window);
        },
        get_innerWidth: function WindowHelper$get_InnerWidth() {
          return $tab_WindowHelper.$innerWidthFunc(this.$window);
        },
        get_outerWidth: function WindowHelper$get_OuterWidth() {
          return $tab_WindowHelper.$outerWidthFunc(this.$window);
        },
        get_innerHeight: function WindowHelper$get_InnerHeight() {
          return $tab_WindowHelper.$innerHeightFunc(this.$window);
        },
        get_outerHeight: function WindowHelper$get_OuterHeight() {
          return $tab_WindowHelper.$outerHeightFunc(this.$window);
        },
        get_screenLeft: function WindowHelper$get_ScreenLeft() {
          return $tab_WindowHelper.$screenLeftFunc(this.$window);
        },
        get_screenTop: function WindowHelper$get_ScreenTop() {
          return $tab_WindowHelper.$screenTopFunc(this.$window);
        },
        isQuirksMode: function WindowHelper$IsQuirksMode() {
          return document.compatMode === "BackCompat";
        }
      }, {
        get_windowSelf: function WindowHelper$get_WindowSelf() {
          return window.self;
        },
        get_windowParent: function WindowHelper$get_WindowParent() {
          return window.parent;
        },
        get_selection: function WindowHelper$get_Selection() {
          if (typeof window["getSelection"] === "function") {
            return window.getSelection();
          }
          if (typeof document["getSelection"] === "function") {
            return document.getSelection();
          }
          return null;
        },
        close: function WindowHelper$Close(window2) {
          window2.close();
        },
        getOpener: function WindowHelper$GetOpener(window2) {
          return window2.opener;
        },
        getLocation: function WindowHelper$GetLocation(window2) {
          return window2.location;
        },
        getOrigin: function WindowHelper$GetOrigin(window2, includePort) {
          return window2.location.protocol + "//" + (includePort ? window2.location.host : window2.location.hostname);
        },
        getPathAndSearch: function WindowHelper$GetPathAndSearch(window2) {
          return window2.location.pathname + window2.location.search;
        },
        setLocationHref: function WindowHelper$SetLocationHref(window2, href) {
          window2.location.href = href;
        },
        locationReplace: function WindowHelper$LocationReplace(window2, url) {
          window2.location.replace(url);
        },
        open: function WindowHelper$Open(href, target, options) {
          return window.open(href, target, options);
        },
        reload: function WindowHelper$Reload(w, forceGet) {
          w.location.reload(forceGet);
        },
        requestAnimationFrame: function WindowHelper$RequestAnimationFrame(action) {
          return $tab_WindowHelper.$requestAnimationFrameFunc(action);
        },
        cancelAnimationFrame: function WindowHelper$CancelAnimationFrame(animationId) {
          if (ss.isValue(animationId)) {
            $tab_WindowHelper.$cancelAnimationFrameFunc(animationId);
          }
        },
        setTimeout: function WindowHelper$SetTimeout(callback, milliseconds) {
          return window.setTimeout(callback, milliseconds);
        },
        setInterval: function WindowHelper$SetInterval(callback, milliseconds) {
          return window.setInterval(callback, milliseconds);
        },
        addListener: function WindowHelper$AddListener(windowParam, eventName, messageListener) {
          if ("addEventListener" in windowParam) {
            windowParam.addEventListener(eventName, messageListener, false);
          } else {
            windowParam.attachEvent("on" + eventName, messageListener);
          }
        },
        removeListener: function WindowHelper$RemoveListener(window2, eventName, messageListener) {
          if ("removeEventListener" in window2) {
            window2.removeEventListener(eventName, messageListener, false);
          } else {
            window2.detachEvent("on" + eventName, messageListener);
          }
        },
        $setDefaultRequestAnimationFrameImpl: function WindowHelper$SetDefaultRequestAnimationFrameImpl() {
          var lastTime = 0;
          $tab_WindowHelper.$requestAnimationFrameFunc = function(callback) {
            var curTime = (/* @__PURE__ */ new Date()).getTime();
            var timeToCall = Math.max(0, 16 - (curTime - lastTime));
            lastTime = curTime + timeToCall;
            var id = window.setTimeout(callback, timeToCall);
            return id;
          };
        },
        clearSelection: function WindowHelper$ClearSelection() {
          var selection = $tab_WindowHelper.get_selection();
          if (ss.isValue(selection)) {
            if (typeof selection["removeAllRanges"] === "function") {
              selection.removeAllRanges();
            } else if (typeof selection["empty"] === "function") {
              selection["empty"]();
            }
          }
        }
      });
      ss.initClass($tab_BaseLogAppender);
      ss.initClass($tab_ConsoleLogAppender, $tab_BaseLogAppender);
      ss.initClass($tab_EscapingUtil);
      ss.initClass($tab_Log);
      ss.initClass($tab_LogAppenderInstance);
      ss.initClass($tab_Logger);
      ss.initClass($tab_ScriptEx);
      ss.initClass($tab_StringExtensions);
      ss.initClass($tab_UriExtensions);
      ss.initClass($tab_WindowHelper);
      (function() {
        $tab_Logger.global = $tab_Logger.getLoggerWithName("global");
        $tab_Logger.loggerLevelNames = [];
        $tab_Logger.$logQueryParam = ":log";
        $tab_Logger.$appenders = [];
        $tab_Logger.$filters = [];
        $tab_Logger.$nullLog = new $tab_Logger("");
        $tab_Logger.$setupUrlFilters();
        $tab_Logger.loggerLevelNames[0] = "all";
        $tab_Logger.loggerLevelNames[1] = "debug";
        $tab_Logger.loggerLevelNames[2] = "info";
        $tab_Logger.loggerLevelNames[3] = "warn";
        $tab_Logger.loggerLevelNames[4] = "error";
        $tab_Logger.loggerLevelNames[5] = "off";
      })();
      (function() {
        $tab_ConsoleLogAppender.globalAppender = new $tab_LogAppenderInstance(function() {
          return new $tab_ConsoleLogAppender();
        });
        $tab_ConsoleLogAppender.globalAppender.enableLogging(function(_, loggerLevel) {
          return loggerLevel >= 2;
        });
      })();
      (function() {
        $tab_WindowHelper.blank = "_blank";
        $tab_WindowHelper.$innerWidthFunc = null;
        $tab_WindowHelper.$innerHeightFunc = null;
        $tab_WindowHelper.$clientWidthFunc = null;
        $tab_WindowHelper.$clientHeightFunc = null;
        $tab_WindowHelper.$pageXOffsetFunc = null;
        $tab_WindowHelper.$pageYOffsetFunc = null;
        $tab_WindowHelper.$screenLeftFunc = null;
        $tab_WindowHelper.$screenTopFunc = null;
        $tab_WindowHelper.$outerWidthFunc = null;
        $tab_WindowHelper.$outerHeightFunc = null;
        $tab_WindowHelper.$requestAnimationFrameFunc = null;
        $tab_WindowHelper.$cancelAnimationFrameFunc = null;
        if ("innerWidth" in window) {
          $tab_WindowHelper.$innerWidthFunc = function(w) {
            return w.innerWidth;
          };
        } else {
          $tab_WindowHelper.$innerWidthFunc = function(w1) {
            return w1.document.documentElement.offsetWidth;
          };
        }
        if ("outerWidth" in window) {
          $tab_WindowHelper.$outerWidthFunc = function(w2) {
            return w2.outerWidth;
          };
        } else {
          $tab_WindowHelper.$outerWidthFunc = $tab_WindowHelper.$innerWidthFunc;
        }
        if ("innerHeight" in window) {
          $tab_WindowHelper.$innerHeightFunc = function(w3) {
            return w3.innerHeight;
          };
        } else {
          $tab_WindowHelper.$innerHeightFunc = function(w4) {
            return w4.document.documentElement.offsetHeight;
          };
        }
        if ("outerHeight" in window) {
          $tab_WindowHelper.$outerHeightFunc = function(w5) {
            return w5.outerHeight;
          };
        } else {
          $tab_WindowHelper.$outerHeightFunc = $tab_WindowHelper.$innerHeightFunc;
        }
        if ("clientWidth" in window) {
          $tab_WindowHelper.$clientWidthFunc = function(w6) {
            return w6["clientWidth"];
          };
        } else {
          $tab_WindowHelper.$clientWidthFunc = function(w7) {
            return w7.document.documentElement.clientWidth;
          };
        }
        if ("clientHeight" in window) {
          $tab_WindowHelper.$clientHeightFunc = function(w8) {
            return w8["clientHeight"];
          };
        } else {
          $tab_WindowHelper.$clientHeightFunc = function(w9) {
            return w9.document.documentElement.clientHeight;
          };
        }
        if (ss.isValue(window.self.pageXOffset)) {
          $tab_WindowHelper.$pageXOffsetFunc = function(w10) {
            return w10.pageXOffset;
          };
        } else {
          $tab_WindowHelper.$pageXOffsetFunc = function(w11) {
            return w11.document.documentElement.scrollLeft;
          };
        }
        if (ss.isValue(window.self.pageYOffset)) {
          $tab_WindowHelper.$pageYOffsetFunc = function(w12) {
            return w12.pageYOffset;
          };
        } else {
          $tab_WindowHelper.$pageYOffsetFunc = function(w13) {
            return w13.document.documentElement.scrollTop;
          };
        }
        if ("screenLeft" in window) {
          $tab_WindowHelper.$screenLeftFunc = function(w14) {
            return ss.unbox(ss.cast(w14.screenLeft, ss.Int32));
          };
        } else {
          $tab_WindowHelper.$screenLeftFunc = function(w15) {
            return w15.screenX;
          };
        }
        if ("screenTop" in window) {
          $tab_WindowHelper.$screenTopFunc = function(w16) {
            return ss.unbox(ss.cast(w16.screenTop, ss.Int32));
          };
        } else {
          $tab_WindowHelper.$screenTopFunc = function(w17) {
            return w17.screenY;
          };
        }
        {
          var DefaultRequestName = "requestAnimationFrame";
          var DefaultCancelName = "cancelAnimationFrame";
          var vendors = ["ms", "moz", "webkit", "o"];
          var requestFuncName = null;
          var cancelFuncName = null;
          if (DefaultRequestName in window) {
            requestFuncName = DefaultRequestName;
          }
          if (DefaultCancelName in window) {
            cancelFuncName = DefaultCancelName;
          }
          for (var ii = 0; ii < vendors.length && (ss.isNullOrUndefined(requestFuncName) || ss.isNullOrUndefined(cancelFuncName)); ++ii) {
            var vendor = vendors[ii];
            var funcName = vendor + "RequestAnimationFrame";
            if (ss.isNullOrUndefined(requestFuncName) && funcName in window) {
              requestFuncName = funcName;
            }
            if (ss.isNullOrUndefined(cancelFuncName)) {
              funcName = vendor + "CancelAnimationFrame";
              if (funcName in window) {
                cancelFuncName = funcName;
              }
              funcName = vendor + "CancelRequestAnimationFrame";
              if (funcName in window) {
                cancelFuncName = funcName;
              }
            }
          }
          if (ss.isValue(requestFuncName)) {
            $tab_WindowHelper.$requestAnimationFrameFunc = function(callback) {
              return window[requestFuncName](callback);
            };
          } else {
            $tab_WindowHelper.$setDefaultRequestAnimationFrameImpl();
          }
          if (ss.isValue(cancelFuncName)) {
            $tab_WindowHelper.$cancelAnimationFrameFunc = function(animationId) {
              window[cancelFuncName](animationId);
            };
          } else {
            $tab_WindowHelper.$cancelAnimationFrameFunc = window.clearTimeout;
          }
        }
      })();
    })();
    var tab = global2.tab;
    global2.tableauSoftware = global2.tableauSoftware || {};
    (function() {
      "dont use strict";
      var $asm = {};
      global2.tab = global2.tab || {};
      global2.tableauSoftware = global2.tableauSoftware || {};
      ss.initAssembly($asm, "vqlapishared");
      var $tab__ApiCommand = global2.tab._ApiCommand = ss.mkType($asm, "tab._ApiCommand", function(name, commandId, hostId, parameters) {
        this.$1$NameField = null;
        this.$1$HostIdField = null;
        this.$1$CommandIdField = null;
        this.$1$ParametersField = null;
        this.set_name(name);
        this.set_commandId(commandId);
        this.set_hostId(hostId);
        this.set_parameters(parameters);
      }, {
        get_name: function ApiCommand$get_Name() {
          return this.$1$NameField;
        },
        set_name: function ApiCommand$set_Name(value) {
          this.$1$NameField = value;
        },
        get_hostId: function ApiCommand$get_HostId() {
          return this.$1$HostIdField;
        },
        set_hostId: function ApiCommand$set_HostId(value) {
          this.$1$HostIdField = value;
        },
        get_commandId: function ApiCommand$get_CommandId() {
          return this.$1$CommandIdField;
        },
        set_commandId: function ApiCommand$set_CommandId(value) {
          this.$1$CommandIdField = value;
        },
        get_parameters: function ApiCommand$get_Parameters() {
          return this.$1$ParametersField;
        },
        set_parameters: function ApiCommand$set_Parameters(value) {
          this.$1$ParametersField = value;
        },
        get_isApiCommandName: function ApiCommand$get_IsApiCommandName() {
          return this.get_rawName().indexOf("api.", 0) === 0;
        },
        get_isApiEventName: function ApiCommand$get_IsApiEventName() {
          return this.get_isApiCommandName() && ss.endsWithString(this.get_rawName(), "Event");
        },
        get_rawName: function ApiCommand$get_RawName() {
          return this.get_name().toString();
        },
        serialize: function ApiCommand$Serialize() {
          var message = [];
          message.push(this.get_name());
          message.push(this.get_commandId());
          message.push(this.get_hostId());
          if (ss.isValue(this.get_parameters())) {
            message.push(this.get_parameters());
          }
          var serializedMessage = message.join(",");
          $tab__ApiCommand.lastRequestMessage = serializedMessage;
          return serializedMessage;
        }
      }, {
        generateNextCommandId: function ApiCommand$GenerateNextCommandId() {
          var commandId = "cmd" + $tab__ApiCommand.$nextCommandId;
          $tab__ApiCommand.$nextCommandId++;
          return commandId;
        },
        parse: function ApiCommand$Parse(serialized) {
          var name;
          var index = serialized.indexOf(String.fromCharCode(44));
          if (index < 0) {
            name = ss.cast(serialized, String);
            return new $tab__ApiCommand(name, null, null, null);
          }
          name = ss.cast(serialized.substr(0, index), String);
          var sourceId;
          var secondPart = serialized.substr(index + 1);
          index = secondPart.indexOf(String.fromCharCode(44));
          if (index < 0) {
            sourceId = secondPart;
            return new $tab__ApiCommand(name, sourceId, null, null);
          }
          sourceId = secondPart.substr(0, index);
          var hostId;
          var thirdPart = secondPart.substr(index + 1);
          index = thirdPart.indexOf(String.fromCharCode(44));
          if (index < 0) {
            hostId = thirdPart;
            return new $tab__ApiCommand(name, sourceId, hostId, null);
          }
          hostId = thirdPart.substr(0, index);
          var parameters = thirdPart.substr(index + 1);
          $tab__ApiCommand.lastResponseMessage = serialized;
          if (name === "api.GetClientInfoCommand") {
            $tab__ApiCommand.lastClientInfoResponseMessage = serialized;
          }
          return new $tab__ApiCommand(name, sourceId, hostId, parameters);
        }
      });
      var $tab__ApiObjectRegistry = global2.tab._ApiObjectRegistry = ss.mkType($asm, "tab._ApiObjectRegistry", null, null, {
        registerApiMessageRouter: function ApiObjectRegistry$RegisterApiMessageRouter(objectCreationFunc) {
          return $tab__ApiObjectRegistry.$registerType(Object).call(null, objectCreationFunc);
        },
        getApiMessageRouter: function ApiObjectRegistry$GetApiMessageRouter() {
          return $tab__ApiObjectRegistry.$getSingleton(Object).call(null);
        },
        disposeApiMessageRouter: function ApiObjectRegistry$DisposeApiMessageRouter() {
          $tab__ApiObjectRegistry.$clearSingletonInstance(Object).call(null);
        },
        $registerType: function $registerType(T) {
          return function ApiObjectRegistry$RegisterType(objectCreationFunc) {
            var creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry;
            var interfaceTypeName = ss.getTypeFullName(T);
            var previousType = creationRegistry[interfaceTypeName];
            creationRegistry[interfaceTypeName] = objectCreationFunc;
            return previousType;
          };
        },
        $createType: function $createType(T) {
          return function ApiObjectRegistry$CreateType() {
            var interfaceTypeName = ss.getTypeFullName(T);
            var creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry;
            var creationFunc = creationRegistry[interfaceTypeName];
            if (ss.isNullOrUndefined(creationFunc)) {
              throw $tab__TableauException.createInternalError("No creation function has been registered for interface type '" + interfaceTypeName + "'.");
            }
            var instance = creationFunc();
            return instance;
          };
        },
        $getSingleton: function $getSingleton(T) {
          return function ApiObjectRegistry$GetSingleton() {
            var singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry;
            var interfaceTypeName = ss.getTypeFullName(T);
            var instance = ss.cast(singletonInstanceRegistry[interfaceTypeName], T);
            if (ss.isNullOrUndefined(instance)) {
              instance = $tab__ApiObjectRegistry.$createType(T).call(null);
              singletonInstanceRegistry[interfaceTypeName] = instance;
            }
            return instance;
          };
        },
        $clearSingletonInstance: function $clearSingletonInstance(T) {
          return function ApiObjectRegistry$ClearSingletonInstance() {
            var singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry;
            var interfaceTypeName = ss.getTypeFullName(T);
            var instance = ss.cast(singletonInstanceRegistry[interfaceTypeName], T);
            delete singletonInstanceRegistry[interfaceTypeName];
            return instance;
          };
        }
      });
      var $tab__ApiServerNotification = global2.tab._ApiServerNotification = ss.mkType($asm, "tab._ApiServerNotification", function(workbookName, worksheetName, data) {
        this.$workbookName = null;
        this.$worksheetName = null;
        this.$data = null;
        this.$workbookName = workbookName;
        this.$worksheetName = worksheetName;
        this.$data = data;
      }, {
        get_workbookName: function ApiServerNotification$get_WorkbookName() {
          return this.$workbookName;
        },
        get_worksheetName: function ApiServerNotification$get_WorksheetName() {
          return this.$worksheetName;
        },
        get_data: function ApiServerNotification$get_Data() {
          return this.$data;
        },
        serialize: function ApiServerNotification$Serialize() {
          var serialized = {};
          serialized["api.workbookName"] = this.$workbookName;
          serialized["api.worksheetName"] = this.$worksheetName;
          serialized["api.commandData"] = this.$data;
          return JSON.stringify(serialized);
        }
      }, {
        deserialize: function ApiServerNotification$Deserialize(json) {
          var param = JSON.parse(json);
          var workbookName = ss.cast(param["api.workbookName"], String);
          var worksheetName = ss.cast(param["api.worksheetName"], String);
          var data = param["api.commandData"];
          return new $tab__ApiServerNotification(workbookName, worksheetName, data);
        }
      });
      var $tab__ApiServerResultParser = global2.tab._ApiServerResultParser = ss.mkType($asm, "tab._ApiServerResultParser", function(serverResult) {
        this.$commandResult = null;
        this.$commandData = null;
        var param = JSON.parse(serverResult);
        this.$commandResult = ss.cast(param["api.commandResult"], String);
        this.$commandData = param["api.commandData"];
      }, {
        get_result: function ApiServerResultParser$get_Result() {
          return this.$commandResult;
        },
        get_data: function ApiServerResultParser$get_Data() {
          return this.$commandData;
        }
      });
      var $tab__CollectionImpl = global2.tab._CollectionImpl = ss.mkType($asm, "tab._CollectionImpl", function() {
        this.$items = [];
        this.$itemMap = {};
      }, {
        get__length: function DoNotUseCollection$get_Length() {
          return this.$items.length;
        },
        get__rawArray: function DoNotUseCollection$get_RawArray() {
          return this.$items;
        },
        get_item: function DoNotUseCollection$get_Item(index) {
          return this.$items[index];
        },
        _get: function DoNotUseCollection$Get(key) {
          var validKey = this.$ensureValidKey(key);
          if (ss.isValue(this.$itemMap[validKey])) {
            return this.$itemMap[validKey];
          }
          return void 0;
        },
        _has: function DoNotUseCollection$Has(key) {
          return ss.isValue(this._get(key));
        },
        _add: function DoNotUseCollection$Add(key, item) {
          this.$verifyKeyAndItemParameters(key, item);
          var validKey = this.$ensureValidKey(key);
          this.$items.push(item);
          this.$itemMap[validKey] = item;
        },
        _addToFirst: function DoNotUseCollection$AddToFirst(key, item) {
          this.$verifyKeyAndItemParameters(key, item);
          var validKey = this.$ensureValidKey(key);
          this.$items.unshift(item);
          this.$itemMap[validKey] = item;
        },
        _remove: function DoNotUseCollection$Remove(key) {
          var validKey = this.$ensureValidKey(key);
          if (ss.isValue(this.$itemMap[validKey])) {
            var item = this.$itemMap[validKey];
            delete this.$itemMap[validKey];
            for (var index = 0; index < this.$items.length; index++) {
              if (ss.referenceEquals(this.$items[index], item)) {
                this.$items.splice(index, 1);
                break;
              }
            }
          }
        },
        _toApiCollection: function DoNotUseCollection$ToApiCollection() {
          var clone = this.$items.concat();
          clone.get = ss.mkdel(this, function(key) {
            return this._get(key);
          });
          clone.has = ss.mkdel(this, function(key1) {
            return this._has(key1);
          });
          return clone;
        },
        $verifyUniqueKeyParameter: function DoNotUseCollection$VerifyUniqueKeyParameter(key) {
          if ($tab__Utility.isNullOrEmpty(key)) {
            throw new ss.Exception("Null key");
          }
          if (this._has(key)) {
            throw new ss.Exception("Duplicate key '" + key + "'");
          }
        },
        $verifyKeyAndItemParameters: function DoNotUseCollection$VerifyKeyAndItemParameters(key, item) {
          this.$verifyUniqueKeyParameter(key);
          if (ss.isNullOrUndefined(item)) {
            throw new ss.Exception("Null item");
          }
        },
        $ensureValidKey: function DoNotUseCollection$EnsureValidKey(key) {
          return "_" + key;
        }
      });
      var $tab__ColumnImpl = global2.tab._ColumnImpl = ss.mkType($asm, "tab._ColumnImpl", function(fieldName, dataType, isReferenced, index) {
        this.$fieldName = null;
        this.$dataType = null;
        this.$isReferenced = false;
        this.$index = 0;
        $tab__Param.verifyString(fieldName, "Column Field Name");
        this.$fieldName = fieldName;
        this.$dataType = dataType;
        this.$isReferenced = ss.coalesce(isReferenced, false);
        this.$index = index;
      }, {
        get_fieldName: function ColumnImpl$get_FieldName() {
          return this.$fieldName;
        },
        get_dataType: function ColumnImpl$get_DataType() {
          return this.$dataType;
        },
        get_isReferenced: function ColumnImpl$get_IsReferenced() {
          return this.$isReferenced;
        },
        get_index: function ColumnImpl$get_Index() {
          return this.$index;
        }
      });
      var $tab__DataTableImpl = global2.tab._DataTableImpl = ss.mkType($asm, "tab._DataTableImpl", function(rows, isSummaryData, totalRowCount, columns) {
        this.$name = null;
        this.$rows = null;
        this.$totalRowCount = 0;
        this.$columns = null;
        this.$isSummaryData = false;
        this.$rows = rows;
        this.$totalRowCount = totalRowCount;
        this.$columns = columns;
        this.$isSummaryData = isSummaryData;
        this.$name = isSummaryData ? "Summary Data Table" : "Underlying Data Table";
      }, {
        get_name: function DataTableImpl$get_Name() {
          return this.$name;
        },
        get_rows: function DataTableImpl$get_Rows() {
          return this.$rows;
        },
        get_columns: function DataTableImpl$get_Columns() {
          return this.$columns;
        },
        get_totalRowCount: function DataTableImpl$get_TotalRowCount() {
          return this.$totalRowCount;
        },
        get_isSummaryData: function DataTableImpl$get_IsSummaryData() {
          return this.$isSummaryData;
        }
      });
      var $tab__DeferredImpl = global2.tab._DeferredImpl = ss.mkType($asm, "tab._DeferredImpl", function() {
        this.$promise = null;
        this.$thenFunc = null;
        this.$listeners = [];
        this.$resolveFunc = null;
        this.$promise = new $tab__PromiseImpl(ss.mkdel(this, this.then));
        this.$thenFunc = ss.mkdel(this, this.$preResolutionThen);
        this.$resolveFunc = ss.mkdel(this, this.$transitionToFulfilled);
      }, {
        get_promise: function DoNotUseDeferred$get_Promise() {
          return this.$promise;
        },
        all: function DoNotUseDeferred$All(promisesOrValues) {
          var allDone = new $tab__DeferredImpl();
          var length = promisesOrValues.length;
          var toResolve = length;
          var results = [];
          if (length === 0) {
            allDone.resolve(results);
            return allDone.get_promise();
          }
          var resolveOne = function resolveOne2(promiseOrValue, index) {
            var promise = $tab_$DeferredUtil.$coerceToTrustedPromise(promiseOrValue);
            promise.then(function(returnValue) {
              results[index] = returnValue;
              toResolve--;
              if (toResolve === 0) {
                allDone.resolve(results);
              }
              return null;
            }, function(e) {
              allDone.reject(e);
              return null;
            });
          };
          for (var i = 0; i < length; i++) {
            resolveOne(promisesOrValues[i], i);
          }
          return allDone.get_promise();
        },
        then: function DoNotUseDeferred$Then(callback, errback) {
          return this.$thenFunc(callback, errback);
        },
        resolve: function DoNotUseDeferred$Resolve(promiseOrValue) {
          return this.$resolveFunc(promiseOrValue);
        },
        reject: function DoNotUseDeferred$Reject(e) {
          return this.$resolveFunc($tab_$DeferredUtil.$rejected(e));
        },
        $preResolutionThen: function DoNotUseDeferred$PreResolutionThen(callback, errback) {
          var deferred = new $tab__DeferredImpl();
          this.$listeners.push(function(promise) {
            promise.then(callback, errback).then(ss.mkdel(deferred, deferred.resolve), ss.mkdel(deferred, deferred.reject));
          });
          return deferred.get_promise();
        },
        $transitionToFulfilled: function DoNotUseDeferred$TransitionToFulfilled(completed) {
          var completedPromise = $tab_$DeferredUtil.$coerceToTrustedPromise(completed);
          this.$thenFunc = completedPromise.then;
          this.$resolveFunc = $tab_$DeferredUtil.$coerceToTrustedPromise;
          for (var i = 0; i < this.$listeners.length; i++) {
            var listener = this.$listeners[i];
            listener(completedPromise);
          }
          this.$listeners = null;
          return completedPromise;
        }
      });
      var $tab__jQueryShim = global2.tab._jQueryShim = ss.mkType($asm, "tab._jQueryShim", null, null, {
        isFunction: function jQueryInterface$IsFunction(obj) {
          return ss.referenceEquals($tab__jQueryShim.type(obj), $tab__jQueryShim.$functionType);
        },
        isArray: function jQueryInterface$IsArray(obj) {
          if (ss.isValue(Array["isArray"])) {
            return ss.unbox(ss.cast(Array["isArray"](obj), Boolean));
          }
          return ss.referenceEquals($tab__jQueryShim.type(obj), $tab__jQueryShim.$arrayType);
        },
        type: function jQueryInterface$Type(obj) {
          return ss.isNullOrUndefined(obj) ? String(obj) : $tab__jQueryShim.$class2type[ss.cast($tab__jQueryShim.$toString.call(obj), String)] || $tab__jQueryShim.$objectType;
        },
        trim: function jQueryInterface$Trim(text) {
          if (ss.isValue($tab__jQueryShim.$trim)) {
            return ss.isNullOrUndefined(text) ? "" : ss.cast($tab__jQueryShim.$trim.call(text), String);
          }
          return ss.isNullOrUndefined(text) ? "" : text.toString().replace($tab__jQueryShim.$trimLeft, "").replace($tab__jQueryShim.$trimRight, "");
        },
        parseJSON: function jQueryInterface$ParseJson(data) {
          if (typeof data !== "string" || ss.isNullOrUndefined(data)) {
            return null;
          }
          data = $tab__jQueryShim.trim(data);
          if (ss.isValue(JSON) && ss.isValue(JSON["parse"])) {
            return JSON.parse(data);
          }
          if ($tab__jQueryShim.$rvalidchars.test(data.replace($tab__jQueryShim.$rvalidescape, "@").replace($tab__jQueryShim.$rvalidtokens, "]").replace($tab__jQueryShim.$rvalidbraces, ""))) {
            return new Function("return " + data)();
          }
          throw new ss.Exception("Invalid JSON: " + data);
        }
      });
      var $tab__Param = global2.tab._Param = ss.mkType($asm, "tab._Param", null, null, {
        verifyString: function Param$VerifyString(argumentValue, argumentName) {
          if (ss.isNullOrUndefined(argumentValue) || argumentValue.length === 0) {
            throw $tab__TableauException.createInternalStringArgumentException(argumentName);
          }
        },
        verifyStringMaxLength: function Param$VerifyStringMaxLength(argumentValue, argumentName) {
          if (argumentValue.length > $tab__Param.$maxChars) {
            throw $tab__TableauException.createMaxCharStringArgumentException(argumentName, $tab__Param.$maxChars);
          }
        },
        verifyValue: function Param$VerifyValue(argumentValue, argumentName) {
          if (ss.isNullOrUndefined(argumentValue)) {
            throw $tab__TableauException.createInternalNullArgumentException(argumentName);
          }
        }
      });
      var $tab__PromiseImpl = global2.tab._PromiseImpl = ss.mkType($asm, "tab._PromiseImpl", function(thenFunc) {
        this.then = null;
        this.then = thenFunc;
      }, {
        always: function DoNotUsePromise$Always(callback) {
          return ss.cast(this.then(callback, ss.cast(callback, Function)), $tab__PromiseImpl);
        },
        otherwise: function DoNotUsePromise$Otherwise(errback) {
          return ss.cast(this.then(null, errback), $tab__PromiseImpl);
        }
      });
      var $tab__Rect = global2.tab._Rect = ss.mkType($asm, "tab._Rect", function(left, top, width, height) {
        this.left = 0;
        this.top = 0;
        this.width = 0;
        this.height = 0;
        this.left = left;
        this.top = top;
        this.width = width;
        this.height = height;
      }, {
        intersect: function TabRect$Intersect(other) {
          var left = Math.max(this.left, other.left);
          var top = Math.max(this.top, other.top);
          var right = Math.min(this.left + this.width, other.left + other.width);
          var bottom = Math.min(this.top + this.height, other.top + other.height);
          if (right <= left || bottom <= top) {
            return new $tab__Rect(0, 0, 0, 0);
          }
          return new $tab__Rect(left, top, right - left, bottom - top);
        }
      });
      var $tab__TableauException = global2.tab._TableauException = ss.mkType($asm, "tab._TableauException", null, null, {
        create: function TableauException$Create(id, message) {
          var x = new ss.Exception(message);
          x["tableauSoftwareErrorCode"] = id;
          return x;
        },
        createInternalError: function TableauException$CreateInternalError(details) {
          if (ss.isValue(details)) {
            return $tab__TableauException.create("internalError", "Internal error. Please contact Tableau support with the following information: " + details);
          } else {
            return $tab__TableauException.create("internalError", "Internal error. Please contact Tableau support");
          }
        },
        createInternalNullArgumentException: function TableauException$CreateInternalNullArgumentException(argumentName) {
          return $tab__TableauException.createInternalError("Null/undefined argument '" + argumentName + "'.");
        },
        createInternalStringArgumentException: function TableauException$CreateInternalStringArgumentException(argumentName) {
          return $tab__TableauException.createInternalError("Invalid string argument '" + argumentName + "'.");
        },
        createMaxCharStringArgumentException: function TableauException$CreateMaxCharStringArgumentException(argumentName, maxChars) {
          return $tab__TableauException.createInternalError("Argument '" + argumentName + "' exceeds char limit of '" + maxChars + "'.");
        },
        createServerError: function TableauException$CreateServerError(message) {
          return $tab__TableauException.create("serverError", message);
        },
        createNotActiveSheet: function TableauException$CreateNotActiveSheet() {
          return $tab__TableauException.create("notActiveSheet", "Operation not allowed on non-active sheet");
        },
        createInvalidCustomViewName: function TableauException$CreateInvalidCustomViewName(customViewName) {
          return $tab__TableauException.create("invalidCustomViewName", "Invalid custom view name: " + customViewName);
        },
        createInvalidParameter: function TableauException$CreateInvalidParameter(paramName) {
          return $tab__TableauException.create("invalidParameter", "Invalid parameter: " + paramName);
        },
        createInvalidFilterFieldNameOrValue: function TableauException$CreateInvalidFilterFieldNameOrValue(fieldName) {
          return $tab__TableauException.create("invalidFilterFieldNameOrValue", "Invalid filter field name or value: " + fieldName);
        },
        createInvalidDateParameter: function TableauException$CreateInvalidDateParameter(paramName) {
          return $tab__TableauException.create("invalidDateParameter", "Invalid date parameter: " + paramName);
        },
        createNullOrEmptyParameter: function TableauException$CreateNullOrEmptyParameter(paramName) {
          return $tab__TableauException.create("nullOrEmptyParameter", "Parameter cannot be null or empty: " + paramName);
        },
        createMissingMaxSize: function TableauException$CreateMissingMaxSize() {
          return $tab__TableauException.create("missingMaxSize", "Missing maxSize for SheetSizeBehavior.ATMOST");
        },
        createMissingMinSize: function TableauException$CreateMissingMinSize() {
          return $tab__TableauException.create("missingMinSize", "Missing minSize for SheetSizeBehavior.ATLEAST");
        },
        createMissingMinMaxSize: function TableauException$CreateMissingMinMaxSize() {
          return $tab__TableauException.create("missingMinMaxSize", "Missing minSize or maxSize for SheetSizeBehavior.RANGE");
        },
        createInvalidRangeSize: function TableauException$CreateInvalidRangeSize() {
          return $tab__TableauException.create("invalidSize", "Missing minSize or maxSize for SheetSizeBehavior.RANGE");
        },
        createInvalidSizeValue: function TableauException$CreateInvalidSizeValue() {
          return $tab__TableauException.create("invalidSize", "Size value cannot be less than zero");
        },
        createInvalidSheetSizeParam: function TableauException$CreateInvalidSheetSizeParam() {
          return $tab__TableauException.create("invalidSize", "Invalid sheet size parameter");
        },
        createSizeConflictForExactly: function TableauException$CreateSizeConflictForExactly() {
          return $tab__TableauException.create("invalidSize", "Conflicting size values for SheetSizeBehavior.EXACTLY");
        },
        createInvalidSizeBehaviorOnWorksheet: function TableauException$CreateInvalidSizeBehaviorOnWorksheet() {
          return $tab__TableauException.create("invalidSizeBehaviorOnWorksheet", "Only SheetSizeBehavior.AUTOMATIC is allowed on Worksheets");
        },
        createNoUrlForHiddenWorksheet: function TableauException$CreateNoUrlForHiddenWorksheet() {
          return $tab__TableauException.create("noUrlForHiddenWorksheet", "Hidden worksheets do not have a URL.");
        },
        createInvalidAggregationFieldName: function TableauException$CreateInvalidAggregationFieldName(fieldName) {
          return $tab__TableauException.create("invalidAggregationFieldName", "Invalid aggregation type for field '" + fieldName + "'");
        },
        createInvalidToolbarButtonName: function TableauException$CreateInvalidToolbarButtonName(buttonName) {
          return $tab__TableauException.create("invalidToolbarButtonName", "Invalid toolbar button name: '" + buttonName + "'");
        },
        createIndexOutOfRange: function TableauException$CreateIndexOutOfRange(index) {
          return $tab__TableauException.create("indexOutOfRange", "Index '" + index + "' is out of range.");
        },
        createUnsupportedEventName: function TableauException$CreateUnsupportedEventName(eventName) {
          return $tab__TableauException.create("unsupportedEventName", "Unsupported event '" + eventName + "'.");
        },
        createBrowserNotCapable: function TableauException$CreateBrowserNotCapable() {
          return $tab__TableauException.create("browserNotCapable", "This browser is incapable of supporting the Tableau JavaScript API.");
        }
      });
      var $tab__Utility = global2.tab._Utility = ss.mkType($asm, "tab._Utility", null, null, {
        isNullOrEmpty: function Utility$IsNullOrEmpty(value) {
          return ss.isNullOrUndefined(value) || (value["length"] || 0) <= 0;
        },
        isString: function Utility$IsString(value) {
          return typeof value === "string";
        },
        isNumber: function Utility$IsNumber(value) {
          return typeof value === "number";
        },
        isDate: function Utility$IsDate(value) {
          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && ss.isInstanceOfType(value, ss.JsDate)) {
            return true;
          } else if (Object.prototype.toString.call(value) !== "[object Date]") {
            return false;
          }
          return !isNaN(ss.cast(value, ss.JsDate).getTime());
        },
        isDateValid: function Utility$IsDateValid(dt) {
          return !isNaN(dt.getTime());
        },
        indexOf: function Utility$IndexOf(array, searchElement, fromIndex) {
          if (ss.isValue(Array.prototype["indexOf"])) {
            return ss.unbox(ss.cast(array["indexOf"](searchElement, fromIndex), ss.Int32));
          }
          fromIndex = fromIndex || 0;
          var length = array.length;
          if (length > 0) {
            for (var index = fromIndex; index < length; index++) {
              if (ss.referenceEquals(array[index], searchElement)) {
                return index;
              }
            }
          }
          return -1;
        },
        contains: function Utility$Contains(array, searchElement, fromIndex) {
          var index = $tab__Utility.indexOf(array, searchElement, fromIndex);
          return index >= 0;
        },
        getTopmostWindow: function Utility$GetTopmostWindow() {
          var win = window.self;
          while (ss.isValue(win.parent) && !ss.referenceEquals(win.parent, win)) {
            win = win.parent;
          }
          return win;
        },
        toInt: function Utility$ToInt(value) {
          if ($tab__Utility.isNumber(value)) {
            return ss.trunc(value);
          }
          var number = parseInt(value.toString(), 10);
          if (isNaN(number)) {
            return 0;
          }
          return number;
        },
        hasClass: function Utility$HasClass(element, className) {
          var regexClass = new RegExp("[\\n\\t\\r]", "g");
          return ss.isValue(element) && (" " + element.className + " ").replace(regexClass, " ").indexOf(" " + className + " ") > -1;
        },
        findParentWithClassName: function Utility$FindParentWithClassName(element, className, stopAtElement) {
          var parent = ss.isValue(element) ? ss.cast(element.parentNode, HTMLElement) : null;
          stopAtElement = stopAtElement || document.body;
          while (ss.isValue(parent)) {
            if ($tab__Utility.hasClass(parent, className)) {
              return parent;
            }
            if (ss.referenceEquals(parent, stopAtElement)) {
              parent = null;
            } else {
              parent = ss.cast(parent.parentNode, HTMLElement);
            }
          }
          return parent;
        },
        hasJsonParse: function Utility$HasJsonParse() {
          return !!(ss.isValue(JSON) && ss.isValue(JSON.parse));
        },
        hasWindowPostMessage: function Utility$HasWindowPostMessage() {
          return !!ss.isValue(window.postMessage);
        },
        isPostMessageSynchronous: function Utility$IsPostMessageSynchronous() {
          if ($tab__Utility.isIE()) {
            var msieRegEx = new RegExp("(msie) ([\\w.]+)");
            var matches = msieRegEx.exec(window.navigator.userAgent.toLowerCase());
            var versionStr = matches[2] || "0";
            var version = parseInt(versionStr, 10);
            return version <= 8;
          }
          return false;
        },
        hasDocumentAttachEvent: function Utility$HasDocumentAttachEvent() {
          return !!ss.isValue(document.attachEvent);
        },
        hasWindowAddEventListener: function Utility$HasWindowAddEventListener() {
          return !!ss.isValue(window.addEventListener);
        },
        isElementOfTag: function Utility$IsElementOfTag(element, tagName) {
          return ss.isValue(element) && element.nodeType === 1 && ss.referenceEquals(element.tagName.toLowerCase(), tagName.toLowerCase());
        },
        elementToString: function Utility$ElementToString(element) {
          var str = new ss.StringBuilder();
          str.append(element.tagName.toLowerCase());
          if (!$tab__Utility.isNullOrEmpty(element.id)) {
            str.append("#").append(element.id);
          }
          if (!$tab__Utility.isNullOrEmpty(element.className)) {
            var classes = element.className.split(" ");
            str.append(".").append(classes.join("."));
          }
          return str.toString();
        },
        tableauGCS: function Utility$TableauGCS(e) {
          if (typeof window["getComputedStyle"] === "function") {
            return window.getComputedStyle(e);
          } else {
            return e["currentStyle"];
          }
        },
        isIE: function Utility$IsIE() {
          return !!(window.navigator.userAgent.indexOf("MSIE") > -1 && ss.isNullOrUndefined(window.opera));
        },
        isSafari: function Utility$IsSafari() {
          var ua = window.navigator.userAgent;
          var isChrome = ua.indexOf("Chrome") >= 0;
          return ua.indexOf("Safari") >= 0 && !isChrome;
        },
        mobileDetect: function Utility$MobileDetect() {
          var ua = window.navigator.userAgent;
          if (ua.indexOf("iPad") !== -1) {
            return true;
          }
          if (ua.indexOf("Android") !== -1) {
            return true;
          }
          if (ua.indexOf("AppleWebKit") !== -1 && ua.indexOf("Mobile") !== -1) {
            return true;
          }
          return false;
        },
        visibleContentRectInDocumentCoordinates: function Utility$VisibleContentRectInDocumentCoordinates(element) {
          var visibleRect = $tab__Utility.contentRectInDocumentCoordinates(element);
          for (var currentElement = element.parentElement; ss.isValue(currentElement) && ss.isValue(currentElement.parentElement); currentElement = currentElement.parentElement) {
            var overflow = $tab__Utility.$getComputedStyle(currentElement).overflow;
            if (overflow === "auto" || overflow === "scroll" || overflow === "hidden") {
              visibleRect = visibleRect.intersect($tab__Utility.contentRectInDocumentCoordinates(currentElement));
            }
          }
          var viewportRect = $tab__Utility.$getViewportRect();
          return visibleRect.intersect(viewportRect);
        },
        getVisualViewportRect: function Utility$GetVisualViewportRect(window2) {
          var visualViewport = window2.visualViewport;
          if (ss.isValue(visualViewport)) {
            return new $tab__Rect(ss.trunc(visualViewport.pageLeft), ss.trunc(visualViewport.pageTop), ss.trunc(visualViewport.width), ss.trunc(visualViewport.height));
          } else {
            return null;
          }
        },
        $getViewportRect: function Utility$GetViewportRect() {
          var visualViewportRect = $tab__Utility.getVisualViewportRect(window.self);
          if (ss.isValue(visualViewportRect)) {
            return visualViewportRect;
          } else {
            var viewportRect = $tab__Utility.contentRectInDocumentCoordinates(document.documentElement);
            var win = new tab.WindowHelper(window.self);
            if (win.isQuirksMode()) {
              viewportRect.height = document.body.clientHeight - viewportRect.left;
              viewportRect.width = document.body.clientWidth - viewportRect.top;
            }
            viewportRect.left += win.get_pageXOffset();
            viewportRect.top += win.get_pageYOffset();
            return viewportRect;
          }
        },
        contentRectInDocumentCoordinates: function Utility$ContentRectInDocumentCoordinates(element) {
          var boundingClientRect = $tab__Utility.getBoundingClientRect(element);
          var style = $tab__Utility.$getComputedStyle(element);
          var paddingLeft = $tab__Utility.toInt(style.paddingLeft);
          var paddingTop = $tab__Utility.toInt(style.paddingTop);
          var borderLeft = $tab__Utility.toInt(style.borderLeftWidth);
          var borderTop = $tab__Utility.toInt(style.borderTopWidth);
          var contentSize = $tab__Utility.computeContentSize(element);
          var win = new tab.WindowHelper(window.self);
          var left = boundingClientRect.left + paddingLeft + borderLeft + win.get_pageXOffset();
          var top = boundingClientRect.top + paddingTop + borderTop + win.get_pageYOffset();
          return new $tab__Rect(left, top, contentSize.width, contentSize.height);
        },
        getBoundingClientRect: function Utility$GetBoundingClientRect(element) {
          var rect = element.getBoundingClientRect();
          var top = ss.trunc(rect.top);
          var left = ss.trunc(rect.left);
          var right = ss.trunc(rect.right);
          var bottom = ss.trunc(rect.bottom);
          return new $tab__Rect(left, top, right - left, bottom - top);
        },
        convertRawValue: function Utility$ConvertRawValue(rawValue, dataType) {
          if (ss.isNullOrUndefined(rawValue)) {
            return null;
          }
          switch (dataType) {
            case "bool": {
              return rawValue;
            }
            case "date":
            case "number": {
              if (ss.isNullOrUndefined(rawValue)) {
                return Number.NaN;
              }
              return rawValue;
            }
            default:
            case "string": {
              return rawValue;
            }
          }
        },
        getDataValue: function Utility$GetDataValue(dv) {
          if (ss.isNullOrUndefined(dv)) {
            return $tab_DataValue.$ctor(null, null, null);
          }
          return $tab_DataValue.$ctor($tab__Utility.convertRawValue(dv.value, dv.type), dv.formattedValue, dv.aliasedValue);
        },
        serializeDateForServer: function Utility$SerializeDateForServer(date) {
          var serializedDate = "";
          if (ss.isValue(date) && $tab__Utility.isDate(date)) {
            var year = date.getUTCFullYear();
            var month = date.getUTCMonth() + 1;
            var day = date.getUTCDate();
            var hh = date.getUTCHours();
            var mm = date.getUTCMinutes();
            var sec = date.getUTCSeconds();
            serializedDate = year + "-" + month + "-" + day + " " + hh + ":" + mm + ":" + sec;
          }
          return serializedDate;
        },
        computeContentSize: function Utility$ComputeContentSize(element) {
          var style = $tab__Utility.$getComputedStyle(element);
          var paddingLeft = parseFloat(style.paddingLeft);
          var paddingTop = parseFloat(style.paddingTop);
          var paddingRight = parseFloat(style.paddingRight);
          var paddingBottom = parseFloat(style.paddingBottom);
          var width = element.clientWidth - Math.round(paddingLeft + paddingRight);
          var height = element.clientHeight - Math.round(paddingTop + paddingBottom);
          return $tab_Size.$ctor(width, height);
        },
        $getComputedStyle: function Utility$GetComputedStyle(element) {
          if (typeof window["getComputedStyle"] === "function") {
            if (ss.isValue(element.ownerDocument.defaultView.opener)) {
              return element.ownerDocument.defaultView.getComputedStyle(element);
            }
            return window.getComputedStyle(element);
          } else if (ss.isValue(element["currentStyle"])) {
            return element["currentStyle"];
          }
          return element.style;
        },
        roundVizSizeInPixels: function Utility$RoundVizSizeInPixels(size) {
          if (ss.isNullOrUndefined(size) || !(size.indexOf("px") !== -1)) {
            return size;
          }
          var sizeValue = parseFloat(size.split("px")[0]);
          return Math.round(sizeValue) + "px";
        },
        noResultPromiseHelper: function Utility$NoResultPromiseHelper(commandName, cmdParams, messagingOptions) {
          var deferred = new tab._Deferred();
          var returnHandler = new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))(commandName, 1, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject($tab__TableauException.createServerError(message));
          });
          messagingOptions.sendCommand(Object).call(messagingOptions, cmdParams, returnHandler);
          return deferred.get_promise();
        },
        clone: function clone(T) {
          return function Utility$Clone(src) {
            return JSON.parse(JSON.stringify(src));
          };
        }
      });
      var $tab_$DeferredUtil = ss.mkType($asm, "tab.$DeferredUtil", null, null, {
        $coerceToTrustedPromise: function DeferredUtil$CoerceToTrustedPromise(promiseOrValue) {
          var promise;
          if (promiseOrValue instanceof tableauSoftware.Promise) {
            promise = ss.cast(promiseOrValue, $tab__PromiseImpl);
          } else {
            if (ss.isValue(promiseOrValue) && typeof promiseOrValue["valueOf"] === "function") {
              promiseOrValue = promiseOrValue["valueOf"]();
            }
            if ($tab_$DeferredUtil.$isPromise(promiseOrValue)) {
              var deferred = new $tab__DeferredImpl();
              ss.cast(promiseOrValue, $tab__PromiseImpl).then(ss.mkdel(deferred, deferred.resolve), ss.mkdel(deferred, deferred.reject));
              promise = deferred.get_promise();
            } else {
              promise = $tab_$DeferredUtil.$resolved(promiseOrValue);
            }
          }
          return promise;
        },
        $reject: function DeferredUtil$Reject(promiseOrValue) {
          return $tab_$DeferredUtil.$coerceToTrustedPromise(promiseOrValue).then(function(value) {
            return $tab_$DeferredUtil.$rejected(ss.cast(value, ss.Exception));
          }, null);
        },
        $resolved: function DeferredUtil$Resolved(value) {
          var p = new $tab__PromiseImpl(function(callback, errback) {
            try {
              return $tab_$DeferredUtil.$coerceToTrustedPromise(ss.isValue(callback) ? callback(value) : value);
            } catch ($t1) {
              var e = ss.Exception.wrap($t1);
              return $tab_$DeferredUtil.$rejected(e);
            }
          });
          return p;
        },
        $rejected: function DeferredUtil$Rejected(reason) {
          var p = new $tab__PromiseImpl(function(callback, errback) {
            try {
              return ss.isValue(errback) ? $tab_$DeferredUtil.$coerceToTrustedPromise(errback(reason)) : $tab_$DeferredUtil.$rejected(reason);
            } catch ($t1) {
              var e = ss.Exception.wrap($t1);
              return $tab_$DeferredUtil.$rejected(e);
            }
          });
          return p;
        },
        $isPromise: function DeferredUtil$IsPromise(promiseOrValue) {
          return ss.isValue(promiseOrValue) && typeof promiseOrValue["then"] === "function";
        }
      });
      var $tab_$DoNothingCrossDomainHandler = ss.mkType($asm, "tab.$DoNothingCrossDomainHandler", function() {
        this.$hostId = null;
        this.$1$StateReadyForQueryField = null;
      }, {
        add_stateReadyForQuery: function DoNothingCrossDomainHandler$add_StateReadyForQuery(value) {
          this.$1$StateReadyForQueryField = ss.delegateCombine(this.$1$StateReadyForQueryField, value);
        },
        remove_stateReadyForQuery: function DoNothingCrossDomainHandler$remove_StateReadyForQuery(value) {
          this.$1$StateReadyForQueryField = ss.delegateRemove(this.$1$StateReadyForQueryField, value);
        },
        get_iframe: function DoNothingCrossDomainHandler$get_Iframe() {
          return null;
        },
        get_hostId: function DoNothingCrossDomainHandler$get_HostId() {
          return this.$hostId;
        },
        set_hostId: function DoNothingCrossDomainHandler$set_HostId(value) {
          this.$hostId = value;
        },
        get_$serverRoot: function DoNothingCrossDomainHandler$get_ServerRoot() {
          return "*";
        },
        handleEventNotification: function DoNothingCrossDomainHandler$HandleEventNotification(eventName, parameters) {
        },
        $silenceTheCompilerWarning: function DoNothingCrossDomainHandler$SilenceTheCompilerWarning() {
          this.$1$StateReadyForQueryField(null);
        }
      });
      var $tab_ApiDashboardObjectType = global2.tab.ApiDashboardObjectType = ss.mkEnum($asm, "tab.ApiDashboardObjectType", { blank: "blank", worksheet: "worksheet", quickFilter: "quickFilter", parameterControl: "parameterControl", pageFilter: "pageFilter", legend: "legend", title: "title", text: "text", image: "image", webPage: "webPage", addIn: "addIn" }, true);
      var $tab_ApiDateRangeType = global2.tab.ApiDateRangeType = ss.mkEnum($asm, "tab.ApiDateRangeType", { last: "last", lastn: "lastn", next: "next", nextn: "nextn", curr: "curr", todate: "todate" }, true);
      var $tab_ApiDeviceType = global2.tab.ApiDeviceType = ss.mkEnum($asm, "tab.ApiDeviceType", { default: "default", desktop: "desktop", tablet: "tablet", phone: "phone" }, true);
      var $tab_ApiEnumConverter = global2.tab.ApiEnumConverter = ss.mkType($asm, "tab.ApiEnumConverter", null, null, {
        convertDashboardObjectType: function ApiEnumConverter$ConvertDashboardObjectType(crossDomainType) {
          switch (crossDomainType) {
            case "blank": {
              return "blank";
            }
            case "image": {
              return "image";
            }
            case "legend": {
              return "legend";
            }
            case "pageFilter": {
              return "pageFilter";
            }
            case "parameterControl": {
              return "parameterControl";
            }
            case "quickFilter": {
              return "quickFilter";
            }
            case "text": {
              return "text";
            }
            case "title": {
              return "title";
            }
            case "webPage": {
              return "webPage";
            }
            case "worksheet": {
              return "worksheet";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainDashboardObjectType: " + crossDomainType);
            }
          }
        },
        convertDateRange: function ApiEnumConverter$ConvertDateRange(crossDomainType) {
          switch (crossDomainType) {
            case "curr": {
              return "curr";
            }
            case "last": {
              return "last";
            }
            case "lastn": {
              return "lastn";
            }
            case "next": {
              return "next";
            }
            case "nextn": {
              return "nextn";
            }
            case "todate": {
              return "todate";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainDateRangeType: " + crossDomainType);
            }
          }
        },
        convertFieldAggregation: function ApiEnumConverter$ConvertFieldAggregation(crossDomainType) {
          switch (crossDomainType) {
            case "ATTR": {
              return "ATTR";
            }
            case "AVG": {
              return "AVG";
            }
            case "COLLECT": {
              return "COLLECT";
            }
            case "COUNT": {
              return "COUNT";
            }
            case "COUNTD": {
              return "COUNTD";
            }
            case "DAY": {
              return "DAY";
            }
            case "END": {
              return "END";
            }
            case "HOUR": {
              return "HOUR";
            }
            case "INOUT": {
              return "INOUT";
            }
            case "KURTOSIS": {
              return "KURTOSIS";
            }
            case "MAX": {
              return "MAX";
            }
            case "MDY": {
              return "MDY";
            }
            case "MEDIAN": {
              return "MEDIAN";
            }
            case "MIN": {
              return "MIN";
            }
            case "MINUTE": {
              return "MINUTE";
            }
            case "MONTH": {
              return "MONTH";
            }
            case "MONTHYEAR": {
              return "MONTHYEAR";
            }
            case "NONE": {
              return "NONE";
            }
            case "PERCENTILE": {
              return "PERCENTILE";
            }
            case "QUART1": {
              return "QUART1";
            }
            case "QUART3": {
              return "QUART3";
            }
            case "QTR": {
              return "QTR";
            }
            case "SECOND": {
              return "SECOND";
            }
            case "SKEWNESS": {
              return "SKEWNESS";
            }
            case "STDEV": {
              return "STDEV";
            }
            case "STDEVP": {
              return "STDEVP";
            }
            case "SUM": {
              return "SUM";
            }
            case "SUM_XSQR": {
              return "SUM_XSQR";
            }
            case "TRUNC_DAY": {
              return "TRUNC_DAY";
            }
            case "TRUNC_HOUR": {
              return "TRUNC_HOUR";
            }
            case "TRUNC_MINUTE": {
              return "TRUNC_MINUTE";
            }
            case "TRUNC_MONTH": {
              return "TRUNC_MONTH";
            }
            case "TRUNC_QTR": {
              return "TRUNC_QTR";
            }
            case "TRUNC_SECOND": {
              return "TRUNC_SECOND";
            }
            case "TRUNC_WEEK": {
              return "TRUNC_WEEK";
            }
            case "TRUNC_YEAR": {
              return "TRUNC_YEAR";
            }
            case "USER": {
              return "USER";
            }
            case "VAR": {
              return "VAR";
            }
            case "VARP": {
              return "VARP";
            }
            case "WEEK": {
              return "WEEK";
            }
            case "WEEKDAY": {
              return "WEEKDAY";
            }
            case "YEAR": {
              return "YEAR";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainFieldAggregationType: " + crossDomainType);
            }
          }
        },
        convertFieldRole: function ApiEnumConverter$ConvertFieldRole(crossDomainType) {
          switch (crossDomainType) {
            case "dimension": {
              return "dimension";
            }
            case "measure": {
              return "measure";
            }
            case "unknown": {
              return "unknown";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainFieldRoleType: " + crossDomainType);
            }
          }
        },
        convertFilterType: function ApiEnumConverter$ConvertFilterType(crossDomainType) {
          switch (crossDomainType) {
            case "categorical": {
              return "categorical";
            }
            case "hierarchical": {
              return "hierarchical";
            }
            case "quantitative": {
              return "quantitative";
            }
            case "relativedate": {
              return "relativedate";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainFilterType: " + crossDomainType);
            }
          }
        },
        convertParameterAllowableValuesType: function ApiEnumConverter$ConvertParameterAllowableValuesType(crossDomainType) {
          switch (crossDomainType) {
            case "all": {
              return "all";
            }
            case "list": {
              return "list";
            }
            case "range": {
              return "range";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainParameterAllowableValuesType: " + crossDomainType);
            }
          }
        },
        convertParameterDataType: function ApiEnumConverter$ConvertParameterDataType(crossDomainType) {
          switch (crossDomainType) {
            case "boolean": {
              return "boolean";
            }
            case "date": {
              return "date";
            }
            case "datetime": {
              return "datetime";
            }
            case "float": {
              return "float";
            }
            case "integer": {
              return "integer";
            }
            case "string": {
              return "string";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainParameterDataType: " + crossDomainType);
            }
          }
        },
        convertPeriodType: function ApiEnumConverter$ConvertPeriodType(crossDomainType) {
          switch (crossDomainType) {
            case "year": {
              return "year";
            }
            case "quarter": {
              return "quarter";
            }
            case "month": {
              return "month";
            }
            case "week": {
              return "week";
            }
            case "day": {
              return "day";
            }
            case "hour": {
              return "hour";
            }
            case "minute": {
              return "minute";
            }
            case "second": {
              return "second";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainPeriodType: " + crossDomainType);
            }
          }
        },
        convertSheetType: function ApiEnumConverter$ConvertSheetType(crossDomainType) {
          switch (crossDomainType) {
            case "worksheet": {
              return "worksheet";
            }
            case "dashboard": {
              return "dashboard";
            }
            case "story": {
              return "story";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainSheetType: " + crossDomainType);
            }
          }
        },
        convertDataType: function ApiEnumConverter$ConvertDataType(crossDomainType) {
          switch (crossDomainType) {
            case "boolean": {
              return "boolean";
            }
            case "date": {
              return "date";
            }
            case "datetime": {
              return "datetime";
            }
            case "float": {
              return "float";
            }
            case "integer": {
              return "integer";
            }
            case "string": {
              return "string";
            }
            default: {
              throw $tab__TableauException.createInternalError("Unknown ApiCrossDomainParameterDataType: " + crossDomainType);
            }
          }
        }
      });
      var $tab_ApiErrorCode = global2.tab.ApiErrorCode = ss.mkEnum($asm, "tab.ApiErrorCode", { internalError: "internalError", serverError: "serverError", invalidAggregationFieldName: "invalidAggregationFieldName", invalidToolbarButtonName: "invalidToolbarButtonName", invalidParameter: "invalidParameter", invalidUrl: "invalidUrl", staleDataReference: "staleDataReference", vizAlreadyInManager: "vizAlreadyInManager", noUrlOrParentElementNotFound: "noUrlOrParentElementNotFound", invalidFilterFieldName: "invalidFilterFieldName", invalidFilterFieldValue: "invalidFilterFieldValue", invalidFilterFieldNameOrValue: "invalidFilterFieldNameOrValue", filterCannotBePerformed: "filterCannotBePerformed", notActiveSheet: "notActiveSheet", invalidCustomViewName: "invalidCustomViewName", missingRangeNForRelativeDateFilters: "missingRangeNForRelativeDateFilters", missingMaxSize: "missingMaxSize", missingMinSize: "missingMinSize", missingMinMaxSize: "missingMinMaxSize", invalidSize: "invalidSize", invalidSizeBehaviorOnWorksheet: "invalidSizeBehaviorOnWorksheet", sheetNotInWorkbook: "sheetNotInWorkbook", indexOutOfRange: "indexOutOfRange", downloadWorkbookNotAllowed: "downloadWorkbookNotAllowed", nullOrEmptyParameter: "nullOrEmptyParameter", browserNotCapable: "browserNotCapable", unsupportedEventName: "unsupportedEventName", invalidDateParameter: "invalidDateParameter", invalidSelectionFieldName: "invalidSelectionFieldName", invalidSelectionValue: "invalidSelectionValue", invalidSelectionDate: "invalidSelectionDate", noUrlForHiddenWorksheet: "noUrlForHiddenWorksheet", maxVizResizeAttempts: "maxVizResizeAttempts" }, true);
      var $tab_ApiFieldAggregationType = global2.tab.ApiFieldAggregationType = ss.mkEnum($asm, "tab.ApiFieldAggregationType", { SUM: "SUM", AVG: "AVG", MIN: "MIN", MAX: "MAX", STDEV: "STDEV", STDEVP: "STDEVP", VAR: "VAR", VARP: "VARP", COUNT: "COUNT", COUNTD: "COUNTD", MEDIAN: "MEDIAN", ATTR: "ATTR", NONE: "NONE", PERCENTILE: "PERCENTILE", YEAR: "YEAR", QTR: "QTR", MONTH: "MONTH", DAY: "DAY", HOUR: "HOUR", MINUTE: "MINUTE", SECOND: "SECOND", WEEK: "WEEK", WEEKDAY: "WEEKDAY", MONTHYEAR: "MONTHYEAR", MDY: "MDY", END: "END", TRUNC_YEAR: "TRUNC_YEAR", TRUNC_QTR: "TRUNC_QTR", TRUNC_MONTH: "TRUNC_MONTH", TRUNC_WEEK: "TRUNC_WEEK", TRUNC_DAY: "TRUNC_DAY", TRUNC_HOUR: "TRUNC_HOUR", TRUNC_MINUTE: "TRUNC_MINUTE", TRUNC_SECOND: "TRUNC_SECOND", QUART1: "QUART1", QUART3: "QUART3", SKEWNESS: "SKEWNESS", KURTOSIS: "KURTOSIS", INOUT: "INOUT", SUM_XSQR: "SUM_XSQR", USER: "USER", COLLECT: "COLLECT" }, true);
      var $tab_ApiFieldRoleType = global2.tab.ApiFieldRoleType = ss.mkEnum($asm, "tab.ApiFieldRoleType", { dimension: "dimension", measure: "measure", unknown: "unknown" }, true);
      var $tab_ApiFilterType = global2.tab.ApiFilterType = ss.mkEnum($asm, "tab.ApiFilterType", { categorical: "categorical", quantitative: "quantitative", hierarchical: "hierarchical", relativedate: "relativedate" }, true);
      var $tab_ApiFilterUpdateType = global2.tab.ApiFilterUpdateType = ss.mkEnum($asm, "tab.ApiFilterUpdateType", { all: "all", replace: "replace", add: "add", remove: "remove" }, true);
      var $tab_ApiMenuType = global2.tab.ApiMenuType = ss.mkEnum($asm, "tab.ApiMenuType", { ubertip: "ubertip" }, true);
      var $tab_ApiMessageHandler = global2.tab.ApiMessageHandler = ss.mkType($asm, "tab.ApiMessageHandler", function() {
      }, {
        handleEventNotification: function ApiMessageHandler$HandleEventNotification(eventName, eventParameters) {
          throw new ss.NotImplementedException();
        }
      });
      var $tab_ApiMessagingOptions = global2.tab.ApiMessagingOptions = ss.mkType($asm, "tab.ApiMessagingOptions", function(router, handler) {
        this.$router = null;
        this.$handler = null;
        $tab__Param.verifyValue(router, "router");
        this.$router = router;
        this.$handler = handler;
      }, {
        get_handler: function ApiMessagingOptions$get_Handler() {
          return this.$handler;
        },
        get_router: function ApiMessagingOptions$get_Router() {
          return this.$router;
        },
        sendCommand: function sendCommand(T) {
          return function ApiMessagingOptions$SendCommand(commandParameters, returnHandler) {
            this.$router.sendCommand(T).call(this.$router, this.$handler, commandParameters, returnHandler);
          };
        },
        dispose: function ApiMessagingOptions$Dispose() {
          this.$router.unregisterHandler(this.$handler);
        }
      });
      var $tab_ApiNullOption = global2.tab.ApiNullOption = ss.mkEnum($asm, "tab.ApiNullOption", { nullValues: "nullValues", nonNullValues: "nonNullValues", allValues: "allValues" }, true);
      var $tab_ApiParameterAllowableValuesType = global2.tab.ApiParameterAllowableValuesType = ss.mkEnum($asm, "tab.ApiParameterAllowableValuesType", { all: "all", list: "list", range: "range" }, true);
      var $tab_ApiParameterDataType = global2.tab.ApiParameterDataType = ss.mkEnum($asm, "tab.ApiParameterDataType", { float: "float", integer: "integer", string: "string", boolean: "boolean", date: "date", datetime: "datetime" }, true);
      var $tab_ApiPeriodType = global2.tab.ApiPeriodType = ss.mkEnum($asm, "tab.ApiPeriodType", { year: "year", quarter: "quarter", month: "month", week: "week", day: "day", hour: "hour", minute: "minute", second: "second" }, true);
      var $tab_ApiSelectionUpdateType = global2.tab.ApiSelectionUpdateType = ss.mkEnum($asm, "tab.ApiSelectionUpdateType", { replace: "replace", add: "add", remove: "remove" }, true);
      var $tab_ApiSheetSizeBehavior = global2.tab.ApiSheetSizeBehavior = ss.mkEnum($asm, "tab.ApiSheetSizeBehavior", { automatic: "automatic", exactly: "exactly", range: "range", atleast: "atleast", atmost: "atmost" }, true);
      var $tab_ApiSheetType = global2.tab.ApiSheetType = ss.mkEnum($asm, "tab.ApiSheetType", { worksheet: "worksheet", dashboard: "dashboard", story: "story" }, true);
      var $tab_ApiTableauEventName = global2.tab.ApiTableauEventName = ss.mkEnum($asm, "tab.ApiTableauEventName", { custommarkcontextmenu: "custommarkcontextmenu", customviewload: "customviewload", customviewremove: "customviewremove", customviewsave: "customviewsave", customviewsetdefault: "customviewsetdefault", filterchange: "filterchange", firstinteractive: "firstinteractive", firstvizsizeknown: "firstvizsizeknown", marksselection: "marksselection", markshighlight: "markshighlight", parametervaluechange: "parametervaluechange", storypointswitch: "storypointswitch", tabswitch: "tabswitch", toolbarstatechange: "toolbarstatechange", urlaction: "urlaction", vizresize: "vizresize" }, true);
      var $tab_ApiToolbarButtonName = global2.tab.ApiToolbarButtonName = ss.mkEnum($asm, "tab.ApiToolbarButtonName", { redo: "redo", undo: "undo" }, true);
      var $tab_ApiToolbarPosition = global2.tab.ApiToolbarPosition = ss.mkEnum($asm, "tab.ApiToolbarPosition", { top: "top", bottom: "bottom" }, true);
      var $tab_CommandReturnHandler$1 = global2.tab.CommandReturnHandler$1 = ss.mkType($asm, "tab.CommandReturnHandler$1", function(T) {
        var $type = ss.registerGenericClassInstance($tab_CommandReturnHandler$1, [T], function(commandName, successCallbackTiming, successCallback, errorCallback) {
          this.$commandName = null;
          this.$successCallbackTiming = 0;
          this.$successCallback = null;
          this.$errorCallback = null;
          this.$commandName = commandName;
          this.$successCallback = successCallback;
          this.$successCallbackTiming = successCallbackTiming;
          this.$errorCallback = errorCallback;
        }, {
          get_commandName: function CommandReturnHandler$get_CommandName() {
            return this.$commandName;
          },
          get_successCallback: function CommandReturnHandler$get_SuccessCallback() {
            return this.$successCallback;
          },
          get_successCallbackTiming: function CommandReturnHandler$get_SuccessCallbackTiming() {
            return this.$successCallbackTiming;
          },
          get_errorCallback: function CommandReturnHandler$get_ErrorCallback() {
            return this.$errorCallback;
          }
        });
        return $type;
      });
      ss.initGenericClass($tab_CommandReturnHandler$1, 1);
      var $tab_CrossDomainMessager = global2.tab.CrossDomainMessager = ss.mkType($asm, "tab.CrossDomainMessager", function(legacyHandler) {
        this.$nextHandlerId = 0;
        this.$handlers = {};
        this.$commandCallbacks = {};
        this.$commandReturnAfterStateReadyQueues = {};
        this.$legacyHandler = null;
        this.$legacyHandler = legacyHandler;
        if ($tab__Utility.hasWindowAddEventListener()) {
          window.addEventListener("message", ss.mkdel(this, this.$handleCrossDomainMessage), false);
        } else if ($tab__Utility.hasDocumentAttachEvent()) {
          var handler = ss.mkdel(this, this.$handleCrossDomainMessage);
          document.attachEvent("onmessage", handler);
          window.attachEvent("onmessage", handler);
        } else {
          window.onmessage = ss.mkdel(this, this.$handleCrossDomainMessage);
        }
        this.$nextHandlerId = 0;
      }, {
        registerHandler: function CrossDomainMessager$RegisterHandler(handler) {
          var uniqueId = "host" + this.$nextHandlerId;
          if (ss.isValue(handler.get_hostId()) || ss.isValue(this.$handlers[handler.get_hostId()])) {
            throw $tab__TableauException.createInternalError("Host '" + handler.get_hostId() + "' is already registered.");
          }
          this.$nextHandlerId++;
          handler.set_hostId(uniqueId);
          this.$handlers[uniqueId] = handler;
          handler.add_stateReadyForQuery(ss.mkdel(this, this.$handleStateReadyForQuery));
        },
        unregisterHandler: function CrossDomainMessager$UnregisterHandler(handler) {
          if (ss.isValue(handler.get_hostId()) || ss.isValue(this.$handlers[handler.get_hostId()])) {
            delete this.$handlers[handler.get_hostId()];
            handler.remove_stateReadyForQuery(ss.mkdel(this, this.$handleStateReadyForQuery));
          }
        },
        sendCommand: function sendCommand(T) {
          return function CrossDomainMessager$SendCommand(source, commandParameters, returnHandler) {
            var iframe = source.get_iframe();
            var handlerId = source.get_hostId();
            if (!$tab__Utility.hasWindowPostMessage() || ss.isNullOrUndefined(iframe) || ss.isNullOrUndefined(iframe.contentWindow)) {
              return;
            }
            var commandId = $tab__ApiCommand.generateNextCommandId();
            var callbackMap = this.$commandCallbacks[handlerId];
            if (ss.isNullOrUndefined(callbackMap)) {
              callbackMap = {};
              this.$commandCallbacks[handlerId] = callbackMap;
            }
            callbackMap[commandId] = returnHandler;
            var commandName = returnHandler.get_commandName();
            var serializedParams = null;
            if (ss.isValue(commandParameters)) {
              serializedParams = JSON.stringify(commandParameters);
            }
            var command = new $tab__ApiCommand(commandName, commandId, handlerId, serializedParams);
            var message = command.serialize();
            if ($tab__Utility.isPostMessageSynchronous()) {
              window.setTimeout(function() {
                iframe.contentWindow.postMessage(message, "*");
              }, 0);
            } else {
              iframe.contentWindow.postMessage(message, "*");
            }
          };
        },
        $handleStateReadyForQuery: function CrossDomainMessager$HandleStateReadyForQuery(source) {
          var queue = this.$commandReturnAfterStateReadyQueues[source.get_hostId()];
          if ($tab__Utility.isNullOrEmpty(queue)) {
            return;
          }
          while (queue.length > 0) {
            var successCallback = queue.pop();
            if (ss.isValue(successCallback)) {
              successCallback();
            }
          }
        },
        $handleCrossDomainMessage: function CrossDomainMessager$HandleCrossDomainMessage(e) {
          var messageEvent = ss.cast(e, MessageEvent);
          if (ss.isNullOrUndefined(messageEvent.data)) {
            return;
          }
          var command = $tab__ApiCommand.parse(messageEvent.data.toString());
          var hostId = command.get_hostId();
          var handler = this.$handlers[hostId];
          if (ss.isNullOrUndefined(handler) || !ss.referenceEquals(handler.get_hostId(), command.get_hostId())) {
            handler = this.$findHostIdByDomComparison(messageEvent);
          }
          if (command.get_isApiCommandName()) {
            if (ss.referenceEquals(command.get_commandId(), $tab__ApiCommand.crossDomainEventNotificationId)) {
              handler.handleEventNotification(command.get_name(), command.get_parameters());
              if (command.get_name() === "api.FirstVizSizeKnownEvent") {
                var bootstrapCommand = new $tab_NonApiCommand("tableau.bootstrap", []);
                messageEvent.source.postMessage(bootstrapCommand.serialize(), "*");
              }
            } else {
              this.$handleCrossDomainResponse(command);
            }
          } else if (!ss.isNullOrUndefined(this.$legacyHandler)) {
            var legacyCommand = $tab_NonApiCommand.parse(messageEvent.data.toString());
            this.$legacyHandler(legacyCommand, handler);
          }
        },
        $handleCrossDomainResponse: function CrossDomainMessager$HandleCrossDomainResponse(command) {
          var commandCallbackMap = this.$commandCallbacks[command.get_hostId()];
          var returnHandler = ss.isValue(commandCallbackMap) ? commandCallbackMap[command.get_commandId()] : null;
          if (ss.isNullOrUndefined(returnHandler)) {
            return;
          }
          delete commandCallbackMap[command.get_commandId()];
          if (command.get_name() !== returnHandler.get_commandName()) {
            return;
          }
          var crossDomainResult = new $tab__ApiServerResultParser(command.get_parameters());
          var commandResult = crossDomainResult.get_data();
          if (crossDomainResult.get_result() === "api.success") {
            switch (returnHandler.get_successCallbackTiming()) {
              case 0: {
                if (ss.isValue(returnHandler.get_successCallback())) {
                  returnHandler.get_successCallback()(commandResult);
                }
                break;
              }
              case 1: {
                var postponedCallback = function postponedCallback2() {
                  if (ss.isValue(returnHandler.get_successCallback())) {
                    returnHandler.get_successCallback()(commandResult);
                  }
                };
                var queue = this.$commandReturnAfterStateReadyQueues[command.get_hostId()];
                if (ss.isNullOrUndefined(queue)) {
                  queue = [];
                  this.$commandReturnAfterStateReadyQueues[command.get_hostId()] = queue;
                }
                queue.push(postponedCallback);
                break;
              }
              default: {
                throw $tab__TableauException.createInternalError("Unknown timing value: " + returnHandler.get_successCallbackTiming());
              }
            }
          } else if (ss.isValue(returnHandler.get_errorCallback())) {
            var remoteError = crossDomainResult.get_result() === "api.remotefailed";
            var errorMessage = ss.isValue(commandResult) ? commandResult.toString() : "";
            returnHandler.get_errorCallback()(remoteError, errorMessage);
          }
        },
        $findHostIdByDomComparison: function CrossDomainMessager$FindHostIdByDomComparison(messageEvent) {
          var $t1 = new ss.ObjectEnumerator(this.$handlers);
          try {
            while ($t1.moveNext()) {
              var pair = $t1.current();
              if (this.$handlers.hasOwnProperty(pair.key) && ss.referenceEquals(pair.value.get_iframe().contentWindow, messageEvent.source)) {
                return pair.value;
              }
            }
          } finally {
            $t1.dispose();
          }
          return new $tab_$DoNothingCrossDomainHandler();
        }
      });
      var $tab_DataType = global2.tab.DataType = ss.mkEnum($asm, "tab.DataType", { float: "float", integer: "integer", string: "string", boolean: "boolean", date: "date", datetime: "datetime" }, true);
      var $tab_DataValue = global2.tab.DataValue = ss.mkType($asm, "tab.DataValue", null, null, {
        $ctor: function $ctor(value, formattedValue, aliasedValue) {
          var $this = new Object();
          $this.value = null;
          $this.formattedValue = null;
          $this.value = value;
          if ($tab__Utility.isNullOrEmpty(aliasedValue)) {
            $this.formattedValue = formattedValue;
          } else {
            $this.formattedValue = aliasedValue;
          }
          return $this;
        },
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tab_FilterCommandsBuilder = global2.tab.FilterCommandsBuilder = ss.mkType($asm, "tab.FilterCommandsBuilder", function() {
      }, {
        buildApplyFiltersCommandParams: function FilterCommandsBuilder$BuildApplyFiltersCommandParams(fieldName, values, updateType, options) {
          if ($tab__Utility.isNullOrEmpty(fieldName)) {
            throw $tab__TableauException.createNullOrEmptyParameter("fieldName");
          }
          updateType = $tab_PublicEnums.normalizeEnum($tab_ApiFilterUpdateType).call(null, updateType, "updateType");
          var fieldValues = [];
          if ($tab__jQueryShim.isArray(values)) {
            for (var i = 0; i < values.length; i++) {
              fieldValues.push(values[i].toString());
            }
          } else if (ss.isValue(values)) {
            fieldValues.push(values.toString());
          }
          var commandParameters = {};
          commandParameters["api.fieldCaption"] = fieldName;
          commandParameters["api.filterUpdateType"] = updateType;
          commandParameters["api.exclude"] = ss.isValue(options) && options.isExcludeMode ? true : false;
          if (updateType !== "all") {
            commandParameters["api.filterCategoricalValues"] = fieldValues;
          }
          return commandParameters;
        },
        buildRangeFilterCommandParams: function FilterCommandsBuilder$BuildRangeFilterCommandParams(fieldName, filterOptions) {
          if ($tab__Utility.isNullOrEmpty(fieldName)) {
            throw $tab__TableauException.createNullOrEmptyParameter("fieldName");
          }
          if (ss.isNullOrUndefined(filterOptions)) {
            throw $tab__TableauException.createNullOrEmptyParameter("filterOptions");
          }
          var commandParameters = {};
          commandParameters["api.fieldCaption"] = fieldName;
          if (ss.isValue(filterOptions.min)) {
            if ($tab__Utility.isDate(filterOptions.min)) {
              var dt = ss.cast(filterOptions.min, ss.JsDate);
              if ($tab__Utility.isDateValid(dt)) {
                commandParameters["api.filterRangeMin"] = $tab__Utility.serializeDateForServer(dt);
              } else {
                throw $tab__TableauException.createInvalidDateParameter("filterOptions.min");
              }
            } else {
              commandParameters["api.filterRangeMin"] = filterOptions.min;
            }
          }
          if (ss.isValue(filterOptions.max)) {
            if ($tab__Utility.isDate(filterOptions.max)) {
              var dt1 = ss.cast(filterOptions.max, ss.JsDate);
              if ($tab__Utility.isDateValid(dt1)) {
                commandParameters["api.filterRangeMax"] = $tab__Utility.serializeDateForServer(dt1);
              } else {
                throw $tab__TableauException.createInvalidDateParameter("filterOptions.max");
              }
            } else {
              commandParameters["api.filterRangeMax"] = filterOptions.max;
            }
          }
          if (ss.isValue(filterOptions.nullOption)) {
            commandParameters["api.filterRangeNullOption"] = filterOptions.nullOption;
          }
          return commandParameters;
        },
        buildRelativeDateFilterCommandParams: function FilterCommandsBuilder$BuildRelativeDateFilterCommandParams(fieldName, filterOptions) {
          if ($tab__Utility.isNullOrEmpty(fieldName)) {
            throw $tab__TableauException.createInvalidParameter("fieldName");
          } else if (ss.isNullOrUndefined(filterOptions)) {
            throw $tab__TableauException.createInvalidParameter("filterOptions");
          }
          var commandParameters = {};
          commandParameters["api.fieldCaption"] = fieldName;
          if (ss.isValue(filterOptions)) {
            commandParameters["api.filterPeriodType"] = filterOptions.periodType;
            commandParameters["api.filterDateRangeType"] = filterOptions.rangeType;
            if (filterOptions.rangeType === "lastn" || filterOptions.rangeType === "nextn") {
              if (ss.isNullOrUndefined(filterOptions.rangeN)) {
                throw $tab__TableauException.create("missingRangeNForRelativeDateFilters", "Missing rangeN field for a relative date filter of LASTN or NEXTN.");
              }
              commandParameters["api.filterDateRange"] = filterOptions.rangeN;
            }
            if (ss.isValue(filterOptions.anchorDate)) {
              commandParameters["api.filterDateArchorValue"] = $tab__Utility.serializeDateForServer(filterOptions.anchorDate);
            }
          }
          return commandParameters;
        },
        buildHierarchicalFilterCommandParams: function FilterCommandsBuilder$BuildHierarchicalFilterCommandParams(fieldName, values, updateType, options) {
          if ($tab__Utility.isNullOrEmpty(fieldName)) {
            throw $tab__TableauException.createNullOrEmptyParameter("fieldName");
          }
          updateType = $tab_PublicEnums.normalizeEnum($tab_ApiFilterUpdateType).call(null, updateType, "updateType");
          var fieldValues = null;
          var levelValues = null;
          if ($tab__jQueryShim.isArray(values)) {
            fieldValues = [];
            var arr = values;
            for (var i = 0; i < arr.length; i++) {
              fieldValues.push(arr[i].toString());
            }
          } else if ($tab__Utility.isString(values)) {
            fieldValues = [];
            fieldValues.push(values.toString());
          } else if (ss.isValue(values) && ss.isValue(values["levels"])) {
            var levelValue = values["levels"];
            levelValues = [];
            if ($tab__jQueryShim.isArray(levelValue)) {
              var levels = levelValue;
              for (var i1 = 0; i1 < levels.length; i1++) {
                levelValues.push(levels[i1].toString());
              }
            } else {
              levelValues.push(levelValue.toString());
            }
          } else if (ss.isValue(values)) {
            throw $tab__TableauException.createInvalidParameter("values");
          }
          var commandParameters = {};
          commandParameters["api.fieldCaption"] = fieldName;
          commandParameters["api.filterUpdateType"] = updateType;
          commandParameters["api.exclude"] = ss.isValue(options) && options.isExcludeMode ? true : false;
          if (ss.isValue(fieldValues)) {
            commandParameters["api.filterHierarchicalValues"] = JSON.stringify(fieldValues);
          }
          if (ss.isValue(levelValues)) {
            commandParameters["api.filterHierarchicalLevels"] = JSON.stringify(levelValues);
          }
          return commandParameters;
        },
        buildClearFilterCommandsParam: function FilterCommandsBuilder$BuildClearFilterCommandsParam(fieldName) {
          if ($tab__Utility.isNullOrEmpty(fieldName)) {
            throw $tab__TableauException.createNullOrEmptyParameter("fieldName");
          }
          var commandParameters = {};
          commandParameters["api.fieldCaption"] = fieldName;
          return commandParameters;
        },
        filterCommandError: function FilterCommandsBuilder$FilterCommandError(rawPm) {
          var commandError = rawPm;
          if (ss.isValue(commandError) && ss.isValue(commandError.errorCode)) {
            var additionalInfo = ss.isValue(commandError.additionalInformation) ? commandError.additionalInformation.toString() : "";
            switch (commandError.errorCode) {
              case "invalidFilterFieldName": {
                return $tab__TableauException.create("invalidFilterFieldName", additionalInfo);
              }
              case "invalidFilterFieldValue": {
                return $tab__TableauException.create("invalidFilterFieldValue", additionalInfo);
              }
              case "invalidAggregationFieldName": {
                return $tab__TableauException.createInvalidAggregationFieldName(additionalInfo);
              }
              default: {
                return $tab__TableauException.createServerError(additionalInfo);
              }
            }
          }
          return null;
        },
        normalizeRangeFilterOption: function FilterCommandsBuilder$NormalizeRangeFilterOption(filterOptions) {
          if (ss.isNullOrUndefined(filterOptions)) {
            throw $tab__TableauException.createNullOrEmptyParameter("filterOptions");
          }
          if (ss.isNullOrUndefined(filterOptions.min) && ss.isNullOrUndefined(filterOptions.max) && ss.isNullOrUndefined(filterOptions.nullOption)) {
            throw $tab__TableauException.create("invalidParameter", "At least one of filterOptions.min or filterOptions.max or filterOptions.nullOption must be specified.");
          }
          var fixedUpFilterOptions = new Object();
          if (ss.isValue(filterOptions.min)) {
            fixedUpFilterOptions.min = filterOptions.min;
          }
          if (ss.isValue(filterOptions.max)) {
            fixedUpFilterOptions.max = filterOptions.max;
          }
          if (ss.isValue(filterOptions.nullOption)) {
            fixedUpFilterOptions.nullOption = $tab_PublicEnums.normalizeEnum($tab_ApiNullOption).call(null, filterOptions.nullOption, "filterOptions.nullOption");
          }
          return fixedUpFilterOptions;
        },
        normalizeRelativeDateFilterOptions: function FilterCommandsBuilder$NormalizeRelativeDateFilterOptions(filterOptions) {
          if (ss.isNullOrUndefined(filterOptions)) {
            throw $tab__TableauException.createNullOrEmptyParameter("filterOptions");
          }
          var fixedUpFilterOptions = new Object();
          fixedUpFilterOptions.rangeType = $tab_PublicEnums.normalizeEnum($tab_ApiDateRangeType).call(null, filterOptions.rangeType, "filterOptions.rangeType");
          fixedUpFilterOptions.periodType = $tab_PublicEnums.normalizeEnum($tab_ApiPeriodType).call(null, filterOptions.periodType, "filterOptions.periodType");
          if (fixedUpFilterOptions.rangeType === "lastn" || fixedUpFilterOptions.rangeType === "nextn") {
            if (ss.isNullOrUndefined(filterOptions.rangeN)) {
              throw $tab__TableauException.create("missingRangeNForRelativeDateFilters", "Missing rangeN field for a relative date filter of LASTN or NEXTN.");
            }
            fixedUpFilterOptions.rangeN = $tab__Utility.toInt(filterOptions.rangeN);
          }
          if (ss.isValue(filterOptions.anchorDate)) {
            if (!$tab__Utility.isDate(filterOptions.anchorDate) || !$tab__Utility.isDateValid(filterOptions.anchorDate)) {
              throw $tab__TableauException.createInvalidDateParameter("filterOptions.anchorDate");
            }
            fixedUpFilterOptions.anchorDate = filterOptions.anchorDate;
          }
          return fixedUpFilterOptions;
        },
        createFilterCommandReturnHandler: function FilterCommandsBuilder$CreateFilterCommandReturnHandler(commandName, fieldName, deferred) {
          return new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))(commandName, 0, ss.mkdel(this, function(result) {
            var error = this.filterCommandError(result);
            if (ss.isNullOrUndefined(error)) {
              deferred.resolve(fieldName);
            } else {
              deferred.reject(error);
            }
          }), function(remoteError, message) {
            if (remoteError) {
              deferred.reject($tab__TableauException.createInvalidFilterFieldNameOrValue(fieldName));
            } else {
              var error1 = $tab__TableauException.create("filterCannotBePerformed", message);
              deferred.reject(error1);
            }
          });
        }
      });
      var $tab_GetDataCommandsBuilder = global2.tab.GetDataCommandsBuilder = ss.mkType($asm, "tab.GetDataCommandsBuilder", function() {
      }, {
        getSummaryDataCommandParams: function GetDataCommandsBuilder$GetSummaryDataCommandParams(options) {
          var commandParameters = {};
          options = options || new Object();
          commandParameters["api.ignoreAliases"] = ss.coalesce(options.ignoreAliases, false);
          commandParameters["api.ignoreSelection"] = ss.coalesce(options.ignoreSelection, false);
          commandParameters["api.maxRows"] = ss.coalesce(options.maxRows, 0);
          return commandParameters;
        },
        getUnderlyingDataCommandParams: function GetDataCommandsBuilder$GetUnderlyingDataCommandParams(options) {
          var commandParameters = {};
          options = options || new Object();
          commandParameters["api.ignoreAliases"] = ss.coalesce(options.ignoreAliases, false);
          commandParameters["api.ignoreSelection"] = ss.coalesce(options.ignoreSelection, false);
          commandParameters["api.includeAllColumns"] = ss.coalesce(options.includeAllColumns, false);
          commandParameters["api.maxRows"] = ss.coalesce(options.maxRows, 0);
          return commandParameters;
        },
        getUnderlyingTablesCommandParams: function GetDataCommandsBuilder$GetUnderlyingTablesCommandParams() {
          return {};
        },
        getUnderlyingTableDataCommandParams: function GetDataCommandsBuilder$GetUnderlyingTableDataCommandParams(tableId, options) {
          var commandParameters = {};
          options = options || new Object();
          commandParameters["api.ignoreAliases"] = ss.coalesce(options.ignoreAliases, false);
          commandParameters["api.ignoreSelection"] = ss.coalesce(options.ignoreSelection, false);
          commandParameters["api.includeAllColumns"] = ss.coalesce(options.includeAllColumns, false);
          commandParameters["api.maxRows"] = ss.coalesce(options.maxRows, 0);
          commandParameters["api.tableId"] = ss.coalesce(tableId, "");
          return commandParameters;
        },
        getSummaryDataResponseHandler: function GetDataCommandsBuilder$GetSummaryDataResponseHandler(deferred) {
          return new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))("api.GetSummaryTableCommand", 0, ss.mkdel(this, function(result) {
            var dataResult = result;
            var dt = this.processGetDataPresModel(dataResult);
            deferred.resolve(dt);
          }), function(remoteError, message) {
            deferred.reject($tab__TableauException.createServerError(message));
          });
        },
        getUnderlyingDataResponseHandler: function GetDataCommandsBuilder$GetUnderlyingDataResponseHandler(deferred) {
          return new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))("api.GetUnderlyingTableCommand", 0, ss.mkdel(this, function(result) {
            var dataResult = result;
            var dt = this.processGetDataPresModel(dataResult);
            deferred.resolve(dt);
          }), function(remoteError, message) {
            deferred.reject($tab__TableauException.createServerError(message));
          });
        },
        processGetDataPresModel: function GetDataCommandsBuilder$ProcessGetDataPresModel(model) {
          var clientTable = this.$processUnderlyingTable(model.dataTable);
          var clientColumns = this.$processUnderlyingColumns(model.headers);
          var clientDataTableImpl = new $tab__DataTableImpl(clientTable, model.isSummary, clientTable.length, clientColumns);
          return new $tableauSoftware_DataTable(clientDataTableImpl);
        },
        $processUnderlyingTable: function GetDataCommandsBuilder$ProcessUnderlyingTable(apiTable) {
          var clientTable = [];
          for (var $t1 = 0; $t1 < apiTable.length; $t1++) {
            var row = apiTable[$t1];
            var clientRow = [];
            for (var $t2 = 0; $t2 < row.length; $t2++) {
              var apiValue = row[$t2];
              clientRow.push($tab__Utility.getDataValue(apiValue));
            }
            clientTable.push(clientRow);
          }
          return clientTable;
        },
        $processUnderlyingColumns: function GetDataCommandsBuilder$ProcessUnderlyingColumns(apiColumns) {
          var clientColumns = [];
          for (var $t1 = 0; $t1 < apiColumns.length; $t1++) {
            var apiColumn = apiColumns[$t1];
            var clientColumn = new $tab__ColumnImpl(apiColumn.fieldName, $tab_ApiEnumConverter.convertDataType(apiColumn.dataType), apiColumn.isReferenced, apiColumn.index);
            clientColumns.push(new $tableauSoftware_Column(clientColumn));
          }
          return clientColumns;
        },
        $appendErrorMessageIfNeededThenLog: function GetDataCommandsBuilder$AppendErrorMessageIfNeededThenLog(remoteError, message) {
          var errorMessage = message;
          if (!remoteError) {
            var sb = new ss.StringBuilder(message);
            sb.append("\nPossible reasons:");
            sb.append("\nCalling newer version of API against an older version of Tableau Server");
            errorMessage = sb.toString();
          }
          console.error(errorMessage);
          return errorMessage;
        },
        getUnderlyingTablesResponseHandler: function GetDataCommandsBuilder$GetUnderlyingTablesResponseHandler(deferred) {
          return new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))("api.GetUnderlyingTablesCommand", 0, ss.mkdel(this, function(result) {
            var tablesResult = result;
            var logicalTables = this.$processGetLogicalTablesPresModel(tablesResult);
            deferred.resolve(logicalTables._toApiCollection());
          }), ss.mkdel(this, function(remoteError, message) {
            deferred.reject($tab__TableauException.createServerError(this.$appendErrorMessageIfNeededThenLog(remoteError, message)));
          }));
        },
        $processGetLogicalTablesPresModel: function GetDataCommandsBuilder$ProcessGetLogicalTablesPresModel(model) {
          var logicalTables = new tab._Collection();
          for (var $t1 = 0; $t1 < model.logicalTables.length; $t1++) {
            var pm = model.logicalTables[$t1];
            logicalTables._add(pm.tableId, new $tableauSoftware_LogicalTable(pm.tableId, pm.caption));
          }
          return logicalTables;
        },
        getUnderlyingTableDataResponseHandler: function GetDataCommandsBuilder$GetUnderlyingTableDataResponseHandler(deferred) {
          return new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))("api.GetUnderlyingTableDataCommand", 0, ss.mkdel(this, function(result) {
            var dataResult = result;
            var dt = this.processGetDataPresModel(dataResult);
            deferred.resolve(dt);
          }), ss.mkdel(this, function(remoteError, message) {
            deferred.reject($tab__TableauException.createServerError(this.$appendErrorMessageIfNeededThenLog(remoteError, message)));
          }));
        }
      });
      var $tab_HostedApiMessageHandler = global2.tab.HostedApiMessageHandler = ss.mkType($asm, "tab.HostedApiMessageHandler", function() {
        this.$2$StateReadyForQueryField = null;
        $tab_ApiMessageHandler.call(this);
      }, {
        add_stateReadyForQuery: function HostedApiMessageHandler$add_StateReadyForQuery(value) {
          this.$2$StateReadyForQueryField = ss.delegateCombine(this.$2$StateReadyForQueryField, value);
        },
        remove_stateReadyForQuery: function HostedApiMessageHandler$remove_StateReadyForQuery(value) {
          this.$2$StateReadyForQueryField = ss.delegateRemove(this.$2$StateReadyForQueryField, value);
        },
        get_hostId: function HostedApiMessageHandler$get_HostId() {
          return null;
        },
        set_hostId: function HostedApiMessageHandler$set_HostId(value) {
        },
        get_iframe: function HostedApiMessageHandler$get_Iframe() {
          return null;
        }
      });
      var $tab_HostedApiMessageRouter = global2.tab.HostedApiMessageRouter = ss.mkType($asm, "tab.HostedApiMessageRouter", function() {
        this.$crossDomainMessager = null;
        this.$crossDomainMessager = new $tab_CrossDomainMessager(null);
      }, {
        registerHandler: function HostedApiMessageRouter$RegisterHandler(handler) {
          this.$crossDomainMessager.registerHandler(handler);
        },
        unregisterHandler: function HostedApiMessageRouter$UnregisterHandler(handler) {
          this.$crossDomainMessager.unregisterHandler(handler);
        },
        sendCommand: function sendCommand(T) {
          return function HostedApiMessageRouter$SendCommand(source, commandParameters, returnHandler) {
            this.$crossDomainMessager.sendCommand(T).call(this.$crossDomainMessager, source, commandParameters, returnHandler);
          };
        }
      });
      var $tab_MarkImpl = global2.tab.MarkImpl = ss.mkType($asm, "tab.MarkImpl", function(tupleIdOrPairs) {
        this.$clonedPairs = null;
        this.$collection = new tab._Collection();
        this.$tupleId = 0;
        if ($tab__jQueryShim.isArray(tupleIdOrPairs)) {
          var pairArr = tupleIdOrPairs;
          for (var i = 0; i < pairArr.length; i++) {
            var pair = pairArr[i];
            if (!ss.isValue(pair.fieldName)) {
              throw $tab__TableauException.createInvalidParameter("pair.fieldName");
            }
            if (!ss.isValue(pair.value)) {
              throw $tab__TableauException.createInvalidParameter("pair.value");
            }
            var p = new $tableauSoftware_Pair(pair.fieldName, pair.value);
            this.$collection._add(p.fieldName, p);
          }
        } else {
          this.$tupleId = tupleIdOrPairs;
        }
      }, {
        get_pairs: function MarkImpl$get_Pairs() {
          return this.$collection;
        },
        get_tupleId: function MarkImpl$get_TupleId() {
          return this.$tupleId;
        },
        get_$clonedPairs: function MarkImpl$get_ClonedPairs() {
          if (ss.isNullOrUndefined(this.$clonedPairs)) {
            this.$clonedPairs = this.$collection._toApiCollection();
          }
          return this.$clonedPairs;
        },
        $addPair: function MarkImpl$AddPair(pair) {
          this.$collection._add(pair.fieldName, pair);
        }
      }, {
        processActiveMarks: function MarkImpl$ProcessActiveMarks(marksPresModel) {
          var marks = new tab._Collection();
          if (ss.isNullOrUndefined(marksPresModel) || $tab__Utility.isNullOrEmpty(marksPresModel.marks)) {
            return marks;
          }
          for (var $t1 = 0; $t1 < marksPresModel.marks.length; $t1++) {
            var markPresModel = marksPresModel.marks[$t1];
            var tupleId = markPresModel.tupleId;
            var mark = new $tableauSoftware_Mark(tupleId);
            marks._add(tupleId.toString(), mark);
            for (var $t2 = 0; $t2 < markPresModel.pairs.length; $t2++) {
              var pairPresModel = markPresModel.pairs[$t2];
              var value = $tab__Utility.convertRawValue(pairPresModel.value, pairPresModel.valueDataType);
              var pair = new $tableauSoftware_Pair(pairPresModel.fieldName, value);
              pair.formattedValue = pairPresModel.formattedValue;
              if (!mark.impl.get_pairs()._has(pair.fieldName)) {
                mark.impl.$addPair(pair);
              }
            }
          }
          return marks;
        }
      });
      var $tab_NonApiCommand = global2.tab.NonApiCommand = ss.mkType($asm, "tab.NonApiCommand", function(name, parameters) {
        this.$parameters = null;
        this.$1$NameField = null;
        this.set_name(name);
        this.$parameters = parameters;
      }, {
        get_name: function NonApiCommand$get_Name() {
          return this.$1$NameField;
        },
        set_name: function NonApiCommand$set_Name(value) {
          this.$1$NameField = value;
        },
        get_parameters: function NonApiCommand$get_Parameters() {
          return this.$parameters;
        },
        serialize: function NonApiCommand$Serialize() {
          var message = [];
          message.push(this.get_name().toString());
          message = message.concat.apply(message, this.$parameters);
          return message.join(",");
        }
      }, {
        parse: function NonApiCommand$Parse(serialized) {
          var args = serialized.split(String.fromCharCode(44));
          var name = ss.cast(args[0], String);
          var parameters = args.slice(1);
          return new $tab_NonApiCommand(name, parameters);
        }
      });
      var $tab_Point = global2.tab.Point = ss.mkType($asm, "tab.Point", null, null, {
        $ctor: function $ctor(x, y) {
          var $this = new Object();
          $this.x = 0;
          $this.y = 0;
          $this.x = x;
          $this.y = y;
          return $this;
        },
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tab_PublicEnums = global2.tab.PublicEnums = ss.mkType($asm, "tab.PublicEnums", null, null, {
        tryNormalizeEnum: function tryNormalizeEnum(T) {
          return function PublicEnums$TryNormalizeEnum(rawValue, value) {
            if (ss.isValue(rawValue)) {
              var lookup = rawValue.toString().toUpperCase();
              var $t1 = ss.Enum.getValues(T);
              for (var $t2 = 0; $t2 < $t1.length; $t2++) {
                var name = ss.cast($t1[$t2], String);
                var compareValue = name.toUpperCase();
                if (ss.referenceEquals(lookup, compareValue)) {
                  value.$ = name;
                  return true;
                }
              }
            }
            value.$ = ss.getDefaultValue(T);
            return false;
          };
        },
        normalizeEnum: function normalizeEnum(T) {
          return function PublicEnums$NormalizeEnum(rawValue, paramName) {
            var value = {};
            if (!$tab_PublicEnums.tryNormalizeEnum(T).call(null, rawValue, value)) {
              throw $tab__TableauException.createInvalidParameter(paramName);
            }
            return value.$;
          };
        },
        isValidEnum: function isValidEnum(T) {
          return function PublicEnums$IsValidEnum(rawValue) {
            var value = {};
            var valid = $tab_PublicEnums.tryNormalizeEnum(T).call(null, rawValue, value);
            return valid;
          };
        }
      });
      var $tab_SharedUtils = global2.tab.SharedUtils = ss.mkType($asm, "tab.SharedUtils", function() {
      }, {
        addVisualIdForWorksheet: function SharedUtils$AddVisualIdForWorksheet(commandParameters, worksheetName, dashboardName) {
          commandParameters["api.worksheetName"] = worksheetName;
          if (ss.isValue(dashboardName)) {
            commandParameters["api.dashboardName"] = dashboardName;
          }
        }
      });
      var $tab_SheetSize = global2.tab.SheetSize = ss.mkType($asm, "tab.SheetSize", null, null, {
        $ctor: function $ctor(behavior, minSize, maxSize) {
          var $this = new Object();
          $this.behavior = null;
          $this.minSize = null;
          $this.maxSize = null;
          $this.behavior = ss.coalesce(behavior, "automatic");
          if (ss.isValue(minSize)) {
            $this.minSize = minSize;
          } else {
            delete $this["minSize"];
          }
          if (ss.isValue(maxSize)) {
            $this.maxSize = maxSize;
          } else {
            delete $this["maxSize"];
          }
          return $this;
        },
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tab_SheetSizeFactory = global2.tab.SheetSizeFactory = ss.mkType($asm, "tab.SheetSizeFactory", null, null, {
        createAutomatic: function SheetSizeFactory$CreateAutomatic() {
          var size = $tab_SheetSize.$ctor("automatic", null, null);
          return size;
        },
        fromSizeConstraints: function SheetSizeFactory$FromSizeConstraints(vizSizePresModel) {
          var minHeight = vizSizePresModel.minHeight;
          var minWidth = vizSizePresModel.minWidth;
          var maxHeight = vizSizePresModel.maxHeight;
          var maxWidth = vizSizePresModel.maxWidth;
          var behavior = "automatic";
          var minSize = null;
          var maxSize = null;
          if (minHeight === 0 && minWidth === 0) {
            if (maxHeight === 0 && maxWidth === 0) {
            } else {
              behavior = "atmost";
              maxSize = $tab_Size.$ctor(maxWidth, maxHeight);
            }
          } else if (maxHeight === 0 && maxWidth === 0) {
            behavior = "atleast";
            minSize = $tab_Size.$ctor(minWidth, minHeight);
          } else if (maxHeight === minHeight && maxWidth === minWidth && minWidth > 0) {
            behavior = "exactly";
            minSize = $tab_Size.$ctor(minWidth, minHeight);
            maxSize = $tab_Size.$ctor(minWidth, minHeight);
          } else {
            behavior = "range";
            if (minWidth === 0 && maxWidth === 0) {
              maxWidth = 2147483647;
            }
            minSize = $tab_Size.$ctor(minWidth, minHeight);
            maxSize = $tab_Size.$ctor(maxWidth, maxHeight);
          }
          return $tab_SheetSize.$ctor(behavior, minSize, maxSize);
        }
      });
      var $tab_Size = global2.tab.Size = ss.mkType($asm, "tab.Size", null, null, {
        $ctor: function $ctor(width, height) {
          var $this = new Object();
          $this.width = 0;
          $this.height = 0;
          $this.width = width;
          $this.height = height;
          return $this;
        },
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tableauSoftware_Column = global2.tableauSoftware.Column = ss.mkType($asm, "tableauSoftware.Column", function(impl) {
        this.$impl = null;
        this.$impl = impl;
      }, {
        getFieldName: function Column$GetFieldName() {
          return this.$impl.get_fieldName();
        },
        getDataType: function Column$GetDataType() {
          return this.$impl.get_dataType();
        },
        getIsReferenced: function Column$GetIsReferenced() {
          return this.$impl.get_isReferenced();
        },
        getIndex: function Column$GetIndex() {
          return this.$impl.get_index();
        }
      });
      var $tableauSoftware_DataTable = global2.tableauSoftware.DataTable = ss.mkType($asm, "tableauSoftware.DataTable", function(impl) {
        this.$impl = null;
        this.$impl = impl;
      }, {
        getName: function DataTable$GetName() {
          return this.$impl.get_name();
        },
        getData: function DataTable$GetData() {
          return this.$impl.get_rows();
        },
        getColumns: function DataTable$GetColumns() {
          return this.$impl.get_columns();
        },
        getTotalRowCount: function DataTable$GetTotalRowCount() {
          return this.$impl.get_totalRowCount();
        },
        getIsSummaryData: function DataTable$GetIsSummaryData() {
          return this.$impl.get_isSummaryData();
        }
      });
      var $tableauSoftware_LogicalTable = global2.tableauSoftware.LogicalTable = ss.mkType($asm, "tableauSoftware.LogicalTable", function(tableId, caption) {
        this.$tableId = null;
        this.$caption = null;
        this.$tableId = tableId;
        this.$caption = caption;
      }, {
        getTableId: function LogicalTable$GetTableId() {
          return this.$tableId;
        },
        getCaption: function LogicalTable$GetCaption() {
          return this.$caption;
        }
      });
      var $tableauSoftware_Mark = global2.tableauSoftware.Mark = ss.mkType($asm, "tableauSoftware.Mark", function(tupleId) {
        this.impl = null;
        this.impl = new $tab_MarkImpl(tupleId);
      }, {
        getPairs: function Mark$GetPairs() {
          return this.impl.get_$clonedPairs();
        }
      });
      var $tableauSoftware_Pair = global2.tableauSoftware.Pair = ss.mkType($asm, "tableauSoftware.Pair", function(fieldName, value) {
        this.fieldName = null;
        this.value = null;
        this.formattedValue = null;
        this.fieldName = fieldName;
        this.value = value;
        this.formattedValue = ss.isValue(value) ? value.toString() : "";
      });
      ss.initClass($tab__ApiCommand);
      ss.initClass($tab__ApiObjectRegistry);
      ss.initClass($tab__ApiServerNotification);
      ss.initClass($tab__ApiServerResultParser);
      ss.initClass($tab__CollectionImpl);
      ss.initClass($tab__ColumnImpl);
      ss.initClass($tab__DataTableImpl);
      ss.initClass($tab__DeferredImpl);
      ss.initClass($tab__jQueryShim);
      ss.initClass($tab__Param);
      ss.initClass($tab__PromiseImpl);
      ss.initClass($tab__Rect);
      ss.initClass($tab__TableauException);
      ss.initClass($tab__Utility);
      ss.initClass($tab_$DeferredUtil);
      ss.initClass($tab_$DoNothingCrossDomainHandler);
      ss.initClass($tab_ApiEnumConverter);
      ss.initClass($tab_ApiMessageHandler);
      ss.initClass($tab_ApiMessagingOptions);
      ss.initClass($tab_CrossDomainMessager);
      ss.initClass($tab_DataValue, Object);
      ss.initClass($tab_FilterCommandsBuilder);
      ss.initClass($tab_GetDataCommandsBuilder);
      ss.initClass($tab_HostedApiMessageHandler, $tab_ApiMessageHandler);
      ss.initClass($tab_HostedApiMessageRouter);
      ss.initClass($tab_MarkImpl);
      ss.initClass($tab_NonApiCommand);
      ss.initClass($tab_Point, Object);
      ss.initClass($tab_PublicEnums);
      ss.initClass($tab_SharedUtils);
      ss.initClass($tab_SheetSize, Object);
      ss.initClass($tab_SheetSizeFactory);
      ss.initClass($tab_Size, Object);
      ss.initClass($tableauSoftware_Column);
      ss.initClass($tableauSoftware_DataTable);
      ss.initClass($tableauSoftware_LogicalTable);
      ss.initClass($tableauSoftware_Mark);
      ss.initClass($tableauSoftware_Pair);
      (function() {
        $tab__ApiCommand.crossDomainEventNotificationId = "xdomainSourceId";
        $tab__ApiCommand.lastRequestMessage = null;
        $tab__ApiCommand.lastResponseMessage = null;
        $tab__ApiCommand.lastClientInfoResponseMessage = null;
        $tab__ApiCommand.$nextCommandId = 0;
      })();
      (function() {
        var globalState = window["_ApiObjectRegistryGlobalState"];
        var $t1 = globalState;
        if (ss.isNullOrUndefined($t1)) {
          $t1 = new Object();
        }
        window["_ApiObjectRegistryGlobalState"] = $t1;
        window._ApiObjectRegistryGlobalState.creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry || {};
        window._ApiObjectRegistryGlobalState.singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry || {};
      })();
      (function() {
        $tab__Param.$maxChars = 128;
      })();
      (function() {
        $tab__jQueryShim.$arrayType = "array";
        $tab__jQueryShim.$booleanType = "boolean";
        $tab__jQueryShim.$dateType = "date";
        $tab__jQueryShim.$functionType = "function";
        $tab__jQueryShim.$numberType = "number";
        $tab__jQueryShim.$objectType = "object";
        $tab__jQueryShim.$regExpType = "regexp";
        $tab__jQueryShim.$stringType = "string";
        $tab__jQueryShim.$class2type = ss.mkdict(["[object Boolean]", $tab__jQueryShim.$booleanType, "[object Number]", $tab__jQueryShim.$numberType, "[object String]", $tab__jQueryShim.$stringType, "[object Function]", $tab__jQueryShim.$functionType, "[object Array]", $tab__jQueryShim.$arrayType, "[object Date]", $tab__jQueryShim.$dateType, "[object RegExp]", $tab__jQueryShim.$regExpType, "[object Object]", $tab__jQueryShim.$objectType]);
        $tab__jQueryShim.$trim = ss.cast(String.prototype["trim"], Function);
        $tab__jQueryShim.$toString = ss.cast(Object.prototype["toString"], Function);
        $tab__jQueryShim.$trimLeft = new RegExp("^[\\s\\xA0]+");
        $tab__jQueryShim.$trimRight = new RegExp("[\\s\\xA0]+$");
        $tab__jQueryShim.$rvalidchars = new RegExp("^[\\],:{}\\s]*$");
        $tab__jQueryShim.$rvalidescape = new RegExp('\\\\(?:["\\\\\\/bfnrt]|u[0-9a-fA-F]{4})', "g");
        $tab__jQueryShim.$rvalidtokens = new RegExp('"[^"\\\\\\n\\r]*"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?', "g");
        $tab__jQueryShim.$rvalidbraces = new RegExp("(?:^|:|,)(?:\\s*\\[)+", "g");
      })();
      (function() {
        var ns = global2.tableauSoftware;
        ns.DeviceType = { DEFAULT: "default", DESKTOP: "desktop", TABLET: "tablet", PHONE: "phone" };
        ns.DashboardObjectType = { BLANK: "blank", WORKSHEET: "worksheet", QUICK_FILTER: "quickFilter", PARAMETER_CONTROL: "parameterControl", PAGE_FILTER: "pageFilter", LEGEND: "legend", TITLE: "title", TEXT: "text", IMAGE: "image", WEB_PAGE: "webPage", ADDIN: "addIn" };
        ns.DataType = { FLOAT: "float", INTEGER: "integer", STRING: "string", BOOLEAN: "boolean", DATE: "date", DATETIME: "datetime" };
        ns.DateRangeType = { LAST: "last", LASTN: "lastn", NEXT: "next", NEXTN: "nextn", CURR: "curr", TODATE: "todate" };
        ns.ErrorCode = { INTERNAL_ERROR: "internalError", SERVER_ERROR: "serverError", INVALID_AGGREGATION_FIELD_NAME: "invalidAggregationFieldName", INVALID_TOOLBAR_BUTTON_NAME: "invalidToolbarButtonName", INVALID_PARAMETER: "invalidParameter", INVALID_URL: "invalidUrl", STALE_DATA_REFERENCE: "staleDataReference", VIZ_ALREADY_IN_MANAGER: "vizAlreadyInManager", NO_URL_OR_PARENT_ELEMENT_NOT_FOUND: "noUrlOrParentElementNotFound", INVALID_FILTER_FIELDNAME: "invalidFilterFieldName", INVALID_FILTER_FIELDVALUE: "invalidFilterFieldValue", INVALID_FILTER_FIELDNAME_OR_VALUE: "invalidFilterFieldNameOrValue", FILTER_CANNOT_BE_PERFORMED: "filterCannotBePerformed", NOT_ACTIVE_SHEET: "notActiveSheet", INVALID_CUSTOM_VIEW_NAME: "invalidCustomViewName", MISSING_RANGEN_FOR_RELATIVE_DATE_FILTERS: "missingRangeNForRelativeDateFilters", MISSING_MAX_SIZE: "missingMaxSize", MISSING_MIN_SIZE: "missingMinSize", MISSING_MINMAX_SIZE: "missingMinMaxSize", INVALID_SIZE: "invalidSize", INVALID_SIZE_BEHAVIOR_ON_WORKSHEET: "invalidSizeBehaviorOnWorksheet", SHEET_NOT_IN_WORKBOOK: "sheetNotInWorkbook", INDEX_OUT_OF_RANGE: "indexOutOfRange", DOWNLOAD_WORKBOOK_NOT_ALLOWED: "downloadWorkbookNotAllowed", NULL_OR_EMPTY_PARAMETER: "nullOrEmptyParameter", BROWSER_NOT_CAPABLE: "browserNotCapable", UNSUPPORTED_EVENT_NAME: "unsupportedEventName", INVALID_DATE_PARAMETER: "invalidDateParameter", INVALID_SELECTION_FIELDNAME: "invalidSelectionFieldName", INVALID_SELECTION_VALUE: "invalidSelectionValue", INVALID_SELECTION_DATE: "invalidSelectionDate", NO_URL_FOR_HIDDEN_WORKSHEET: "noUrlForHiddenWorksheet", MAX_VIZ_RESIZE_ATTEMPTS: "maxVizResizeAttempts" };
        ns.FieldAggregationType = { SUM: "SUM", AVG: "AVG", MIN: "MIN", MAX: "MAX", STDEV: "STDEV", STDEVP: "STDEVP", VAR: "VAR", VARP: "VARP", COUNT: "COUNT", COUNTD: "COUNTD", MEDIAN: "MEDIAN", ATTR: "ATTR", NONE: "NONE", PERCENTILE: "PERCENTILE", YEAR: "YEAR", QTR: "QTR", MONTH: "MONTH", DAY: "DAY", HOUR: "HOUR", MINUTE: "MINUTE", SECOND: "SECOND", WEEK: "WEEK", WEEKDAY: "WEEKDAY", MONTHYEAR: "MONTHYEAR", MDY: "MDY", END: "END", TRUNC_YEAR: "TRUNC_YEAR", TRUNC_QTR: "TRUNC_QTR", TRUNC_MONTH: "TRUNC_MONTH", TRUNC_WEEK: "TRUNC_WEEK", TRUNC_DAY: "TRUNC_DAY", TRUNC_HOUR: "TRUNC_HOUR", TRUNC_MINUTE: "TRUNC_MINUTE", TRUNC_SECOND: "TRUNC_SECOND", QUART1: "QUART1", QUART3: "QUART3", SKEWNESS: "SKEWNESS", KURTOSIS: "KURTOSIS", INOUT: "INOUT", SUM_XSQR: "SUM_XSQR", USER: "USER", COLLECT: "COLLECT" };
        ns.FieldRoleType = { DIMENSION: "dimension", MEASURE: "measure", UNKNOWN: "unknown" };
        ns.FilterUpdateType = { ALL: "all", REPLACE: "replace", ADD: "add", REMOVE: "remove" };
        ns.FilterType = { CATEGORICAL: "categorical", QUANTITATIVE: "quantitative", HIERARCHICAL: "hierarchical", RELATIVEDATE: "relativedate" };
        ns.NullOption = { NULL_VALUES: "nullValues", NON_NULL_VALUES: "nonNullValues", ALL_VALUES: "allValues" };
        ns.ParameterAllowableValuesType = { ALL: "all", LIST: "list", RANGE: "range" };
        ns.ParameterDataType = { FLOAT: "float", INTEGER: "integer", STRING: "string", BOOLEAN: "boolean", DATE: "date", DATETIME: "datetime" };
        ns.PeriodType = { YEAR: "year", QUARTER: "quarter", MONTH: "month", WEEK: "week", DAY: "day", HOUR: "hour", MINUTE: "minute", SECOND: "second" };
        ns.SelectionUpdateType = { REPLACE: "replace", ADD: "add", REMOVE: "remove" };
        ns.SheetSizeBehavior = { AUTOMATIC: "automatic", EXACTLY: "exactly", RANGE: "range", ATLEAST: "atleast", ATMOST: "atmost" };
        ns.SheetType = { WORKSHEET: "worksheet", DASHBOARD: "dashboard", STORY: "story" };
        ns.TableauEventName = { CUSTOM_MARK_CONTEXT_MENU: "custommarkcontextmenu", CUSTOM_VIEW_LOAD: "customviewload", CUSTOM_VIEW_REMOVE: "customviewremove", CUSTOM_VIEW_SAVE: "customviewsave", CUSTOM_VIEW_SET_DEFAULT: "customviewsetdefault", FILTER_CHANGE: "filterchange", FIRST_INTERACTIVE: "firstinteractive", FIRST_VIZ_SIZE_KNOWN: "firstvizsizeknown", MARKS_SELECTION: "marksselection", MARKS_HIGHLIGHT: "markshighlight", PARAMETER_VALUE_CHANGE: "parametervaluechange", STORY_POINT_SWITCH: "storypointswitch", TAB_SWITCH: "tabswitch", TOOLBAR_STATE_CHANGE: "toolbarstatechange", URL_ACTION: "urlaction", VIZ_RESIZE: "vizresize" };
        ns.ToolbarPosition = { TOP: "top", BOTTOM: "bottom" };
        ns.ToolbarButtonName = { REDO: "redo", UNDO: "undo" };
        ns.MenuType = { UBERTIP: "ubertip" };
      })();
    })();
    (function() {
      "use strict";
      var $asm = {};
      global2.tab = global2.tab || {};
      global2.tableauSoftware = global2.tableauSoftware || {};
      ss.initAssembly($asm, "Tableau.JavaScript.Vql.Api");
      var $tab__ApiBootstrap = global2.tab._ApiBootstrap = ss.mkType($asm, "tab._ApiBootstrap", null, null, {
        initialize: function ApiBootstrap$Initialize() {
          tab._ApiObjectRegistry.registerApiMessageRouter(function() {
            return new $tab_JsApiMessageRouter();
          });
        }
      });
      var $tab__CustomViewImpl = global2.tab._CustomViewImpl = ss.mkType($asm, "tab._CustomViewImpl", function(workbookImpl, name, messagingOptions) {
        this.$customView = null;
        this.$presModel = null;
        this.$workbookImpl = null;
        this.$messagingOptions = null;
        this.$name = null;
        this.$ownerName = null;
        this.$url = null;
        this.$isPublic = false;
        this.$isDefault = false;
        this.$isStale = false;
        this.$workbookImpl = workbookImpl;
        this.$name = name;
        this.$messagingOptions = messagingOptions;
        this.$isPublic = false;
        this.$isDefault = false;
        this.$isStale = false;
      }, {
        get_$customView: function CustomViewImpl$get_CustomView() {
          if (ss.isNullOrUndefined(this.$customView)) {
            this.$customView = new $tableauSoftware_CustomView(this);
          }
          return this.$customView;
        },
        get_$workbook: function CustomViewImpl$get_Workbook() {
          return this.$workbookImpl.get_workbook();
        },
        get_$url: function CustomViewImpl$get_Url() {
          return this.$url;
        },
        get_$name: function CustomViewImpl$get_Name() {
          return this.$name;
        },
        set_$name: function CustomViewImpl$set_Name(value) {
          if (this.$isStale) {
            throw tab._TableauException.create("staleDataReference", "Stale data");
          }
          this.$name = value;
        },
        get_$ownerName: function CustomViewImpl$get_OwnerName() {
          return this.$ownerName;
        },
        get_$advertised: function CustomViewImpl$get_Advertised() {
          return this.$isPublic;
        },
        set_$advertised: function CustomViewImpl$set_Advertised(value) {
          if (this.$isStale) {
            throw tab._TableauException.create("staleDataReference", "Stale data");
          }
          this.$isPublic = value;
        },
        get_$isDefault: function CustomViewImpl$get_IsDefault() {
          return this.$isDefault;
        },
        saveAsync: function CustomViewImpl$SaveAsync() {
          if (this.$isStale || ss.isNullOrUndefined(this.$presModel)) {
            throw tab._TableauException.create("staleDataReference", "Stale data");
          }
          this.$presModel.isPublic = this.$isPublic;
          this.$presModel.name = this.$name;
          var deferred = new tab._Deferred();
          var param = {};
          param["api.customViewParam"] = this.$presModel;
          var returnHandler = $tab__CustomViewImpl.$createCustomViewCommandReturnHandler("api.UpdateCustomViewCommand", deferred, ss.mkdel(this, function(result) {
            $tab__CustomViewImpl._processCustomViewUpdate(this.$workbookImpl, this.$messagingOptions, result, true);
            deferred.resolve(this.get_$customView());
          }));
          this.$messagingOptions.sendCommand(Object).call(this.$messagingOptions, param, returnHandler);
          return deferred.get_promise();
        },
        $removeAsync: function CustomViewImpl$RemoveAsync() {
          var deferred = new tab._Deferred();
          var param = {};
          param["api.customViewParam"] = this.$presModel;
          var returnHandler = $tab__CustomViewImpl.$createCustomViewCommandReturnHandler("api.RemoveCustomViewCommand", deferred, ss.mkdel(this, function(result) {
            this.$isStale = true;
            $tab__CustomViewImpl._processCustomViews(this.$workbookImpl, this.$messagingOptions, result);
            deferred.resolve(this.get_$customView());
          }));
          this.$messagingOptions.sendCommand(Object).call(this.$messagingOptions, param, returnHandler);
          return deferred.get_promise();
        },
        _showAsync: function CustomViewImpl$ShowAsync() {
          if (this.$isStale || ss.isNullOrUndefined(this.$presModel)) {
            throw tab._TableauException.create("staleDataReference", "Stale data");
          }
          return $tab__CustomViewImpl._showCustomViewAsync(this.$workbookImpl, this.$messagingOptions, this.$presModel);
        }
      }, {
        _getAsync: function CustomViewImpl$GetAsync(eventContext) {
          var deferred = new tab._Deferred();
          deferred.resolve(eventContext.get__customViewImpl().get_$customView());
          return deferred.get_promise();
        },
        _createNew: function CustomViewImpl$CreateNew(workbookImpl, messagingOptions, apiPresModel, defaultId) {
          var cv = new $tab__CustomViewImpl(workbookImpl, apiPresModel.name, messagingOptions);
          cv.$isPublic = apiPresModel.isPublic;
          cv.$url = apiPresModel.url;
          cv.$ownerName = apiPresModel.owner.friendlyName;
          cv.$isDefault = ss.isValue(defaultId) && ss.unbox(defaultId) === apiPresModel.id;
          cv.$presModel = apiPresModel;
          return cv;
        },
        _saveNewAsync: function CustomViewImpl$SaveNewAsync(workbookImpl, messagingOptions, name) {
          var deferred = new tab._Deferred();
          var param = {};
          param["api.customViewName"] = name;
          var returnHandler = $tab__CustomViewImpl.$createCustomViewCommandReturnHandler("api.SaveNewCustomViewCommand", deferred, function(result) {
            $tab__CustomViewImpl._processCustomViewUpdate(workbookImpl, messagingOptions, result, true);
            var newView = null;
            if (ss.isValue(workbookImpl.get_$updatedCustomViews())) {
              newView = workbookImpl.get_$updatedCustomViews().get_item(0);
            }
            deferred.resolve(newView);
          });
          messagingOptions.sendCommand(Object).call(messagingOptions, param, returnHandler);
          return deferred.get_promise();
        },
        _showCustomViewAsync: function CustomViewImpl$ShowCustomViewAsync(workbookImpl, messagingOptions, serverCustomizedView) {
          var deferred = new tab._Deferred();
          var param = {};
          if (ss.isValue(serverCustomizedView)) {
            param["api.customViewParam"] = serverCustomizedView;
          }
          var returnHandler = $tab__CustomViewImpl.$createCustomViewCommandReturnHandler("api.ShowCustomViewCommand", deferred, function(result) {
            var cv = workbookImpl.get_activeCustomView();
            deferred.resolve(cv);
          });
          messagingOptions.sendCommand(Object).call(messagingOptions, param, returnHandler);
          return deferred.get_promise();
        },
        _makeCurrentCustomViewDefaultAsync: function CustomViewImpl$MakeCurrentCustomViewDefaultAsync(workbookImpl, messagingOptions) {
          var deferred = new tab._Deferred();
          var param = {};
          var returnHandler = $tab__CustomViewImpl.$createCustomViewCommandReturnHandler("api.MakeCurrentCustomViewDefaultCommand", deferred, function(result) {
            var cv = workbookImpl.get_activeCustomView();
            deferred.resolve(cv);
          });
          messagingOptions.sendCommand(Object).call(messagingOptions, param, returnHandler);
          return deferred.get_promise();
        },
        _getCustomViewsAsync: function CustomViewImpl$GetCustomViewsAsync(workbookImpl, messagingOptions) {
          var deferred = new tab._Deferred();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.FetchCustomViewsCommand", 0, function(result) {
            $tab__CustomViewImpl._processCustomViews(workbookImpl, messagingOptions, result);
            deferred.resolve(workbookImpl.get_$customViews()._toApiCollection());
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.create("serverError", message));
          });
          messagingOptions.sendCommand(Object).call(messagingOptions, null, returnHandler);
          return deferred.get_promise();
        },
        _processCustomViews: function CustomViewImpl$ProcessCustomViews(workbookImpl, messagingOptions, info) {
          $tab__CustomViewImpl._processCustomViewUpdate(workbookImpl, messagingOptions, info, false);
        },
        _processCustomViewUpdate: function CustomViewImpl$ProcessCustomViewUpdate(workbookImpl, messagingOptions, customViewsInfo, shouldUpdateList) {
          workbookImpl.set_$currentCustomView(null);
          workbookImpl.set_$removedCustomViews(workbookImpl.get_$customViews());
          workbookImpl.set_$customViews(new tab._Collection());
          if (shouldUpdateList) {
            workbookImpl.set_$updatedCustomViews(new tab._Collection());
            if (ss.isValue(customViewsInfo.newView)) {
              $tab__CustomViewImpl.$processOneCustomViewUpdate(workbookImpl, messagingOptions, customViewsInfo, customViewsInfo.newView, shouldUpdateList);
            }
          }
          if (ss.isValue(customViewsInfo.customViews)) {
            for (var $t1 = 0; $t1 < customViewsInfo.customViews.length; $t1++) {
              var customView = customViewsInfo.customViews[$t1];
              $tab__CustomViewImpl.$processOneCustomViewUpdate(workbookImpl, messagingOptions, customViewsInfo, customView, shouldUpdateList);
            }
          }
        },
        buildCustomViewKeyForDuplicate: function CustomViewImpl$BuildCustomViewKeyForDuplicate(customViewName, userName) {
          return customViewName + "/" + userName;
        },
        $processOneCustomViewUpdate: function CustomViewImpl$ProcessOneCustomViewUpdate(workbookImpl, messagingOptions, customViewsInfo, customView, shouldUpdateList) {
          var currentViewName = null;
          var currentOwnerName = null;
          if (ss.isValue(customViewsInfo.currentView)) {
            currentViewName = customViewsInfo.currentView.name;
            currentOwnerName = customViewsInfo.currentView.owner.friendlyName;
          }
          var defaultCustomViewId = customViewsInfo.defaultCustomViewId;
          var customViewImpl = $tab__CustomViewImpl._createNew(workbookImpl, messagingOptions, customView, defaultCustomViewId);
          var customViewKey = customViewImpl.get_$name();
          if (workbookImpl.get_$customViews()._has(customViewKey)) {
            customViewKey = $tab__CustomViewImpl.buildCustomViewKeyForDuplicate(customViewImpl.get_$name(), customView.owner.username);
          }
          workbookImpl.get_$customViews()._add(customViewKey, customViewImpl.get_$customView());
          if (workbookImpl.get_$removedCustomViews()._has(customViewKey)) {
            workbookImpl.get_$removedCustomViews()._remove(customViewKey);
          } else if (shouldUpdateList && !workbookImpl.get_$updatedCustomViews()._has(customViewKey)) {
            workbookImpl.get_$updatedCustomViews()._add(customViewKey, customViewImpl.get_$customView());
          }
          if (ss.isValue(currentViewName) && ss.referenceEquals(customViewImpl.get_$name(), currentViewName) && ss.referenceEquals(customViewImpl.get_$ownerName(), currentOwnerName)) {
            workbookImpl.set_$currentCustomView(customViewImpl.get_$customView());
          }
        },
        $createCustomViewCommandReturnHandler: function CustomViewImpl$CreateCustomViewCommandReturnHandler(commandName, deferred, successCallback) {
          var errorCallback = function errorCallback2(remoteError, message) {
            deferred.reject(tab._TableauException.create("serverError", message));
          };
          return new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))(commandName, 0, successCallback, errorCallback);
        }
      });
      var $tab__DashboardImpl = global2.tab._DashboardImpl = ss.mkType($asm, "tab._DashboardImpl", function(sheetInfoImpl, workbookImpl, messagingOptions) {
        this.$dashboard = null;
        this.$worksheets = new tab._Collection();
        this.$dashboardObjects = new tab._Collection();
        this.$filterCommandsBuilder = new tab.FilterCommandsBuilder();
        this.$sharedUtils = new tab.SharedUtils();
        $tab__SheetImpl.call(this, sheetInfoImpl, workbookImpl, messagingOptions);
      }, {
        get_sheet: function DashboardImpl$get_Sheet() {
          return this.get_dashboard();
        },
        get_dashboard: function DashboardImpl$get_Dashboard() {
          if (ss.isNullOrUndefined(this.$dashboard)) {
            this.$dashboard = new $tableauSoftware_Dashboard(this);
          }
          return this.$dashboard;
        },
        get_worksheets: function DashboardImpl$get_Worksheets() {
          return this.$worksheets;
        },
        get_objects: function DashboardImpl$get_Objects() {
          return this.$dashboardObjects;
        },
        $addObjects: function DashboardImpl$AddObjects(zones, findSheetFunc) {
          this.$dashboardObjects = new tab._Collection();
          this.$worksheets = new tab._Collection();
          for (var i = 0; i < zones.length; i++) {
            var zone = zones[i];
            var worksheet = null;
            if (zones[i].objectType === "worksheet") {
              var name = zone.name;
              if (ss.isNullOrUndefined(name)) {
                continue;
              }
              var index = this.$worksheets.get__length();
              var size = tab.SheetSizeFactory.createAutomatic();
              var isActive = false;
              var publishedSheetInfo = findSheetFunc(name);
              var isHidden = ss.isNullOrUndefined(publishedSheetInfo);
              var url = isHidden ? "" : publishedSheetInfo.getUrl();
              var sheetInfoImpl = $tab__SheetInfoImpl.$ctor(name, "worksheet", index, size, this.get_workbook(), url, isActive, isHidden, zone.zoneId);
              var worksheetImpl = new $tab__WorksheetImpl(sheetInfoImpl, this.get_workbookImpl(), this.get_messagingOptions(), this);
              worksheet = worksheetImpl.get_worksheet();
              this.$worksheets._add(name, worksheetImpl.get_worksheet());
            }
            var obj = new $tableauSoftware_DashboardObject(zone, this.get_dashboard(), worksheet);
            this.$dashboardObjects._add(i.toString(), obj);
          }
        },
        $getFiltersAsync: function DashboardImpl$GetFiltersAsync() {
          var deferred = new tab._Deferred();
          var commandParameters = {};
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.GetDashboardFiltersListCommand", 0, ss.mkdel(this, function(result) {
            var sheetNames = Object.keys(result.filters);
            var filters = new Array();
            var $t1 = ss.getEnumerator(sheetNames);
            try {
              while ($t1.moveNext()) {
                var sheetName = $t1.current();
                for (var i = 0; i < this.get_worksheets().get__length(); i++) {
                  if (ss.referenceEquals(this.get_worksheets().get_item(i)._impl.get_name(), sheetName)) {
                    var $t2 = new Object();
                    $t2.filters = Array.prototype.slice.call(result.filters[sheetName]);
                    var worksheetFiltersPM = $t2;
                    var worksheetFilters = $tableauSoftware_Filter.processFiltersList(this.get_worksheets().get_item(i)._impl, worksheetFiltersPM);
                    filters = filters.concat(worksheetFilters._toApiCollection());
                  }
                }
              }
            } finally {
              $t1.dispose();
            }
            deferred.resolve(filters);
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $applyFilterAsync: function DashboardImpl$ApplyFilterAsync(fieldName, values, updateType, options) {
          this.$verifyActiveDashboard();
          var commandParameters = this.$filterCommandsBuilder.buildApplyFiltersCommandParams(fieldName, values, updateType, options);
          commandParameters["api.dashboardName"] = this.get_name();
          var deferred = new tab._Deferred();
          var returnHandler = this.$filterCommandsBuilder.createFilterCommandReturnHandler("api.ApplyDashboardCategoricalFilterCommand", fieldName, deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $verifyActiveDashboard: function DashboardImpl$VerifyActiveDashboard() {
          var isRootAndActiveDashboard = this.get_isActive();
          var isWithinActiveStoryPoint = ss.isValue(this.get_parentStoryPointImpl()) && this.get_parentStoryPointImpl().get_parentStoryImpl().get_isActive();
          if (!isRootAndActiveDashboard && !isWithinActiveStoryPoint) {
            throw tab._TableauException.createNotActiveSheet();
          }
        }
      });
      var $tab__DataSourceImpl = global2.tab._DataSourceImpl = ss.mkType($asm, "tab._DataSourceImpl", function(name, isPrimary) {
        this.$name = null;
        this.$fields = new tab._Collection();
        this.$isPrimary = false;
        this.$dataSource = null;
        tab._Param.verifyString(name, "name");
        this.$name = name;
        this.$isPrimary = isPrimary;
      }, {
        get_dataSource: function DataSourceImpl$get_DataSource() {
          if (ss.isNullOrUndefined(this.$dataSource)) {
            this.$dataSource = new $tableauSoftware_DataSource(this);
          }
          return this.$dataSource;
        },
        get_name: function DataSourceImpl$get_Name() {
          return this.$name;
        },
        get_fields: function DataSourceImpl$get_Fields() {
          return this.$fields;
        },
        get_isPrimary: function DataSourceImpl$get_IsPrimary() {
          return this.$isPrimary;
        },
        addField: function DataSourceImpl$AddField(field) {
          this.$fields._add(field.getName(), field);
        }
      }, {
        processDataSource: function DataSourceImpl$ProcessDataSource(dataSourcePm) {
          var dataSourceImpl = new $tab__DataSourceImpl(dataSourcePm.name, dataSourcePm.isPrimary);
          var fields = ss.coalesce(dataSourcePm.fields, []);
          for (var $t1 = 0; $t1 < fields.length; $t1++) {
            var fieldPm = fields[$t1];
            var fieldRole = tab.ApiEnumConverter.convertFieldRole(fieldPm.role);
            var fieldAggregation = tab.ApiEnumConverter.convertFieldAggregation(fieldPm.aggregation);
            var field = new $tableauSoftware_Field(dataSourceImpl.get_dataSource(), fieldPm.name, fieldRole, fieldAggregation);
            dataSourceImpl.addField(field);
          }
          return dataSourceImpl;
        },
        processDataSourcesForWorksheet: function DataSourceImpl$ProcessDataSourcesForWorksheet(pm) {
          var dataSources = new tab._Collection();
          var primaryDataSourceImpl = null;
          for (var $t1 = 0; $t1 < pm.dataSources.length; $t1++) {
            var dataSourcePm = pm.dataSources[$t1];
            var dataSourceImpl = $tab__DataSourceImpl.processDataSource(dataSourcePm);
            if (dataSourcePm.isPrimary) {
              primaryDataSourceImpl = dataSourceImpl;
            } else {
              dataSources._add(dataSourcePm.name, dataSourceImpl.get_dataSource());
            }
          }
          if (ss.isValue(primaryDataSourceImpl)) {
            dataSources._addToFirst(primaryDataSourceImpl.get_name(), primaryDataSourceImpl.get_dataSource());
          }
          return dataSources;
        }
      });
      var $tab__SheetImpl = global2.tab._SheetImpl = ss.mkType($asm, "tab._SheetImpl", function(sheetInfoImpl, workbookImpl, messagingOptions) {
        this.$name = null;
        this.$index = 0;
        this.$isActive = false;
        this.$isHidden = false;
        this.$sheetType = null;
        this.$size = null;
        this.$url = null;
        this.$workbookImpl = null;
        this.$messagingOptions = null;
        this.$parentStoryPointImpl = null;
        this.$zoneId = 0;
        tab._Param.verifyValue(sheetInfoImpl, "sheetInfoImpl");
        tab._Param.verifyValue(workbookImpl, "workbookImpl");
        tab._Param.verifyValue(messagingOptions, "messagingOptions");
        this.$name = sheetInfoImpl.name;
        this.$index = sheetInfoImpl.index;
        this.$isActive = sheetInfoImpl.isActive;
        this.$isHidden = sheetInfoImpl.isHidden;
        this.$sheetType = sheetInfoImpl.sheetType;
        this.$size = sheetInfoImpl.size;
        this.$url = sheetInfoImpl.url;
        this.$workbookImpl = workbookImpl;
        this.$messagingOptions = messagingOptions;
        this.$zoneId = sheetInfoImpl.zoneId;
      }, {
        get_sheet: null,
        get_name: function SheetImpl$get_Name() {
          return this.$name;
        },
        get_index: function SheetImpl$get_Index() {
          return this.$index;
        },
        get_workbookImpl: function SheetImpl$get_WorkbookImpl() {
          return this.$workbookImpl;
        },
        get_workbook: function SheetImpl$get_Workbook() {
          return this.$workbookImpl.get_workbook();
        },
        get_url: function SheetImpl$get_Url() {
          if (this.$isHidden) {
            throw tab._TableauException.createNoUrlForHiddenWorksheet();
          }
          return this.$url;
        },
        get_size: function SheetImpl$get_Size() {
          return this.$size;
        },
        get_isHidden: function SheetImpl$get_IsHidden() {
          return this.$isHidden;
        },
        get_isActive: function SheetImpl$get_IsActive() {
          return this.$isActive;
        },
        set_isActive: function SheetImpl$set_IsActive(value) {
          this.$isActive = value;
        },
        get_isDashboard: function SheetImpl$get_IsDashboard() {
          return this.$sheetType === "dashboard";
        },
        get_isStory: function SheetImpl$get_IsStory() {
          return this.$sheetType === "story";
        },
        get_sheetType: function SheetImpl$get_SheetType() {
          return this.$sheetType;
        },
        get_parentStoryPoint: function SheetImpl$get_ParentStoryPoint() {
          if (ss.isValue(this.$parentStoryPointImpl)) {
            return this.$parentStoryPointImpl.get_storyPoint();
          }
          return null;
        },
        get_parentStoryPointImpl: function SheetImpl$get_ParentStoryPointImpl() {
          return this.$parentStoryPointImpl;
        },
        set_parentStoryPointImpl: function SheetImpl$set_ParentStoryPointImpl(value) {
          if (this.$sheetType === "story") {
            throw tab._TableauException.createInternalError("A story cannot be a child of another story.");
          }
          this.$parentStoryPointImpl = value;
        },
        get_zoneId: function SheetImpl$get_ZoneId() {
          return this.$zoneId;
        },
        get_messagingOptions: function SheetImpl$get_MessagingOptions() {
          return this.$messagingOptions;
        },
        changeSizeAsync: function SheetImpl$ChangeSizeAsync(newSize) {
          newSize = $tab__SheetImpl.$normalizeSheetSize(newSize);
          if (this.$sheetType === "worksheet" && newSize.behavior !== "automatic") {
            throw tab._TableauException.createInvalidSizeBehaviorOnWorksheet();
          }
          var deferred = new tab._Deferred();
          if (this.$size.behavior === newSize.behavior && newSize.behavior === "automatic") {
            deferred.resolve(newSize);
            return deferred.get_promise();
          }
          var dict = this.$processSheetSize(newSize);
          var param = {};
          param["api.setSheetSizeName"] = this.$name;
          param["api.minWidth"] = dict["api.minWidth"];
          param["api.minHeight"] = dict["api.minHeight"];
          param["api.maxWidth"] = dict["api.maxWidth"];
          param["api.maxHeight"] = dict["api.maxHeight"];
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.SetSheetSizeCommand", 0, ss.mkdel(this, function(result) {
            this.get_workbookImpl()._update(ss.mkdel(this, function() {
              var updatedSize = this.get_workbookImpl().get_publishedSheets()._get(this.get_name()).getSize();
              deferred.resolve(updatedSize);
            }));
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, param, returnHandler);
          return deferred.get_promise();
        },
        sendCommand: function sendCommand(T) {
          return function SheetImpl$SendCommand(commandParameters, returnHandler) {
            this.$messagingOptions.sendCommand(T).call(this.$messagingOptions, commandParameters, returnHandler);
          };
        },
        $processSheetSize: function SheetImpl$ProcessSheetSize(newSize) {
          var fixedSheetSize = null;
          if (ss.isNullOrUndefined(newSize) || ss.isNullOrUndefined(newSize.behavior) || newSize.behavior !== "automatic" && ss.isNullOrUndefined(newSize.minSize) && ss.isNullOrUndefined(newSize.maxSize)) {
            throw tab._TableauException.createInvalidSheetSizeParam();
          }
          var minWidth = 0;
          var minHeight = 0;
          var maxWidth = 0;
          var maxHeight = 0;
          var dict = {};
          dict["api.minWidth"] = 0;
          dict["api.minHeight"] = 0;
          dict["api.maxWidth"] = 0;
          dict["api.maxHeight"] = 0;
          if (newSize.behavior === "automatic") {
            fixedSheetSize = tab.SheetSize.$ctor("automatic", void 0, void 0);
          } else if (newSize.behavior === "atmost") {
            if (ss.isNullOrUndefined(newSize.maxSize) || ss.isNullOrUndefined(newSize.maxSize.width) || ss.isNullOrUndefined(newSize.maxSize.height)) {
              throw tab._TableauException.createMissingMaxSize();
            }
            if (newSize.maxSize.width < 0 || newSize.maxSize.height < 0) {
              throw tab._TableauException.createInvalidSizeValue();
            }
            dict["api.maxWidth"] = newSize.maxSize.width;
            dict["api.maxHeight"] = newSize.maxSize.height;
            fixedSheetSize = tab.SheetSize.$ctor("atmost", void 0, newSize.maxSize);
          } else if (newSize.behavior === "atleast") {
            if (ss.isNullOrUndefined(newSize.minSize) || ss.isNullOrUndefined(newSize.minSize.width) || ss.isNullOrUndefined(newSize.minSize.height)) {
              throw tab._TableauException.createMissingMinSize();
            }
            if (newSize.minSize.width < 0 || newSize.minSize.height < 0) {
              throw tab._TableauException.createInvalidSizeValue();
            }
            dict["api.minWidth"] = newSize.minSize.width;
            dict["api.minHeight"] = newSize.minSize.height;
            fixedSheetSize = tab.SheetSize.$ctor("atleast", newSize.minSize, void 0);
          } else if (newSize.behavior === "range") {
            if (ss.isNullOrUndefined(newSize.minSize) || ss.isNullOrUndefined(newSize.maxSize) || ss.isNullOrUndefined(newSize.minSize.width) || ss.isNullOrUndefined(newSize.maxSize.width) || ss.isNullOrUndefined(newSize.minSize.height) || ss.isNullOrUndefined(newSize.maxSize.height)) {
              throw tab._TableauException.createMissingMinMaxSize();
            }
            if (newSize.minSize.width < 0 || newSize.minSize.height < 0 || newSize.maxSize.width < 0 || newSize.maxSize.height < 0 || newSize.minSize.width > newSize.maxSize.width || newSize.minSize.height > newSize.maxSize.height) {
              throw tab._TableauException.createInvalidRangeSize();
            }
            dict["api.minWidth"] = newSize.minSize.width;
            dict["api.minHeight"] = newSize.minSize.height;
            dict["api.maxWidth"] = newSize.maxSize.width;
            dict["api.maxHeight"] = newSize.maxSize.height;
            fixedSheetSize = tab.SheetSize.$ctor("range", newSize.minSize, newSize.maxSize);
          } else if (newSize.behavior === "exactly") {
            if (ss.isValue(newSize.minSize) && ss.isValue(newSize.maxSize) && ss.isValue(newSize.minSize.width) && ss.isValue(newSize.maxSize.width) && ss.isValue(newSize.minSize.height) && ss.isValue(newSize.maxSize.height)) {
              minWidth = newSize.minSize.width;
              minHeight = newSize.minSize.height;
              maxWidth = newSize.maxSize.width;
              maxHeight = newSize.maxSize.height;
              if (minWidth !== maxWidth || minHeight !== maxHeight) {
                throw tab._TableauException.createSizeConflictForExactly();
              }
            } else if (ss.isValue(newSize.minSize) && ss.isValue(newSize.minSize.width) && ss.isValue(newSize.minSize.height)) {
              minWidth = newSize.minSize.width;
              minHeight = newSize.minSize.height;
              maxWidth = minWidth;
              maxHeight = minHeight;
            } else if (ss.isValue(newSize.maxSize) && ss.isValue(newSize.maxSize.width) && ss.isValue(newSize.maxSize.height)) {
              maxWidth = newSize.maxSize.width;
              maxHeight = newSize.maxSize.height;
              minWidth = maxWidth;
              minHeight = maxHeight;
            }
            dict["api.minWidth"] = minWidth;
            dict["api.minHeight"] = minHeight;
            dict["api.maxWidth"] = maxWidth;
            dict["api.maxHeight"] = maxHeight;
            fixedSheetSize = tab.SheetSize.$ctor("exactly", tab.Size.$ctor(minWidth, minHeight), tab.Size.$ctor(maxWidth, maxHeight));
          }
          this.$size = fixedSheetSize;
          return dict;
        }
      }, {
        $convertValueToIntIfValid: function SheetImpl$ConvertValueToIntIfValid(value) {
          if (ss.isValue(value)) {
            return tab._Utility.toInt(value);
          }
          return value;
        },
        $normalizeSheetSize: function SheetImpl$NormalizeSheetSize(size) {
          var behavior = tab.PublicEnums.normalizeEnum(tab.ApiSheetSizeBehavior).call(null, size.behavior, "size.behavior");
          var minSize = size.minSize;
          if (ss.isValue(minSize)) {
            minSize = tab.Size.$ctor($tab__SheetImpl.$convertValueToIntIfValid(size.minSize.width), $tab__SheetImpl.$convertValueToIntIfValid(size.minSize.height));
          }
          var maxSize = size.maxSize;
          if (ss.isValue(maxSize)) {
            maxSize = tab.Size.$ctor($tab__SheetImpl.$convertValueToIntIfValid(size.maxSize.width), $tab__SheetImpl.$convertValueToIntIfValid(size.maxSize.height));
          }
          return tab.SheetSize.$ctor(behavior, minSize, maxSize);
        }
      });
      var $tab__SheetInfoImpl = global2.tab._SheetInfoImpl = ss.mkType($asm, "tab._SheetInfoImpl", null, null, {
        $ctor: function $ctor(name, sheetType, index, size, workbook, url, isActive, isHidden, zoneId) {
          var $this = new Object();
          $this.name = null;
          $this.index = 0;
          $this.workbook = null;
          $this.url = null;
          $this.isHidden = false;
          $this.sheetType = null;
          $this.zoneId = 0;
          $this.size = null;
          $this.isActive = false;
          $this.name = name;
          $this.sheetType = sheetType;
          $this.index = index;
          $this.size = size;
          $this.workbook = workbook;
          $this.url = url;
          $this.isActive = isActive;
          $this.isHidden = isHidden;
          $this.zoneId = zoneId;
          return $this;
        },
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tab__StoryImpl = global2.tab._StoryImpl = ss.mkType($asm, "tab._StoryImpl", function(sheetInfoImpl, workbookImpl, messagingOptions, storyPm, findSheetFunc) {
        this.$activeStoryPointImpl = null;
        this.$findSheetFunc = null;
        this.$story = null;
        this.$storyPointsInfo = null;
        this.$2$ActiveStoryPointChangeField = null;
        $tab__SheetImpl.call(this, sheetInfoImpl, workbookImpl, messagingOptions);
        tab._Param.verifyValue(storyPm, "storyPm");
        tab._Param.verifyValue(findSheetFunc, "findSheetFunc");
        this.$findSheetFunc = findSheetFunc;
        this.update(storyPm);
      }, {
        add_activeStoryPointChange: function StoryImpl$add_ActiveStoryPointChange(value) {
          this.$2$ActiveStoryPointChangeField = ss.delegateCombine(this.$2$ActiveStoryPointChangeField, value);
        },
        remove_activeStoryPointChange: function StoryImpl$remove_ActiveStoryPointChange(value) {
          this.$2$ActiveStoryPointChangeField = ss.delegateRemove(this.$2$ActiveStoryPointChangeField, value);
        },
        get_activeStoryPointImpl: function StoryImpl$get_ActiveStoryPointImpl() {
          return this.$activeStoryPointImpl;
        },
        get_sheet: function StoryImpl$get_Sheet() {
          return this.get_story();
        },
        get_story: function StoryImpl$get_Story() {
          if (ss.isNullOrUndefined(this.$story)) {
            this.$story = new $tableauSoftware_Story(this);
          }
          return this.$story;
        },
        get_storyPointsInfo: function StoryImpl$get_StoryPointsInfo() {
          return this.$storyPointsInfo;
        },
        update: function StoryImpl$Update(storyPm) {
          var activeStoryPointContainedSheetInfo = null;
          var newActiveStoryPointInfoImpl = null;
          this.$storyPointsInfo = this.$storyPointsInfo || new Array(storyPm.storyPoints.length);
          for (var i = 0; i < storyPm.storyPoints.length; i++) {
            var storyPointPm = storyPm.storyPoints[i];
            var caption = storyPointPm.caption;
            var isActive = i === storyPm.activeStoryPointIndex;
            var storyPointInfoImpl = $tab__StoryPointInfoImpl.$ctor(caption, i, storyPointPm.storyPointId, isActive, storyPointPm.isUpdated, this);
            if (ss.isNullOrUndefined(this.$storyPointsInfo[i])) {
              this.$storyPointsInfo[i] = new $tableauSoftware_StoryPointInfo(storyPointInfoImpl);
            } else if (this.$storyPointsInfo[i]._impl.storyPointId === storyPointInfoImpl.storyPointId) {
              var existing = this.$storyPointsInfo[i]._impl;
              existing.caption = storyPointInfoImpl.caption;
              existing.index = storyPointInfoImpl.index;
              existing.isActive = isActive;
              existing.isUpdated = storyPointInfoImpl.isUpdated;
            } else {
              this.$storyPointsInfo[i] = new $tableauSoftware_StoryPointInfo(storyPointInfoImpl);
            }
            if (isActive) {
              activeStoryPointContainedSheetInfo = storyPointPm.containedSheetInfo;
              newActiveStoryPointInfoImpl = storyPointInfoImpl;
            }
          }
          var deleteCount = this.$storyPointsInfo.length - storyPm.storyPoints.length;
          this.$storyPointsInfo.splice(storyPm.storyPoints.length, deleteCount);
          var activeStoryPointChanged = ss.isNullOrUndefined(this.$activeStoryPointImpl) || this.$activeStoryPointImpl.get_storyPointId() !== newActiveStoryPointInfoImpl.storyPointId;
          if (ss.isValue(this.$activeStoryPointImpl) && activeStoryPointChanged) {
            this.$activeStoryPointImpl.set_isActive(false);
          }
          var previouslyActiveStoryPoint = this.$activeStoryPointImpl;
          if (activeStoryPointChanged) {
            var containedSheetImpl = $tab__StoryPointImpl.createContainedSheet(activeStoryPointContainedSheetInfo, this.get_workbookImpl(), this.get_messagingOptions(), this.$findSheetFunc);
            this.$activeStoryPointImpl = new $tab__StoryPointImpl(newActiveStoryPointInfoImpl, containedSheetImpl);
          } else {
            this.$activeStoryPointImpl.set_isActive(newActiveStoryPointInfoImpl.isActive);
            this.$activeStoryPointImpl.set_isUpdated(newActiveStoryPointInfoImpl.isUpdated);
          }
          if (activeStoryPointChanged && ss.isValue(previouslyActiveStoryPoint)) {
            this.$raiseActiveStoryPointChange(this.$storyPointsInfo[previouslyActiveStoryPoint.get_index()], this.$activeStoryPointImpl.get_storyPoint());
          }
        },
        activatePreviousStoryPointAsync: function StoryImpl$ActivatePreviousStoryPointAsync() {
          return this.$activatePreviousNextStoryPointAsync("api.ActivatePreviousStoryPoint");
        },
        activateNextStoryPointAsync: function StoryImpl$ActivateNextStoryPointAsync() {
          return this.$activatePreviousNextStoryPointAsync("api.ActivateNextStoryPoint");
        },
        activateStoryPointAsync: function StoryImpl$ActivateStoryPointAsync(index) {
          var deferred = new tab._Deferred();
          if (index < 0 || index >= this.$storyPointsInfo.length) {
            throw tab._TableauException.createIndexOutOfRange(index);
          }
          var commandParameters = {};
          commandParameters["api.storyPointIndex"] = index;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.ActivateStoryPoint", 0, ss.mkdel(this, function(result) {
            this.$updateActiveState(result);
            deferred.resolve(this.$activeStoryPointImpl.get_storyPoint());
          }), function(remoteError, errorMessage) {
            deferred.reject(tab._TableauException.createServerError(errorMessage));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        revertStoryPointAsync: function StoryImpl$RevertStoryPointAsync(index) {
          index = index || this.$activeStoryPointImpl.get_index();
          if (index < 0 || index >= this.$storyPointsInfo.length) {
            throw tab._TableauException.createIndexOutOfRange(index);
          }
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.storyPointIndex"] = index;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.RevertStoryPoint", 0, ss.mkdel(this, function(result) {
            this.$updateStoryPointInfo(index, result);
            deferred.resolve(this.$storyPointsInfo[index]);
          }), function(remoteError, errorMessage) {
            deferred.reject(tab._TableauException.createServerError(errorMessage));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $activatePreviousNextStoryPointAsync: function StoryImpl$ActivatePreviousNextStoryPointAsync(commandName) {
          if (commandName !== "api.ActivatePreviousStoryPoint" && commandName !== "api.ActivateNextStoryPoint") {
            throw tab._TableauException.createInternalError("commandName '" + commandName + "' is invalid.");
          }
          var deferred = new tab._Deferred();
          var commandParameters = {};
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))(commandName, 0, ss.mkdel(this, function(result) {
            this.$updateActiveState(result);
            deferred.resolve(this.$activeStoryPointImpl.get_storyPoint());
          }), function(remoteError, errorMessage) {
            deferred.reject(tab._TableauException.createServerError(errorMessage));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $updateStoryPointInfo: function StoryImpl$UpdateStoryPointInfo(index, newStoryPointPm) {
          var existingImpl = this.$storyPointsInfo[index]._impl;
          if (existingImpl.storyPointId !== newStoryPointPm.storyPointId) {
            throw tab._TableauException.createInternalError("We should not be updating a story point where the IDs don't match. Existing storyPointID=" + existingImpl.storyPointId + ", newStoryPointID=" + newStoryPointPm.storyPointId);
          }
          existingImpl.caption = newStoryPointPm.caption;
          existingImpl.isUpdated = newStoryPointPm.isUpdated;
          if (newStoryPointPm.storyPointId === this.$activeStoryPointImpl.get_storyPointId()) {
            this.$activeStoryPointImpl.set_isUpdated(newStoryPointPm.isUpdated);
          }
        },
        $updateActiveState: function StoryImpl$UpdateActiveState(newActiveStoryPointPm) {
          var previouslyActiveStoryPointImpl = this.$activeStoryPointImpl;
          var newActiveIndex = newActiveStoryPointPm.index;
          if (previouslyActiveStoryPointImpl.get_index() === newActiveIndex) {
            return;
          }
          var oldStoryPointInfo = this.$storyPointsInfo[previouslyActiveStoryPointImpl.get_index()];
          var newStoryPointInfoImpl = this.$storyPointsInfo[newActiveIndex]._impl;
          var containedSheetImpl = $tab__StoryPointImpl.createContainedSheet(newActiveStoryPointPm.containedSheetInfo, this.get_workbookImpl(), this.get_messagingOptions(), this.$findSheetFunc);
          newStoryPointInfoImpl.isActive = true;
          this.$activeStoryPointImpl = new $tab__StoryPointImpl(newStoryPointInfoImpl, containedSheetImpl);
          previouslyActiveStoryPointImpl.set_isActive(false);
          oldStoryPointInfo._impl.isActive = false;
          this.$raiseActiveStoryPointChange(oldStoryPointInfo, this.$activeStoryPointImpl.get_storyPoint());
        },
        $raiseActiveStoryPointChange: function StoryImpl$RaiseActiveStoryPointChange(oldStoryPointInfo, newStoryPoint) {
          if (!ss.staticEquals(this.$2$ActiveStoryPointChangeField, null)) {
            this.$2$ActiveStoryPointChangeField(oldStoryPointInfo, newStoryPoint);
          }
        }
      });
      var $tab__StoryPointImpl = global2.tab._StoryPointImpl = ss.mkType($asm, "tab._StoryPointImpl", function(storyPointInfoImpl, containedSheetImpl) {
        this.$caption = null;
        this.$index = 0;
        this.$isActive = false;
        this.$isUpdated = false;
        this.$containedSheetImpl = null;
        this.$parentStoryImpl = null;
        this.$storyPoint = null;
        this.$storyPointId = 0;
        this.$isActive = storyPointInfoImpl.isActive;
        this.$isUpdated = storyPointInfoImpl.isUpdated;
        this.$caption = storyPointInfoImpl.caption;
        this.$index = storyPointInfoImpl.index;
        this.$parentStoryImpl = storyPointInfoImpl.parentStoryImpl;
        this.$storyPointId = storyPointInfoImpl.storyPointId;
        this.$containedSheetImpl = containedSheetImpl;
        if (ss.isValue(containedSheetImpl)) {
          this.$containedSheetImpl.set_parentStoryPointImpl(this);
          if (containedSheetImpl.get_sheetType() === "dashboard") {
            var containedDashboardImpl = ss.cast(this.$containedSheetImpl, $tab__DashboardImpl);
            for (var i = 0; i < containedDashboardImpl.get_worksheets().get__length(); i++) {
              var worksheet = containedDashboardImpl.get_worksheets().get_item(i);
              worksheet._impl.set_parentStoryPointImpl(this);
            }
          }
        }
      }, {
        get_caption: function StoryPointImpl$get_Caption() {
          return this.$caption;
        },
        get_containedSheetImpl: function StoryPointImpl$get_ContainedSheetImpl() {
          return this.$containedSheetImpl;
        },
        get_index: function StoryPointImpl$get_Index() {
          return this.$index;
        },
        get_isActive: function StoryPointImpl$get_IsActive() {
          return this.$isActive;
        },
        set_isActive: function StoryPointImpl$set_IsActive(value) {
          this.$isActive = value;
        },
        get_isUpdated: function StoryPointImpl$get_IsUpdated() {
          return this.$isUpdated;
        },
        set_isUpdated: function StoryPointImpl$set_IsUpdated(value) {
          this.$isUpdated = value;
        },
        get_parentStoryImpl: function StoryPointImpl$get_ParentStoryImpl() {
          return this.$parentStoryImpl;
        },
        get_storyPoint: function StoryPointImpl$get_StoryPoint() {
          if (ss.isNullOrUndefined(this.$storyPoint)) {
            this.$storyPoint = new $tableauSoftware_StoryPoint(this);
          }
          return this.$storyPoint;
        },
        get_storyPointId: function StoryPointImpl$get_StoryPointId() {
          return this.$storyPointId;
        },
        $toInfoImpl: function StoryPointImpl$ToInfoImpl() {
          return $tab__StoryPointInfoImpl.$ctor(this.$caption, this.$index, this.$storyPointId, this.$isActive, this.$isUpdated, this.$parentStoryImpl);
        }
      }, {
        createContainedSheet: function StoryPointImpl$CreateContainedSheet(containedSheetInfo, workbookImpl, messagingOptions, findSheetFunc) {
          if (ss.isNullOrUndefined(containedSheetInfo) || ss.isNullOrUndefined(containedSheetInfo.name)) {
            return null;
          }
          var containedSheetType = tab.ApiEnumConverter.convertSheetType(containedSheetInfo.sheetType);
          var index = -1;
          var size = tab.SheetSizeFactory.createAutomatic();
          var isActive = false;
          var publishedSheetInfo = findSheetFunc(containedSheetInfo.name);
          var isHidden = ss.isNullOrUndefined(publishedSheetInfo);
          var url = isHidden ? "" : publishedSheetInfo.getUrl();
          var sheetInfoImpl = $tab__SheetInfoImpl.$ctor(containedSheetInfo.name, containedSheetType, index, size, workbookImpl.get_workbook(), url, isActive, isHidden, containedSheetInfo.zoneId);
          if (containedSheetInfo.sheetType === "worksheet") {
            var parentDashboardImpl = null;
            var worksheetImpl = new $tab__WorksheetImpl(sheetInfoImpl, workbookImpl, messagingOptions, parentDashboardImpl);
            return worksheetImpl;
          } else if (containedSheetInfo.sheetType === "dashboard") {
            var dashboardImpl = new $tab__DashboardImpl(sheetInfoImpl, workbookImpl, messagingOptions);
            var dashboardZones = $tab__WorkbookImpl.$createDashboardZones(containedSheetInfo.dashboardZones);
            dashboardImpl.$addObjects(dashboardZones, findSheetFunc);
            return dashboardImpl;
          } else if (containedSheetInfo.sheetType === "story") {
            throw tab._TableauException.createInternalError("Cannot have a story embedded within another story.");
          } else {
            throw tab._TableauException.createInternalError("Unknown sheet type '" + containedSheetInfo.sheetType + "'");
          }
        }
      });
      var $tab__StoryPointInfoImpl = global2.tab._StoryPointInfoImpl = ss.mkType($asm, "tab._StoryPointInfoImpl", null, null, {
        $ctor: function $ctor(caption, index, storyPointId, isActive, isUpdated, parentStoryImpl) {
          var $this = new Object();
          $this.storyPointId = 0;
          $this.parentStoryImpl = null;
          $this.caption = null;
          $this.index = 0;
          $this.isActive = false;
          $this.isUpdated = false;
          $this.caption = caption;
          $this.index = index;
          $this.storyPointId = storyPointId;
          $this.isActive = isActive;
          $this.isUpdated = isUpdated;
          $this.parentStoryImpl = parentStoryImpl;
          return $this;
        },
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tab__ToolbarStateImpl = global2.tab._ToolbarStateImpl = ss.mkType($asm, "tab._ToolbarStateImpl", function(vizImpl, toolbarStatePresModel) {
        this.$toolbarState = null;
        this.$vizImpl = null;
        this.$toolbarStatePresModel = null;
        this.$vizImpl = vizImpl;
        this.$toolbarStatePresModel = toolbarStatePresModel;
      }, {
        get_toolbarState: function ToolbarStateImpl$get_ToolbarState() {
          if (ss.isNullOrUndefined(this.$toolbarState)) {
            this.$toolbarState = new $tableauSoftware_ToolbarState(this);
          }
          return this.$toolbarState;
        },
        get_viz: function ToolbarStateImpl$get_Viz() {
          return this.$vizImpl.get_$viz();
        },
        isButtonEnabled: function ToolbarStateImpl$IsButtonEnabled(toolbarButtonName) {
          switch (toolbarButtonName) {
            case "redo": {
              return this.$toolbarStatePresModel.canRedo;
            }
            case "undo": {
              return this.$toolbarStatePresModel.canUndo;
            }
            default: {
              throw tab._TableauException.createInvalidToolbarButtonName(toolbarButtonName);
            }
          }
        }
      });
      var $tab__VizManagerImpl = ss.mkType($asm, "tab._VizManagerImpl", null, null, {
        get_$clonedVizs: function VizManagerImpl$get_ClonedVizs() {
          return $tab__VizManagerImpl.$vizs.concat();
        },
        $registerViz: function VizManagerImpl$RegisterViz(viz) {
          $tab__VizManagerImpl.$verifyVizNotAlreadyParented(viz);
          $tab__VizManagerImpl.$vizs.push(viz);
        },
        $unregisterViz: function VizManagerImpl$UnregisterViz(viz) {
          for (var i = 0, len = $tab__VizManagerImpl.$vizs.length; i < len; i++) {
            if (ss.referenceEquals($tab__VizManagerImpl.$vizs[i], viz)) {
              $tab__VizManagerImpl.$vizs.splice(i, 1);
              break;
            }
          }
        },
        $sendVisibleRects: function VizManagerImpl$SendVisibleRects() {
          for (var i = 0, len = $tab__VizManagerImpl.$vizs.length; i < len; i++) {
            $tab__VizManagerImpl.$vizs[i]._impl.$sendVisibleRect();
          }
        },
        $verifyVizNotAlreadyParented: function VizManagerImpl$VerifyVizNotAlreadyParented(viz) {
          var parent = viz.getParentElement();
          for (var i = 0, len = $tab__VizManagerImpl.$vizs.length; i < len; i++) {
            if (ss.referenceEquals($tab__VizManagerImpl.$vizs[i].getParentElement(), parent)) {
              var message = "Another viz is already present in element '" + tab._Utility.elementToString(parent) + "'.";
              throw tab._TableauException.create("vizAlreadyInManager", message);
            }
          }
        }
      });
      var $tab__VizParameters = global2.tab._VizParameters = ss.mkType($asm, "tab._VizParameters", function(element, url, options) {
        this.name = "";
        this.host_url = null;
        this.tabs = false;
        this.toolbar = false;
        this.toolBarPosition = null;
        this.device = null;
        this.hostId = null;
        this.width = null;
        this.height = null;
        this.parentElement = null;
        this.userSuppliedParameters = null;
        this.staticImageUrl = null;
        this.fixedSize = false;
        this.displayStaticImage = false;
        this.$urlFromApi = null;
        this.$createOptions = null;
        this.$disableUrlActionsPopups = false;
        if (ss.isNullOrUndefined(element) || ss.isNullOrUndefined(url)) {
          throw tab._TableauException.create("noUrlOrParentElementNotFound", "URL is empty or Parent element not found");
        }
        if (ss.isNullOrUndefined(options)) {
          options = new Object();
          options.hideTabs = false;
          options.hideToolbar = false;
          options.onFirstInteractive = null;
        }
        if (ss.isValue(options.height) || ss.isValue(options.width)) {
          this.fixedSize = true;
          if (tab._Utility.isNumber(options.height)) {
            options.height = options.height.toString() + "px";
          }
          if (tab._Utility.isNumber(options.width)) {
            options.width = options.width.toString() + "px";
          }
          this.height = ss.isValue(options.height) ? tab._Utility.roundVizSizeInPixels(options.height.toString()) : null;
          this.width = ss.isValue(options.width) ? tab._Utility.roundVizSizeInPixels(options.width.toString()) : null;
        } else {
          this.fixedSize = false;
        }
        this.displayStaticImage = options.displayStaticImage || false;
        this.staticImageUrl = options.staticImageUrl || "";
        this.tabs = !(options.hideTabs || false);
        this.toolbar = !(options.hideToolbar || false);
        this.device = options.device;
        this.parentElement = element;
        this.$createOptions = options;
        this.toolBarPosition = options.toolbarPosition;
        this.$disableUrlActionsPopups = options.disableUrlActionsPopups === true;
        var urlParts = url.split("?");
        this.$urlFromApi = urlParts[0];
        if (urlParts.length === 2) {
          this.userSuppliedParameters = urlParts[1];
        } else {
          this.userSuppliedParameters = "";
        }
        var r = new RegExp(".*?[^/:]/", "").exec(this.$urlFromApi);
        if (ss.isNullOrUndefined(r) || r[0].toLowerCase().indexOf("http://") === -1 && r[0].toLowerCase().indexOf("https://") === -1) {
          throw tab._TableauException.create("invalidUrl", "Invalid url");
        }
        this.host_url = r[0].toLowerCase();
        this.name = this.$urlFromApi.replace(r[0], "");
        this.name = this.name.replace("views/", "");
      }, {
        get_url: function VizParameters$get_Url() {
          return this.$constructUrl();
        },
        get_baseUrl: function VizParameters$get_BaseUrl() {
          return this.$urlFromApi;
        },
        $constructUrl: function VizParameters$ConstructUrl() {
          var url = [];
          url.push(this.get_baseUrl());
          url.push("?");
          if (this.userSuppliedParameters.length > 0) {
            url.push(this.userSuppliedParameters);
            url.push("&");
          }
          var addClientDimensionForDsd = !this.fixedSize && !(this.userSuppliedParameters.indexOf(":size=") !== -1) && this.parentElement.clientWidth * this.parentElement.clientHeight > 0;
          if (addClientDimensionForDsd) {
            url.push(":size=");
            url.push(this.parentElement.clientWidth + "," + this.parentElement.clientHeight);
            url.push("&");
          }
          if (!(this.userSuppliedParameters.indexOf(":embed=y") !== -1)) {
            url.push(":embed=y");
          }
          url.push("&:showVizHome=n");
          url.push("&:jsdebug=y");
          if (!this.fixedSize) {
            url.push("&:bootstrapWhenNotified=y");
          }
          if (!this.tabs) {
            url.push("&:tabs=n");
          }
          if (this.displayStaticImage) {
            url.push("&:display_static_image=y");
          }
          if (this.$disableUrlActionsPopups) {
            url.push("&:disableUrlActionsPopups=y");
          }
          if (!this.toolbar) {
            url.push("&:toolbar=n");
          } else if (!ss.isNullOrUndefined(this.toolBarPosition)) {
            url.push("&:toolbar=");
            url.push(this.toolBarPosition.toString());
          }
          if (ss.isValue(this.device)) {
            url.push("&:device=");
            url.push(this.device.toString());
          }
          var userOptions = this.$createOptions;
          var $t1 = new ss.ObjectEnumerator(userOptions);
          try {
            while ($t1.moveNext()) {
              var entry = $t1.current();
              if (entry.key !== "embed" && entry.key !== "height" && entry.key !== "width" && entry.key !== "device" && entry.key !== "autoSize" && entry.key !== "hideTabs" && entry.key !== "hideToolbar" && entry.key !== "onFirstInteractive" && entry.key !== "onFirstVizSizeKnown" && entry.key !== "toolbarPosition" && entry.key !== "instanceIdToClone" && entry.key !== "navType" && entry.key !== "display_static_image" && entry.key !== "disableUrlActionsPopups") {
                url.push("&");
                url.push(encodeURIComponent(entry.key));
                url.push("=");
                url.push(encodeURIComponent(entry.value.toString()));
              }
            }
          } finally {
            $t1.dispose();
          }
          url.push("&:apiID=" + this.hostId);
          url.push("#");
          if (ss.isValue(this.$createOptions.instanceIdToClone)) {
            url.push(this.$createOptions.instanceIdToClone + "&");
          }
          if (ss.isValue(this.$createOptions.navType) && this.$createOptions.navType.length > 0) {
            url.push("navType=" + this.$createOptions.navType.toString() + "&");
            url.push("navSrc=" + "Opt".toString());
          } else {
            if (window.performance && window.performance.navigation && window.performance.navigation.type) {
              url.push("navType=" + window.performance.navigation.type.toString() + "&");
            }
            url.push("navSrc=" + "Parse".toString());
          }
          return url.join("");
        }
      });
      var $tab__WorkbookImpl = global2.tab._WorkbookImpl = ss.mkType($asm, "tab._WorkbookImpl", function(vizImpl, messagingOptions, callback) {
        this.$workbook = null;
        this.$vizImpl = null;
        this.$name = null;
        this.$activeSheetImpl = null;
        this.$activatingHiddenSheetImpl = null;
        this.$publishedSheetsInfo = new tab._Collection();
        this.$isDownloadAllowed = false;
        this.$messagingOptions = null;
        this.$currentCustomView = null;
        this.$customViews = new tab._Collection();
        this.$updatedCustomViews = new tab._Collection();
        this.$removedCustomViews = new tab._Collection();
        this.$parameters = null;
        this.$lastChangedParameterImpl = null;
        this.$vizImpl = vizImpl;
        this.$messagingOptions = messagingOptions;
        this.$getClientInfo(callback);
      }, {
        get_workbook: function WorkbookImpl$get_Workbook() {
          if (ss.isNullOrUndefined(this.$workbook)) {
            this.$workbook = new $tableauSoftware_Workbook(this);
          }
          return this.$workbook;
        },
        get_viz: function WorkbookImpl$get_Viz() {
          return this.$vizImpl.get_$viz();
        },
        get_publishedSheets: function WorkbookImpl$get_PublishedSheets() {
          return this.$publishedSheetsInfo;
        },
        get_name: function WorkbookImpl$get_Name() {
          return this.$name;
        },
        get_activeSheetImpl: function WorkbookImpl$get_ActiveSheetImpl() {
          return this.$activeSheetImpl;
        },
        get_activeCustomView: function WorkbookImpl$get_ActiveCustomView() {
          return this.$currentCustomView;
        },
        get_isDownloadAllowed: function WorkbookImpl$get_IsDownloadAllowed() {
          return this.$isDownloadAllowed;
        },
        $findActiveSheetOrSheetWithinActiveDashboard: function WorkbookImpl$FindActiveSheetOrSheetWithinActiveDashboard(sheetOrInfoOrName) {
          if (ss.isNullOrUndefined(this.$activeSheetImpl)) {
            return null;
          }
          var sheetName = $tab__WorkbookImpl.$extractSheetName(sheetOrInfoOrName);
          if (ss.isNullOrUndefined(sheetName)) {
            return null;
          }
          if (ss.referenceEquals(sheetName, this.$activeSheetImpl.get_name())) {
            return this.$activeSheetImpl;
          }
          if (this.$activeSheetImpl.get_isDashboard()) {
            var dashboardImpl = ss.cast(this.$activeSheetImpl, $tab__DashboardImpl);
            var sheet = dashboardImpl.get_worksheets()._get(sheetName);
            if (ss.isValue(sheet)) {
              return sheet._impl;
            }
          }
          return null;
        },
        _setActiveSheetAsync: function WorkbookImpl$ActivateSheetAsync(sheetNameOrInfoOrIndex) {
          if (tab._Utility.isNumber(sheetNameOrInfoOrIndex)) {
            var index = sheetNameOrInfoOrIndex;
            if (index < this.$publishedSheetsInfo.get__length() && index >= 0) {
              return this.$activateSheetWithInfoAsync(this.$publishedSheetsInfo.get_item(index).$impl);
            } else {
              throw tab._TableauException.createIndexOutOfRange(index);
            }
          }
          var sheetName = $tab__WorkbookImpl.$extractSheetName(sheetNameOrInfoOrIndex);
          var sheetInfo = this.$publishedSheetsInfo._get(sheetName);
          if (ss.isValue(sheetInfo)) {
            return this.$activateSheetWithInfoAsync(sheetInfo.$impl);
          } else if (this.$activeSheetImpl.get_isDashboard()) {
            var d = ss.cast(this.$activeSheetImpl, $tab__DashboardImpl);
            var sheet = d.get_worksheets()._get(sheetName);
            if (ss.isValue(sheet)) {
              this.$activatingHiddenSheetImpl = null;
              var sheetUrl = "";
              if (sheet.getIsHidden()) {
                this.$activatingHiddenSheetImpl = sheet._impl;
              } else {
                sheetUrl = sheet._impl.get_url();
              }
              return this.$activateSheetInternalAsync(sheet._impl.get_name(), sheetUrl);
            }
          }
          throw tab._TableauException.create("sheetNotInWorkbook", "Sheet is not found in Workbook");
        },
        _revertAllAsync: function WorkbookImpl$RevertAllAsync() {
          var deferred = new tab._Deferred();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.RevertAllCommand", 1, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.$sendCommand(Object).call(this, null, returnHandler);
          return deferred.get_promise();
        },
        _update: function WorkbookImpl$Update(callback) {
          this.$getClientInfo(callback);
        },
        $activateSheetWithInfoAsync: function WorkbookImpl$ActivateSheetWithInfoAsync(sheetInfoImpl) {
          return this.$activateSheetInternalAsync(sheetInfoImpl.name, sheetInfoImpl.url);
        },
        $activateSheetInternalAsync: function WorkbookImpl$ActivateSheetInternalAsync(sheetName, sheetUrl) {
          var deferred = new tab._Deferred();
          if (ss.isValue(this.$activeSheetImpl) && ss.referenceEquals(sheetName, this.$activeSheetImpl.get_name())) {
            deferred.resolve(this.$activeSheetImpl.get_sheet());
            return deferred.get_promise();
          }
          var param = {};
          param["api.switchToSheetName"] = sheetName;
          param["api.switchToRepositoryUrl"] = sheetUrl;
          param["api.oldRepositoryUrl"] = this.$activeSheetImpl.get_url();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.SwitchActiveSheetCommand", 0, ss.mkdel(this, function(result) {
            this.$vizImpl.$workbookTabSwitchHandler = ss.mkdel(this, function() {
              this.$vizImpl.$workbookTabSwitchHandler = null;
              deferred.resolve(this.$activeSheetImpl.get_sheet());
            });
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.$sendCommand(Object).call(this, param, returnHandler);
          return deferred.get_promise();
        },
        _updateActiveSheetAsync: function WorkbookImpl$UpdateActiveSheetAsync() {
          var deferred = new tab._Deferred();
          var param = {};
          param["api.switchToSheetName"] = this.$activeSheetImpl.get_name();
          param["api.switchToRepositoryUrl"] = this.$activeSheetImpl.get_url();
          param["api.oldRepositoryUrl"] = this.$activeSheetImpl.get_url();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.UpdateActiveSheetCommand", 0, ss.mkdel(this, function(result) {
            deferred.resolve(this.$activeSheetImpl.get_sheet());
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.$sendCommand(Object).call(this, param, returnHandler);
          return deferred.get_promise();
        },
        $sendCommand: function $sendCommand(T) {
          return function WorkbookImpl$SendCommand(commandParameters, returnHandler) {
            this.$messagingOptions.sendCommand(T).call(this.$messagingOptions, commandParameters, returnHandler);
          };
        },
        $getClientInfo: function WorkbookImpl$GetClientInfo(callback) {
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.GetClientInfoCommand", 0, ss.mkdel(this, function(result) {
            this.$processInfo(result);
            if (ss.isValue(callback)) {
              callback();
            }
          }), function(remoteError, message) {
            throw tab._TableauException.createInternalError(message);
          });
          this.$sendCommand(Object).call(this, null, returnHandler);
        },
        $processInfo: function WorkbookImpl$ProcessInfo(clientInfo) {
          this.$name = clientInfo.workbookName;
          this.$isDownloadAllowed = clientInfo.isDownloadAllowed;
          this.$vizImpl.$setAreAutomaticUpdatesPaused(!clientInfo.isAutoUpdate);
          this.$vizImpl.set_instanceId(clientInfo.instanceId);
          this.$createSheetsInfo(clientInfo);
          this.$initializeActiveSheet(clientInfo);
        },
        $initializeActiveSheet: function WorkbookImpl$InitializeActiveSheet(clientInfo) {
          var currentSheetName = clientInfo.currentSheetName;
          var newActiveSheetInfo = this.$publishedSheetsInfo._get(currentSheetName);
          if (ss.isNullOrUndefined(newActiveSheetInfo) && ss.isNullOrUndefined(this.$activatingHiddenSheetImpl)) {
            throw tab._TableauException.createInternalError("The active sheet was not specified in baseSheets");
          }
          if (ss.isValue(this.$activeSheetImpl) && ss.referenceEquals(this.$activeSheetImpl.get_name(), currentSheetName)) {
            return;
          }
          if (ss.isValue(this.$activeSheetImpl)) {
            this.$activeSheetImpl.set_isActive(false);
            var oldActiveSheetInfo = this.$publishedSheetsInfo._get(this.$activeSheetImpl.get_name());
            if (ss.isValue(oldActiveSheetInfo)) {
              oldActiveSheetInfo.$impl.isActive = false;
            }
            if (this.$activeSheetImpl.get_sheetType() === "story") {
              var storyImpl = ss.cast(this.$activeSheetImpl, $tab__StoryImpl);
              storyImpl.remove_activeStoryPointChange(ss.mkdel(this.$vizImpl, this.$vizImpl.raiseStoryPointSwitch));
            }
          }
          if (ss.isValue(this.$activatingHiddenSheetImpl)) {
            var infoImpl = $tab__SheetInfoImpl.$ctor(this.$activatingHiddenSheetImpl.get_name(), "worksheet", -1, this.$activatingHiddenSheetImpl.get_size(), this.get_workbook(), "", true, true, $tab__SheetImpl.noZoneId);
            this.$activatingHiddenSheetImpl = null;
            this.$activeSheetImpl = new $tab__WorksheetImpl(infoImpl, this, this.$messagingOptions, null);
          } else {
            var baseSheet = null;
            for (var i = 0, len = clientInfo.publishedSheets.length; i < len; i++) {
              if (ss.referenceEquals(clientInfo.publishedSheets[i].name, currentSheetName)) {
                baseSheet = clientInfo.publishedSheets[i];
                break;
              }
            }
            if (ss.isNullOrUndefined(baseSheet)) {
              throw tab._TableauException.createInternalError("No base sheet was found corresponding to the active sheet.");
            }
            var findSheetFunc = ss.mkdel(this, function(sheetName) {
              return this.$publishedSheetsInfo._get(sheetName);
            });
            if (baseSheet.sheetType === "dashboard") {
              var dashboardImpl = new $tab__DashboardImpl(newActiveSheetInfo.$impl, this, this.$messagingOptions);
              this.$activeSheetImpl = dashboardImpl;
              var dashboardFrames = $tab__WorkbookImpl.$createDashboardZones(clientInfo.dashboardZones);
              dashboardImpl.$addObjects(dashboardFrames, findSheetFunc);
            } else if (baseSheet.sheetType === "story") {
              var storyImpl1 = new $tab__StoryImpl(newActiveSheetInfo.$impl, this, this.$messagingOptions, clientInfo.story, findSheetFunc);
              this.$activeSheetImpl = storyImpl1;
              storyImpl1.add_activeStoryPointChange(ss.mkdel(this.$vizImpl, this.$vizImpl.raiseStoryPointSwitch));
            } else {
              this.$activeSheetImpl = new $tab__WorksheetImpl(newActiveSheetInfo.$impl, this, this.$messagingOptions, null);
            }
            newActiveSheetInfo.$impl.isActive = true;
          }
          this.$activeSheetImpl.set_isActive(true);
        },
        $createSheetsInfo: function WorkbookImpl$CreateSheetsInfo(clientInfo) {
          var baseSheets = clientInfo.publishedSheets;
          if (ss.isNullOrUndefined(baseSheets)) {
            return;
          }
          for (var index = 0; index < baseSheets.length; index++) {
            var baseSheet = baseSheets[index];
            var sheetName = baseSheet.name;
            var sheetInfo = this.$publishedSheetsInfo._get(sheetName);
            var size = $tab__WorkbookImpl.$createSheetSize(baseSheet);
            if (ss.isNullOrUndefined(sheetInfo)) {
              var isActive = ss.referenceEquals(sheetName, clientInfo.currentSheetName);
              var sheetType = tab.ApiEnumConverter.convertSheetType(baseSheet.sheetType);
              var sheetInfoImpl = $tab__SheetInfoImpl.$ctor(sheetName, sheetType, index, size, this.get_workbook(), baseSheet.repositoryUrl, isActive, false, $tab__SheetImpl.noZoneId);
              sheetInfo = new $tableauSoftware_SheetInfo(sheetInfoImpl);
              this.$publishedSheetsInfo._add(sheetName, sheetInfo);
            } else {
              sheetInfo.$impl.size = size;
            }
          }
        },
        get_$customViews: function WorkbookImpl$get_CustomViews() {
          return this.$customViews;
        },
        set_$customViews: function WorkbookImpl$set_CustomViews(value) {
          this.$customViews = value;
        },
        get_$updatedCustomViews: function WorkbookImpl$get_UpdatedCustomViews() {
          return this.$updatedCustomViews;
        },
        set_$updatedCustomViews: function WorkbookImpl$set_UpdatedCustomViews(value) {
          this.$updatedCustomViews = value;
        },
        get_$removedCustomViews: function WorkbookImpl$get_RemovedCustomViews() {
          return this.$removedCustomViews;
        },
        set_$removedCustomViews: function WorkbookImpl$set_RemovedCustomViews(value) {
          this.$removedCustomViews = value;
        },
        get_$currentCustomView: function WorkbookImpl$get_CurrentCustomView() {
          return this.$currentCustomView;
        },
        set_$currentCustomView: function WorkbookImpl$set_CurrentCustomView(value) {
          this.$currentCustomView = value;
        },
        $getCustomViewsAsync: function WorkbookImpl$GetCustomViewsAsync() {
          return $tab__CustomViewImpl._getCustomViewsAsync(this, this.$messagingOptions);
        },
        $showCustomViewAsync: function WorkbookImpl$ShowCustomViewAsync(customViewName) {
          if (ss.isNullOrUndefined(customViewName) || tab._Utility.isNullOrEmpty(customViewName)) {
            return $tab__CustomViewImpl._showCustomViewAsync(this, this.$messagingOptions, null);
          } else {
            var cv = this.$customViews._get(customViewName);
            if (ss.isNullOrUndefined(cv)) {
              var deferred = new tab._Deferred();
              deferred.reject(tab._TableauException.createInvalidCustomViewName(customViewName));
              return deferred.get_promise();
            }
            return cv._impl._showAsync();
          }
        },
        $removeCustomViewAsync: function WorkbookImpl$RemoveCustomViewAsync(customViewName) {
          if (tab._Utility.isNullOrEmpty(customViewName)) {
            throw tab._TableauException.createNullOrEmptyParameter("customViewName");
          }
          var cv = this.$customViews._get(customViewName);
          if (ss.isNullOrUndefined(cv)) {
            var deferred = new tab._Deferred();
            deferred.reject(tab._TableauException.createInvalidCustomViewName(customViewName));
            return deferred.get_promise();
          }
          return cv._impl.$removeAsync();
        },
        $rememberCustomViewAsync: function WorkbookImpl$RememberCustomViewAsync(customViewName) {
          if (tab._Utility.isNullOrEmpty(customViewName)) {
            throw tab._TableauException.createInvalidParameter("customViewName");
          }
          return $tab__CustomViewImpl._saveNewAsync(this, this.$messagingOptions, customViewName);
        },
        $setActiveCustomViewAsDefaultAsync: function WorkbookImpl$SetActiveCustomViewAsDefaultAsync() {
          return $tab__CustomViewImpl._makeCurrentCustomViewDefaultAsync(this, this.$messagingOptions);
        },
        get_$lastChangedParameterImpl: function WorkbookImpl$get_LastChangedParameterImpl() {
          return this.$lastChangedParameterImpl;
        },
        set_$lastChangedParameterImpl: function WorkbookImpl$set_LastChangedParameterImpl(value) {
          this.$lastChangedParameterImpl = value;
        },
        get_$parameters: function WorkbookImpl$get_Parameters() {
          return this.$parameters;
        },
        $getSingleParameterAsync: function WorkbookImpl$GetSingleParameterAsync(parameterName) {
          var deferred = new tab._Deferred();
          if (ss.isValue(this.$lastChangedParameterImpl)) {
            deferred.resolve(this.$lastChangedParameterImpl.get_$parameter());
            return deferred.get_promise();
          }
          var commandParameters = {};
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.FetchParametersCommand", 0, ss.mkdel(this, function(result) {
            var parameterImpl = $tab__WorkbookImpl.$findAndCreateParameterImpl(parameterName, result);
            this.$lastChangedParameterImpl = parameterImpl;
            deferred.resolve(parameterImpl.get_$parameter());
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.$sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getParametersAsync: function WorkbookImpl$GetParametersAsync() {
          var deferred = new tab._Deferred();
          var commandParameters = {};
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.FetchParametersCommand", 0, ss.mkdel(this, function(result) {
            this.$parameters = $tab__WorkbookImpl.$processParameters(result);
            deferred.resolve(this.get_$parameters()._toApiCollection());
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.$sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $changeParameterValueAsync: function WorkbookImpl$ChangeParameterValueAsync(parameterName, value) {
          var deferred = new tab._Deferred();
          var parameterImpl = null;
          if (ss.isValue(this.$parameters)) {
            if (ss.isNullOrUndefined(this.$parameters._get(parameterName))) {
              deferred.reject(tab._TableauException.createInvalidParameter(parameterName));
              return deferred.get_promise();
            }
            parameterImpl = this.$parameters._get(parameterName)._impl;
            if (ss.isNullOrUndefined(parameterImpl)) {
              deferred.reject(tab._TableauException.createInvalidParameter(parameterName));
              return deferred.get_promise();
            }
          }
          var param = {};
          param["api.setParameterName"] = ss.isValue(this.$parameters) ? parameterImpl.get_$name() : parameterName;
          if (ss.isValue(value) && tab._Utility.isDate(value)) {
            var date = ss.cast(value, ss.JsDate);
            var dateStr = tab._Utility.serializeDateForServer(date);
            param["api.setParameterValue"] = dateStr;
          } else {
            param["api.setParameterValue"] = ss.isValue(value) ? value.toString() : null;
          }
          this.$lastChangedParameterImpl = null;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.SetParameterValueCommand", 0, ss.mkdel(this, function(result) {
            if (ss.isNullOrUndefined(result)) {
              deferred.reject(tab._TableauException.create("serverError", "server error"));
              return;
            }
            if (!result.isValidPresModel) {
              deferred.reject(tab._TableauException.createInvalidParameter(parameterName));
              return;
            }
            var paramUpdated = new $tab_$ParameterImpl(result);
            this.$lastChangedParameterImpl = paramUpdated;
            deferred.resolve(paramUpdated.get_$parameter());
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createInvalidParameter(parameterName));
          });
          this.$sendCommand(Object).call(this, param, returnHandler);
          return deferred.get_promise();
        }
      }, {
        $createDashboardZones: function WorkbookImpl$CreateDashboardZones(zones) {
          zones = ss.coalesce(zones, []);
          var zonesInfo = [];
          for (var i = 0; i < zones.length; i++) {
            var zone = zones[i];
            var objectType = tab.ApiEnumConverter.convertDashboardObjectType(zone.zoneType);
            var size = tab.Size.$ctor(zone.width, zone.height);
            var position = tab.Point.$ctor(zone.x, zone.y);
            var name = zone.name;
            var zoneInfo = { name, objectType, position, size, zoneId: zone.zoneId };
            zonesInfo.push(zoneInfo);
          }
          return zonesInfo;
        },
        $extractSheetName: function WorkbookImpl$ExtractSheetName(sheetOrInfoOrName) {
          if (ss.isNullOrUndefined(sheetOrInfoOrName)) {
            return null;
          }
          if (tab._Utility.isString(sheetOrInfoOrName)) {
            return sheetOrInfoOrName;
          }
          var sheet = ss.safeCast(sheetOrInfoOrName, $tableauSoftware_Sheet);
          if (ss.isValue(sheet)) {
            return sheet.getName();
          }
          var info = ss.safeCast(sheetOrInfoOrName, $tableauSoftware_SheetInfo);
          if (ss.isValue(info)) {
            return info.getName();
          }
          return null;
        },
        $createSheetSize: function WorkbookImpl$CreateSheetSize(sheetInfo) {
          if (ss.isNullOrUndefined(sheetInfo)) {
            return tab.SheetSizeFactory.createAutomatic();
          }
          return tab.SheetSizeFactory.fromSizeConstraints(sheetInfo.sizeConstraints);
        },
        $processParameters: function WorkbookImpl$ProcessParameters(paramList) {
          var parameters = new tab._Collection();
          for (var $t1 = 0; $t1 < paramList.parameters.length; $t1++) {
            var model = paramList.parameters[$t1];
            var paramImpl = new $tab_$ParameterImpl(model);
            parameters._add(paramImpl.get_$name(), paramImpl.get_$parameter());
          }
          return parameters;
        },
        $findAndCreateParameterImpl: function WorkbookImpl$FindAndCreateParameterImpl(parameterName, paramList) {
          for (var $t1 = 0; $t1 < paramList.parameters.length; $t1++) {
            var model = paramList.parameters[$t1];
            if (ss.referenceEquals(model.name, parameterName)) {
              return new $tab_$ParameterImpl(model);
            }
          }
          return null;
        }
      });
      var $tab__WorksheetImpl = global2.tab._WorksheetImpl = ss.mkType($asm, "tab._WorksheetImpl", function(sheetInfoImpl, workbookImpl, messagingOptions, parentDashboardImpl) {
        this.$worksheet = null;
        this.$parentDashboardImpl = null;
        this.$getDataCommandsBuilder = new tab.GetDataCommandsBuilder();
        this.$filterCommandsBuilder = new tab.FilterCommandsBuilder();
        this.$sharedUtils = new tab.SharedUtils();
        this.$filters = new tab._Collection();
        this.$selectedMarks = new tab._Collection();
        this.highlightedMarks = null;
        $tab__SheetImpl.call(this, sheetInfoImpl, workbookImpl, messagingOptions);
        this.$parentDashboardImpl = parentDashboardImpl;
      }, {
        $appendContextMenuAsync: function WorksheetImpl$AppendContextMenuAsync(sheetName, targetMenu, config) {
          tab._Param.verifyStringMaxLength(config.displayName, "Display Name");
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.targetMenu"] = targetMenu;
          commandParameters["api.menuItemDisplayName"] = config.displayName;
          commandParameters["api.worksheetName"] = sheetName;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.AppendContextMenu", 0, function(result) {
            deferred.resolve(result.menuItemId);
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $removeContextMenuAsync: function WorksheetImpl$RemoveContextMenuAsync(sheetName, targetMenu, menuItemId) {
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.targetMenu"] = targetMenu;
          commandParameters["api.menuItemId"] = menuItemId;
          commandParameters["api.worksheetName"] = sheetName;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.RemoveContextMenu", 0, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $executeContextMenuAsync: function WorksheetImpl$ExecuteContextMenuAsync(sheetName, targetMenu, menuItemId) {
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.worksheetName"] = sheetName;
          commandParameters["api.targetMenu"] = targetMenu;
          commandParameters["api.menuItemId"] = menuItemId;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.ExecuteContextMenu", 0, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        get_sheet: function WorksheetImpl$get_Sheet() {
          return this.get_worksheet();
        },
        get_worksheet: function WorksheetImpl$get_Worksheet() {
          if (ss.isNullOrUndefined(this.$worksheet)) {
            this.$worksheet = new $tableauSoftware_Worksheet(this);
          }
          return this.$worksheet;
        },
        get_parentDashboardImpl: function WorksheetImpl$get_ParentDashboardImpl() {
          return this.$parentDashboardImpl;
        },
        get_parentDashboard: function WorksheetImpl$get_ParentDashboard() {
          if (ss.isValue(this.$parentDashboardImpl)) {
            return this.$parentDashboardImpl.get_dashboard();
          }
          return null;
        },
        $getDataSourcesAsync: function WorksheetImpl$GetDataSourcesAsync() {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.worksheetName"] = this.get_name();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.GetDataSourcesCommand", 0, function(result) {
            var dataSources = $tab__DataSourceImpl.processDataSourcesForWorksheet(result);
            deferred.resolve(dataSources._toApiCollection());
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getDataSourceAsync: function WorksheetImpl$GetDataSourceAsync(dataSourceName) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.dataSourceName"] = dataSourceName;
          commandParameters["api.worksheetName"] = this.get_name();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.GetDataSourceCommand", 0, function(result) {
            var dataSourceImpl = $tab__DataSourceImpl.processDataSource(result);
            if (ss.isValue(dataSourceImpl)) {
              deferred.resolve(dataSourceImpl.get_dataSource());
            } else {
              deferred.reject(tab._TableauException.createServerError("Data source '" + dataSourceName + "' not found"));
            }
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $verifyActiveSheetOrEmbeddedInActiveDashboard: function WorksheetImpl$VerifyActiveSheetOrEmbeddedInActiveDashboard() {
          var isRootAndActiveWorksheet = this.get_isActive();
          var isWithinActiveDashboard = ss.isValue(this.$parentDashboardImpl) && this.$parentDashboardImpl.get_isActive();
          var isWithinActiveStoryPoint = ss.isValue(this.get_parentStoryPointImpl()) && this.get_parentStoryPointImpl().get_parentStoryImpl().get_isActive();
          if (!isRootAndActiveWorksheet && !isWithinActiveDashboard && !isWithinActiveStoryPoint) {
            throw tab._TableauException.createNotActiveSheet();
          }
        },
        $addVisualIdToCommand: function WorksheetImpl$AddVisualIdToCommand(commandParameters) {
          if (ss.isValue(this.get_parentStoryPointImpl())) {
            var visualId = {};
            visualId.worksheet = this.get_name();
            visualId.dashboard = ss.isValue(this.get_parentDashboardImpl()) ? this.$parentDashboardImpl.get_name() : this.get_name();
            visualId.flipboardZoneId = this.get_parentStoryPointImpl().get_containedSheetImpl().get_zoneId();
            visualId.storyboard = this.get_parentStoryPointImpl().get_parentStoryImpl().get_name();
            visualId.storyPointId = this.get_parentStoryPointImpl().get_storyPointId();
            commandParameters["api.visualId"] = visualId;
          } else {
            var dashboardName = ss.isValue(this.get_parentDashboardImpl()) ? this.get_parentDashboardImpl().get_name() : null;
            this.$sharedUtils.addVisualIdForWorksheet(commandParameters, this.get_name(), dashboardName);
          }
        },
        get__filters: function WorksheetImpl$get_Filters() {
          return this.$filters;
        },
        set__filters: function WorksheetImpl$set_Filters(value) {
          this.$filters = value;
        },
        $getFilterAsync: function WorksheetImpl$GetFilterAsync(fieldName, fieldCaption, options) {
          if (!tab._Utility.isNullOrEmpty(fieldName) && !tab._Utility.isNullOrEmpty(fieldCaption)) {
            throw tab._TableauException.createInternalError("Only fieldName OR fieldCaption is allowed, not both.");
          }
          options = options || new Object();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          this.$addVisualIdToCommand(commandParameters);
          if (!tab._Utility.isNullOrEmpty(fieldCaption) && tab._Utility.isNullOrEmpty(fieldName)) {
            commandParameters["api.fieldCaption"] = fieldCaption;
          }
          if (!tab._Utility.isNullOrEmpty(fieldName)) {
            commandParameters["api.fieldName"] = fieldName;
          }
          commandParameters["api.filterHierarchicalLevels"] = 0;
          commandParameters["api.ignoreDomain"] = options.ignoreDomain || false;
          commandParameters["api.filterRelevantValuesOnly"] = ss.isNullOrUndefined(options.relevantValuesOnly) ? true : options.relevantValuesOnly;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.GetOneFilterInfoCommand", 0, ss.mkdel(this, function(result) {
            var error = $tab__WorksheetImpl.$filterCommandError(result);
            if (ss.isNullOrUndefined(error)) {
              var filterJson = result;
              var filter = $tableauSoftware_Filter.$createFilter(this, filterJson);
              deferred.resolve(filter);
            } else {
              deferred.reject(error);
            }
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getFiltersAsync: function WorksheetImpl$GetFiltersAsync(options) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          options = options || new Object();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          this.$addVisualIdToCommand(commandParameters);
          commandParameters["api.ignoreDomain"] = options.ignoreDomain || false;
          commandParameters["api.filterRelevantValuesOnly"] = ss.isNullOrUndefined(options.relevantValuesOnly) ? true : options.relevantValuesOnly;
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.GetFiltersListCommand", 0, ss.mkdel(this, function(result) {
            this.set__filters($tableauSoftware_Filter.processFiltersList(this, result));
            deferred.resolve(this.get__filters()._toApiCollection());
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $applyFilterAsync: function WorksheetImpl$ApplyFilterAsync(fieldName, values, updateType, options) {
          return this.$applyFilterWithValuesInternalAsync(fieldName, values, updateType, options);
        },
        $clearFilterAsync: function WorksheetImpl$ClearFilterAsync(fieldName) {
          return this.$clearFilterInternalAsync(fieldName);
        },
        $getAppliedWorksheetsAsync: function WorksheetImpl$GetAppliedWorksheetsAsync(worksheetName, filterFieldName) {
          var deferred = new tab._Deferred();
          var successCallback = function successCallback2(result) {
            var pm = result;
            var appliedWorksheets = [];
            if (ss.isValue(pm.sharedFilterWorksheetInfoList)) {
              for (var $t1 = 0; $t1 < pm.sharedFilterWorksheetInfoList.length; $t1++) {
                var item = pm.sharedFilterWorksheetInfoList[$t1];
                if (item.isSelected) {
                  appliedWorksheets.push(item.worksheetName);
                }
              }
            }
            deferred.resolve(appliedWorksheets);
          };
          var errorCallback = function errorCallback2(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          };
          this.$getSharedFilterWorksheets(Array).call(this, worksheetName, filterFieldName, successCallback, errorCallback);
          return deferred.get_promise();
        },
        $setAppliedWorksheetsAsync: function WorksheetImpl$SetAppliedWorksheetsAsync(applyToWorksheets, currentWorksheet, filterFieldName, filterFieldCaption) {
          if (ss.isNullOrUndefined(applyToWorksheets)) {
            throw tab._TableauException.createInvalidParameter("Worksheet");
          }
          var deferred = new tab._Deferred();
          applyToWorksheets = this.$getDistinctWorksheets(applyToWorksheets);
          var getAppliedWorksheetsSuccessCallback = ss.mkdel(this, function(result) {
            var pm = result;
            var activeWorksheet = new String();
            var selectedWorksheets = [];
            var nonSelectedWorksheets = [];
            if (!ss.isValue(pm.sharedFilterWorksheetInfoList)) {
              deferred.reject(tab._TableauException.createServerError("The server returned empty pres model for getAppliedWorksheetsAsync()"));
              return;
            }
            for (var $t1 = 0; $t1 < pm.sharedFilterWorksheetInfoList.length; $t1++) {
              var item = pm.sharedFilterWorksheetInfoList[$t1];
              if (item.isActive) {
                activeWorksheet = item.worksheetName;
              }
              if (item.isSelected) {
                selectedWorksheets.push(item.worksheetName);
              } else if (item.isEnabled) {
                nonSelectedWorksheets.push(item.worksheetName);
              }
            }
            if (!ss.contains(applyToWorksheets, activeWorksheet)) {
              var message = activeWorksheet + " must be included in the applied worksheets";
              deferred.reject(tab._TableauException.createInternalError(message));
              return;
            }
            for (var $t2 = 0; $t2 < applyToWorksheets.length; $t2++) {
              var sheet = applyToWorksheets[$t2];
              if (!ss.contains(selectedWorksheets, sheet) && !ss.contains(nonSelectedWorksheets, sheet)) {
                var message1 = "The field " + filterFieldCaption + " isn't applicable to the worksheet " + sheet;
                deferred.reject(tab._TableauException.createInternalError(message1));
                return;
              }
            }
            var commandParameters = {};
            commandParameters["api.fieldName"] = filterFieldName;
            commandParameters["api.sharedFilterSheets"] = applyToWorksheets;
            this.$addVisualIdToCommand(commandParameters);
            var setAppliedWorksheetSuccessCallback = function setAppliedWorksheetSuccessCallback2(setAppliedWorksheetResult) {
              deferred.resolve(applyToWorksheets);
            };
            var setAppliedWorksheetErrorCallback = function setAppliedWorksheetErrorCallback2(remoteError, message2) {
              deferred.reject(tab._TableauException.createServerError(message2));
            };
            var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.SetAppliedWorksheetsCommand", 0, setAppliedWorksheetSuccessCallback, setAppliedWorksheetErrorCallback);
            this.sendCommand(Object).call(this, commandParameters, returnHandler);
          });
          var getAppliedWorksheetsErrorCallback = function getAppliedWorksheetsErrorCallback2(remoteError1, message3) {
            deferred.reject(tab._TableauException.createServerError(message3));
          };
          this.$getSharedFilterWorksheets(Array).call(this, currentWorksheet, filterFieldName, getAppliedWorksheetsSuccessCallback, getAppliedWorksheetsErrorCallback);
          return deferred.get_promise();
        },
        $getDistinctWorksheets: function WorksheetImpl$GetDistinctWorksheets(applyToWorksheets) {
          var check = /* @__PURE__ */ new Set();
          var result = [];
          for (var $t1 = 0; $t1 < applyToWorksheets.length; $t1++) {
            var ws = applyToWorksheets[$t1];
            if (check.has(ws)) {
              continue;
            }
            check.add(ws);
            result.push(ws);
          }
          return result;
        },
        $getSharedFilterWorksheets: function $getSharedFilterWorksheets(T) {
          return function WorksheetImpl$GetSharedFilterWorksheets(worksheetName, filterFieldName, successCallback, errorCallback) {
            var commandParameters = {};
            commandParameters["api.fieldName"] = filterFieldName;
            this.$addVisualIdToCommand(commandParameters);
            var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.GetAppliedWorksheetsCommand", 0, successCallback, errorCallback);
            this.sendCommand(Object).call(this, commandParameters, returnHandler);
          };
        },
        $applyRangeFilterAsync: function WorksheetImpl$ApplyRangeFilterAsync(fieldName, options) {
          var fixedUpFilterOptions = this.$filterCommandsBuilder.normalizeRangeFilterOption(options);
          return this.$applyRangeFilterInternalAsync(fieldName, fixedUpFilterOptions);
        },
        $applyRelativeDateFilterAsync: function WorksheetImpl$ApplyRelativeDateFilterAsync(fieldName, options) {
          var fixedUpFilterOptions = this.$filterCommandsBuilder.normalizeRelativeDateFilterOptions(options);
          return this.$applyRelativeDateFilterInternalAsync(fieldName, fixedUpFilterOptions);
        },
        $applyHierarchicalFilterAsync: function WorksheetImpl$ApplyHierarchicalFilterAsync(fieldName, values, updateType, options) {
          if (ss.isNullOrUndefined(values) && updateType !== "all") {
            throw tab._TableauException.createInvalidParameter("values");
          }
          return this.$applyHierarchicalFilterInternalAsync(fieldName, values, updateType, options);
        },
        $clearFilterInternalAsync: function WorksheetImpl$ClearFilterInternalAsync(fieldName) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = this.$filterCommandsBuilder.buildClearFilterCommandsParam(fieldName);
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = this.$filterCommandsBuilder.createFilterCommandReturnHandler("api.ClearFilterCommand", fieldName, deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $applyFilterWithValuesInternalAsync: function WorksheetImpl$ApplyFilterWithValuesInternalAsync(fieldName, values, updateType, options) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = this.$filterCommandsBuilder.buildApplyFiltersCommandParams(fieldName, values, updateType, options);
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = this.$filterCommandsBuilder.createFilterCommandReturnHandler("api.ApplyCategoricalFilterCommand", fieldName, deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $applyRangeFilterInternalAsync: function WorksheetImpl$ApplyRangeFilterInternalAsync(fieldName, filterOptions) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var commandParameters = this.$filterCommandsBuilder.buildRangeFilterCommandParams(fieldName, filterOptions);
          this.$addVisualIdToCommand(commandParameters);
          var deferred = new tab._Deferred();
          var returnHandler = this.$filterCommandsBuilder.createFilterCommandReturnHandler("api.ApplyRangeFilterCommand", fieldName, deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $applyRelativeDateFilterInternalAsync: function WorksheetImpl$ApplyRelativeDateFilterInternalAsync(fieldName, filterOptions) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var commandParameters = this.$filterCommandsBuilder.buildRelativeDateFilterCommandParams(fieldName, filterOptions);
          this.$addVisualIdToCommand(commandParameters);
          var deferred = new tab._Deferred();
          var returnHandler = this.$filterCommandsBuilder.createFilterCommandReturnHandler("api.ApplyRelativeDateFilterCommand", fieldName, deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $applyHierarchicalFilterInternalAsync: function WorksheetImpl$ApplyHierarchicalFilterInternalAsync(fieldName, values, updateType, options) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var commandParameters = this.$filterCommandsBuilder.buildHierarchicalFilterCommandParams(fieldName, values, updateType, options);
          this.$addVisualIdToCommand(commandParameters);
          var deferred = new tab._Deferred();
          var returnHandler = this.$filterCommandsBuilder.createFilterCommandReturnHandler("api.ApplyHierarchicalFilterCommand", fieldName, deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        get_selectedMarks: function WorksheetImpl$get_SelectedMarks() {
          return this.$selectedMarks;
        },
        set_selectedMarks: function WorksheetImpl$set_SelectedMarks(value) {
          this.$selectedMarks = value;
        },
        $clearSelectedMarksAsync: function WorksheetImpl$ClearSelectedMarksAsync() {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.ClearSelectedMarksCommand", 0, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $selectMarksAsync: function WorksheetImpl$SelectMarksAsync(fieldNameOrFieldValuesMap, valueOrUpdateType, updateType) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          if (ss.isNullOrUndefined(fieldNameOrFieldValuesMap) && ss.isNullOrUndefined(valueOrUpdateType)) {
            return this.$clearSelectedMarksAsync();
          }
          if (tab._Utility.isString(fieldNameOrFieldValuesMap) && (tab._jQueryShim.isArray(valueOrUpdateType) || tab._Utility.isString(valueOrUpdateType) || !tab.PublicEnums.isValidEnum(tab.ApiSelectionUpdateType).call(null, valueOrUpdateType))) {
            return this.$selectMarksWithFieldNameAndValueAsync(ss.cast(fieldNameOrFieldValuesMap, String), valueOrUpdateType, updateType);
          } else if (tab._jQueryShim.isArray(fieldNameOrFieldValuesMap)) {
            return this.$selectMarksWithMarksArrayAsync(fieldNameOrFieldValuesMap, ss.cast(valueOrUpdateType, String));
          } else {
            return this.$selectMarksWithMultiDimOptionAsync(fieldNameOrFieldValuesMap, ss.cast(valueOrUpdateType, String));
          }
        },
        $getSelectedMarksAsync: function WorksheetImpl$GetSelectedMarksAsync() {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.FetchSelectedMarksCommand", 0, ss.mkdel(this, function(result) {
            this.$selectedMarks = tab.MarkImpl.processActiveMarks(result);
            deferred.resolve(this.$selectedMarks._toApiCollection());
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $selectMarksWithFieldNameAndValueAsync: function WorksheetImpl$SelectMarksWithFieldNameAndValueAsync(fieldName, value, updateType) {
          var catNameList = [];
          var catValueList = [];
          var hierNameList = [];
          var hierValueList = [];
          var rangeNameList = [];
          var rangeValueList = [];
          this.$parseMarksParam(catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, fieldName, value);
          return this.$selectMarksWithValuesAsync(null, catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, updateType);
        },
        $selectMarksWithMultiDimOptionAsync: function WorksheetImpl$SelectMarksWithMultiDimOptionAsync(fieldValuesMap, updateType) {
          var dict = fieldValuesMap;
          var catNameList = [];
          var catValueList = [];
          var hierNameList = [];
          var hierValueList = [];
          var rangeNameList = [];
          var rangeValueList = [];
          var $t1 = new ss.ObjectEnumerator(dict);
          try {
            while ($t1.moveNext()) {
              var ent = $t1.current();
              if (fieldValuesMap.hasOwnProperty(ent.key)) {
                if (!tab._jQueryShim.isFunction(dict[ent.key])) {
                  this.$parseMarksParam(catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, ent.key, ent.value);
                }
              }
            }
          } finally {
            $t1.dispose();
          }
          return this.$selectMarksWithValuesAsync(null, catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, updateType);
        },
        $selectMarksWithMarksArrayAsync: function WorksheetImpl$SelectMarksWithMarksArrayAsync(marksArray, updateType) {
          var catNameList = [];
          var catValueList = [];
          var hierNameList = [];
          var hierValueList = [];
          var rangeNameList = [];
          var rangeValueList = [];
          var tupleIdList = [];
          for (var i = 0; i < marksArray.length; i++) {
            var mark = marksArray[i];
            if (ss.isValue(mark.impl.get_tupleId()) && mark.impl.get_tupleId() > 0) {
              tupleIdList.push(mark.impl.get_tupleId());
            } else {
              var pairs = mark.impl.get_pairs();
              for (var j = 0; j < pairs.get__length(); j++) {
                var pair = pairs.get_item(j);
                if (pair.hasOwnProperty("fieldName") && pair.hasOwnProperty("value") && !tab._jQueryShim.isFunction(pair.fieldName) && !tab._jQueryShim.isFunction(pair.value)) {
                  this.$parseMarksParam(catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, pair.fieldName, pair.value);
                }
              }
            }
          }
          return this.$selectMarksWithValuesAsync(tupleIdList, catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, updateType);
        },
        $parseMarksParam: function WorksheetImpl$ParseMarksParam(catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, fieldName, value) {
          var sourceOptions = value;
          if ($tab__WorksheetImpl.$regexHierarchicalFieldName.test(fieldName)) {
            this.$addToParamLists(hierNameList, hierValueList, fieldName, value);
          } else if (ss.isValue(sourceOptions.min) || ss.isValue(sourceOptions.max)) {
            var range = new Object();
            if (ss.isValue(sourceOptions.min)) {
              if (tab._Utility.isDate(sourceOptions.min)) {
                var dt = ss.cast(sourceOptions.min, ss.JsDate);
                if (tab._Utility.isDateValid(dt)) {
                  range.min = tab._Utility.serializeDateForServer(dt);
                } else {
                  throw tab._TableauException.createInvalidDateParameter("options.min");
                }
              } else {
                range.min = sourceOptions.min;
              }
            }
            if (ss.isValue(sourceOptions.max)) {
              if (tab._Utility.isDate(sourceOptions.max)) {
                var dt1 = ss.cast(sourceOptions.max, ss.JsDate);
                if (tab._Utility.isDateValid(dt1)) {
                  range.max = tab._Utility.serializeDateForServer(dt1);
                } else {
                  throw tab._TableauException.createInvalidDateParameter("options.max");
                }
              } else {
                range.max = sourceOptions.max;
              }
            }
            if (ss.isValue(sourceOptions.nullOption)) {
              var nullOption = tab.PublicEnums.normalizeEnum(tab.ApiNullOption).call(null, sourceOptions.nullOption, "options.nullOption");
              range.nullOption = nullOption;
            } else {
              range.nullOption = "allValues";
            }
            var jsonValue = JSON.stringify(range);
            this.$addToParamLists(rangeNameList, rangeValueList, fieldName, jsonValue);
          } else {
            this.$addToParamLists(catNameList, catValueList, fieldName, value);
          }
        },
        $addToParamLists: function WorksheetImpl$AddToParamLists(paramNameList, paramValueList, paramName, paramValue) {
          var markValues = [];
          if (tab._jQueryShim.isArray(paramValue)) {
            var values = ss.cast(paramValue, Array);
            for (var i = 0; i < values.length; i++) {
              markValues.push(values[i].toString());
            }
          } else {
            markValues.push(paramValue.toString());
          }
          paramValueList.push(markValues);
          paramNameList.push(paramName);
        },
        $selectMarksWithValuesAsync: function WorksheetImpl$SelectMarksWithValuesAsync(tupleIdList, catNameList, catValueList, hierNameList, hierValueList, rangeNameList, rangeValueList, updateType) {
          var commandParameters = {};
          this.$addVisualIdToCommand(commandParameters);
          updateType = tab.PublicEnums.normalizeEnum(tab.ApiSelectionUpdateType).call(null, updateType, "updateType");
          commandParameters["api.filterUpdateType"] = updateType;
          if (!tab._Utility.isNullOrEmpty(tupleIdList)) {
            commandParameters["api.tupleIds"] = JSON.stringify(tupleIdList);
          }
          if (!tab._Utility.isNullOrEmpty(catNameList) && !tab._Utility.isNullOrEmpty(catValueList)) {
            commandParameters["api.categoricalFieldCaption"] = JSON.stringify(catNameList);
            var markValues = [];
            for (var i = 0; i < catValueList.length; i++) {
              var values = JSON.stringify(catValueList[i]);
              markValues.push(values);
            }
            commandParameters["api.categoricalMarkValues"] = JSON.stringify(markValues);
          }
          if (!tab._Utility.isNullOrEmpty(hierNameList) && !tab._Utility.isNullOrEmpty(hierValueList)) {
            commandParameters["api.hierarchicalFieldCaption"] = JSON.stringify(hierNameList);
            var markValues1 = [];
            for (var i1 = 0; i1 < hierValueList.length; i1++) {
              var values1 = JSON.stringify(hierValueList[i1]);
              markValues1.push(values1);
            }
            commandParameters["api.hierarchicalMarkValues"] = JSON.stringify(markValues1);
          }
          if (!tab._Utility.isNullOrEmpty(rangeNameList) && !tab._Utility.isNullOrEmpty(rangeValueList)) {
            commandParameters["api.rangeFieldCaption"] = JSON.stringify(rangeNameList);
            var markValues2 = [];
            for (var i2 = 0; i2 < rangeValueList.length; i2++) {
              var values2 = JSON.stringify(rangeValueList[i2]);
              markValues2.push(values2);
            }
            commandParameters["api.rangeMarkValues"] = JSON.stringify(markValues2);
          }
          if (tab._Utility.isNullOrEmpty(commandParameters["api.tupleIds"]) && tab._Utility.isNullOrEmpty(commandParameters["api.categoricalFieldCaption"]) && tab._Utility.isNullOrEmpty(commandParameters["api.hierarchicalFieldCaption"]) && tab._Utility.isNullOrEmpty(commandParameters["api.rangeFieldCaption"])) {
            throw tab._TableauException.createInvalidParameter("fieldNameOrFieldValuesMap");
          }
          var deferred = new tab._Deferred();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.SelectMarksCommand", 0, function(result) {
            var error = $tab__WorksheetImpl.$createSelectionCommandError(result);
            if (ss.isNullOrUndefined(error)) {
              deferred.resolve();
            } else {
              deferred.reject(error);
            }
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getSummaryDataAsync: function WorksheetImpl$GetSummaryDataAsync(options) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = this.$getDataCommandsBuilder.getSummaryDataCommandParams(options);
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = this.$getDataCommandsBuilder.getSummaryDataResponseHandler(deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getUnderlyingDataAsync: function WorksheetImpl$GetUnderlyingDataAsync(options) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = this.$getDataCommandsBuilder.getUnderlyingDataCommandParams(options);
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = this.$getDataCommandsBuilder.getUnderlyingDataResponseHandler(deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getUnderlyingTablesAsync: function WorksheetImpl$GetUnderlyingTablesAsync() {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = this.$getDataCommandsBuilder.getUnderlyingTablesCommandParams();
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = this.$getDataCommandsBuilder.getUnderlyingTablesResponseHandler(deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getUnderlyingTableDataAsync: function WorksheetImpl$GetUnderlyingTableDataAsync(tableId, options) {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = this.$getDataCommandsBuilder.getUnderlyingTableDataCommandParams(tableId, options);
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = this.$getDataCommandsBuilder.getUnderlyingTableDataResponseHandler(deferred);
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $clearHighlightedMarksAsync: function WorksheetImpl$ClearHighlightedMarksAsync() {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.ClearHighlightedMarksCommand", 0, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $highlightMarksAsync: function WorksheetImpl$HighlightMarksAsync(fieldName, values) {
          tab._Param.verifyString(fieldName, "fieldName");
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.fieldCaption"] = fieldName;
          commandParameters["api.ObjectTextIDs"] = values;
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.HighlightMarksCommand", 0, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $highlightMarksByPatternMatchAsync: function WorksheetImpl$HighlightMarksByPatternMatchAsync(fieldName, patternMatch) {
          tab._Param.verifyString(fieldName, "fieldName");
          tab._Param.verifyString(patternMatch, "patternMatch");
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          commandParameters["api.filterUpdateType"] = "replace";
          commandParameters["api.fieldCaption"] = fieldName;
          commandParameters["api.Pattern"] = patternMatch;
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.HighlightMarksByPatternMatch", 0, function(result) {
            deferred.resolve();
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        },
        $getHighlightedMarksAsync: function WorksheetImpl$GetHighlightedMarksAsync() {
          this.$verifyActiveSheetOrEmbeddedInActiveDashboard();
          var deferred = new tab._Deferred();
          var commandParameters = {};
          this.$addVisualIdToCommand(commandParameters);
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.FetchHighlightedMarksCommand", 0, ss.mkdel(this, function(result) {
            this.highlightedMarks = tab.MarkImpl.processActiveMarks(result);
            deferred.resolve(this.highlightedMarks._toApiCollection());
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this.sendCommand(Object).call(this, commandParameters, returnHandler);
          return deferred.get_promise();
        }
      }, {
        $filterCommandError: function WorksheetImpl$FilterCommandError(rawPm) {
          var commandError = rawPm;
          if (ss.isValue(commandError) && ss.isValue(commandError.errorCode)) {
            var additionalInfo = ss.isValue(commandError.additionalInformation) ? commandError.additionalInformation.toString() : "";
            switch (commandError.errorCode) {
              case "invalidFilterFieldName": {
                return tab._TableauException.create("invalidFilterFieldName", additionalInfo);
              }
              case "invalidFilterFieldValue": {
                return tab._TableauException.create("invalidFilterFieldValue", additionalInfo);
              }
              case "invalidAggregationFieldName": {
                return tab._TableauException.createInvalidAggregationFieldName(additionalInfo);
              }
              default: {
                return tab._TableauException.createServerError(additionalInfo);
              }
            }
          }
          return null;
        },
        $createSelectionCommandError: function WorksheetImpl$CreateSelectionCommandError(rawPm) {
          var commandError = rawPm;
          if (ss.isValue(commandError) && ss.isValue(commandError.errorCode)) {
            var additionalInfo = ss.isValue(commandError.additionalInformation) ? commandError.additionalInformation.toString() : "";
            switch (commandError.errorCode) {
              case "invalidSelectionFieldName": {
                return tab._TableauException.create("invalidSelectionFieldName", additionalInfo);
              }
              case "invalidSelectionValue": {
                return tab._TableauException.create("invalidSelectionValue", additionalInfo);
              }
              case "invalidSelectionDate": {
                return tab._TableauException.create("invalidSelectionDate", additionalInfo);
              }
            }
          }
          return null;
        }
      });
      var $tab_$CustomViewEventContext = ss.mkType($asm, "tab.$CustomViewEventContext", function(workbook, customViewImpl) {
        this.$customViewImpl = null;
        $tab_EventContext.call(this, workbook, null);
        this.$customViewImpl = customViewImpl;
      }, {
        get__customViewImpl: function CustomViewEventContext$get_CustomViewImpl() {
          return this.$customViewImpl;
        }
      });
      var $tab_$DashboardZoneInfo = ss.mkType($asm, "tab.$DashboardZoneInfo", null, null, {
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tab_$FilterEventContext = ss.mkType($asm, "tab.$FilterEventContext", function(workbookImpl, worksheetImpl, fieldFieldName, filterCaption) {
        this.$fieldFieldName = null;
        this.$filterCaption = null;
        $tab_EventContext.call(this, workbookImpl, worksheetImpl);
        this.$fieldFieldName = fieldFieldName;
        this.$filterCaption = filterCaption;
      }, {
        get__filterFieldName: function FilterEventContext$get_FilterFieldName() {
          return this.$fieldFieldName;
        },
        get_$filterCaption: function FilterEventContext$get_FilterCaption() {
          return this.$filterCaption;
        }
      });
      var $tab_$HighlightEventContext = ss.mkType($asm, "tab.$HighlightEventContext", function(workbookImpl, worksheetImpl) {
        $tab_EventContext.call(this, workbookImpl, worksheetImpl);
      });
      var $tab_$MarksEventContext = ss.mkType($asm, "tab.$MarksEventContext", function(workbookImpl, worksheetImpl) {
        $tab_EventContext.call(this, workbookImpl, worksheetImpl);
      });
      var $tab_$ParameterEventContext = ss.mkType($asm, "tab.$ParameterEventContext", function(workbookImpl, parameterName) {
        this.$parameterName = null;
        $tab_EventContext.call(this, workbookImpl, null);
        this.$parameterName = parameterName;
      }, {
        get__parameterName: function ParameterEventContext$get_ParameterName() {
          return this.$parameterName;
        }
      });
      var $tab_$ParameterImpl = ss.mkType($asm, "tab.$ParameterImpl", function(pm) {
        this.$parameter = null;
        this.$name = null;
        this.$currentValue = null;
        this.$dataType = null;
        this.$allowableValuesType = null;
        this.$allowableValues = null;
        this.$minValue = null;
        this.$maxValue = null;
        this.$stepSize = null;
        this.$dateStepPeriod = null;
        this.$name = pm.name;
        this.$currentValue = tab._Utility.getDataValue(pm.currentValue);
        this.$dataType = tab.ApiEnumConverter.convertParameterDataType(pm.dataType);
        this.$allowableValuesType = tab.ApiEnumConverter.convertParameterAllowableValuesType(pm.allowableValuesType);
        if (ss.isValue(pm.allowableValues) && this.$allowableValuesType === "list") {
          this.$allowableValues = [];
          for (var $t1 = 0; $t1 < pm.allowableValues.length; $t1++) {
            var adv = pm.allowableValues[$t1];
            this.$allowableValues.push(tab._Utility.getDataValue(adv));
          }
        }
        if (this.$allowableValuesType === "range") {
          this.$minValue = tab._Utility.getDataValue(pm.minValue);
          this.$maxValue = tab._Utility.getDataValue(pm.maxValue);
          this.$stepSize = pm.stepSize;
          if ((this.$dataType === "date" || this.$dataType === "datetime") && ss.isValue(this.$stepSize) && ss.isValue(pm.dateStepPeriod)) {
            this.$dateStepPeriod = tab.ApiEnumConverter.convertPeriodType(pm.dateStepPeriod);
          }
        }
      }, {
        get_$parameter: function ParameterImpl$get_Parameter() {
          if (ss.isNullOrUndefined(this.$parameter)) {
            this.$parameter = new $tableauSoftware_Parameter(this);
          }
          return this.$parameter;
        },
        get_$name: function ParameterImpl$get_Name() {
          return this.$name;
        },
        get_$currentValue: function ParameterImpl$get_CurrentValue() {
          return this.$currentValue;
        },
        get_$dataType: function ParameterImpl$get_DataType() {
          return this.$dataType;
        },
        get_$allowableValuesType: function ParameterImpl$get_AllowableValuesType() {
          return this.$allowableValuesType;
        },
        get_$allowableValues: function ParameterImpl$get_AllowableValues() {
          return this.$allowableValues;
        },
        get_$minValue: function ParameterImpl$get_MinValue() {
          return this.$minValue;
        },
        get_$maxValue: function ParameterImpl$get_MaxValue() {
          return this.$maxValue;
        },
        get_$stepSize: function ParameterImpl$get_StepSize() {
          return this.$stepSize;
        },
        get_$dateStepPeriod: function ParameterImpl$get_DateStepPeriod() {
          return this.$dateStepPeriod;
        }
      });
      var $tab_CustomMarkContextMenuEvent = global2.tab.CustomMarkContextMenuEvent = ss.mkType($asm, "tab.CustomMarkContextMenuEvent", function(eventName, viz, contextMenuId, worksheetImpl) {
        this.$contextMenuId = null;
        this.$worksheetImpl = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$contextMenuId = contextMenuId;
        this.$worksheetImpl = worksheetImpl;
      }, {
        getContextMenuId: function CustomMarkContextMenuEvent$GetContextMenuId() {
          return this.$contextMenuId;
        },
        getSelectedMarksAsync: function CustomMarkContextMenuEvent$GetSelectedMarksAsync() {
          var worksheetImpl = this.$worksheetImpl;
          if (ss.isValue(worksheetImpl.get_selectedMarks())) {
            var deferred = new tab._Deferred();
            return deferred.resolve(worksheetImpl.get_selectedMarks()._toApiCollection());
          }
          return worksheetImpl.$getSelectedMarksAsync();
        }
      });
      var $tab_CustomViewEvent = global2.tab.CustomViewEvent = ss.mkType($asm, "tab.CustomViewEvent", function(eventName, viz, customViewImpl) {
        this.$context = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$context = new $tab_$CustomViewEventContext(viz._impl.get__workbookImpl(), customViewImpl);
      }, {
        getCustomViewAsync: function CustomViewEvent$GetCustomViewAsync() {
          var deferred = new tab._Deferred();
          var customView = null;
          if (ss.isValue(this.$context.get__customViewImpl())) {
            customView = this.$context.get__customViewImpl().get_$customView();
          }
          deferred.resolve(customView);
          return deferred.get_promise();
        }
      });
      var $tab_EventContext = global2.tab.EventContext = ss.mkType($asm, "tab.EventContext", function(workbookImpl, worksheetImpl) {
        this.$workbookImpl = null;
        this.$worksheetImpl = null;
        this.$workbookImpl = workbookImpl;
        this.$worksheetImpl = worksheetImpl;
      }, {
        get__workbookImpl: function EventContext$get_WorkbookImpl() {
          return this.$workbookImpl;
        },
        get__worksheetImpl: function EventContext$get_WorksheetImpl() {
          return this.$worksheetImpl;
        }
      });
      var $tab_FilterEvent = global2.tab.FilterEvent = ss.mkType($asm, "tab.FilterEvent", function(eventName, viz, worksheetImpl, fieldName, filterCaption) {
        this.$filterCaption = null;
        this.$context = null;
        $tab_WorksheetEvent.call(this, eventName, viz, worksheetImpl);
        this.$filterCaption = filterCaption;
        this.$context = new $tab_$FilterEventContext(viz._impl.get__workbookImpl(), worksheetImpl, fieldName, filterCaption);
      }, {
        getFieldName: function FilterEvent$GetFieldName() {
          return this.$filterCaption;
        },
        getFilterAsync: function FilterEvent$GetFilterAsync() {
          return this.$context.get__worksheetImpl().$getFilterAsync(this.$context.get__filterFieldName(), null, null);
        }
      });
      var $tab_FirstVizSizeKnownEvent = global2.tab.FirstVizSizeKnownEvent = ss.mkType($asm, "tab.FirstVizSizeKnownEvent", function(eventName, viz, vizSize) {
        this.$vizSize = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$vizSize = vizSize;
      }, {
        getVizSize: function FirstVizSizeKnownEvent$GetVizSize() {
          return this.$vizSize;
        }
      });
      var $tab_HighlightEvent = global2.tab.HighlightEvent = ss.mkType($asm, "tab.HighlightEvent", function(eventName, viz, worksheetImpl) {
        this.$context = null;
        $tab_WorksheetEvent.call(this, eventName, viz, worksheetImpl);
        this.$context = new $tab_$HighlightEventContext(viz._impl.get__workbookImpl(), worksheetImpl);
      }, {
        getHighlightedMarksAsync: function HighlightEvent$GetHighlightedMarksAsync() {
          var worksheetImpl = this.$context.get__worksheetImpl();
          return worksheetImpl.$getHighlightedMarksAsync();
        }
      });
      var $tab_IJsApiMessageHandler = global2.tab.IJsApiMessageHandler = ss.mkType($asm, "tab.IJsApiMessageHandler");
      var $tab_JsApiMessageRouter = global2.tab.JsApiMessageRouter = ss.mkType($asm, "tab.JsApiMessageRouter", function() {
        this.$customViewLoadCallbacks = {};
        this.$crossDomainMessager = null;
        var legacyHandler = ss.mkdel(this, function(command, handler) {
          var jsApiMessageHandler = ss.safeCast(handler, $tab_IJsApiMessageHandler);
          this.$handleLegacyNotifications(command, jsApiMessageHandler);
        });
        this.$crossDomainMessager = new tab.CrossDomainMessager(legacyHandler);
      }, {
        registerHandler: function JsApiMessageRouter$RegisterHandler(handler) {
          this.$crossDomainMessager.registerHandler(handler);
          handler.add_customViewsListLoad(ss.mkdel(this, this.$handleCustomViewsListLoad));
        },
        unregisterHandler: function JsApiMessageRouter$UnregisterHandler(handler) {
          this.$crossDomainMessager.unregisterHandler(handler);
          handler.remove_customViewsListLoad(ss.mkdel(this, this.$handleCustomViewsListLoad));
        },
        sendCommand: function sendCommand(T) {
          return function JsApiMessageRouter$SendCommand(source, commandParameters, returnHandler) {
            this.$crossDomainMessager.sendCommand(T).call(this.$crossDomainMessager, source, commandParameters, returnHandler);
            if (returnHandler.get_commandName() === "api.ShowCustomViewCommand") {
              var customViewCallbacks = this.$customViewLoadCallbacks[source.get_hostId()];
              if (ss.isNullOrUndefined(customViewCallbacks)) {
                customViewCallbacks = [];
                this.$customViewLoadCallbacks[source.get_hostId()] = customViewCallbacks;
              }
              customViewCallbacks.push(returnHandler);
            }
          };
        },
        $handleCustomViewsListLoad: function JsApiMessageRouter$HandleCustomViewsListLoad(source) {
          var handlerId = source.get_hostId();
          var customViewCallbacks = this.$customViewLoadCallbacks[handlerId];
          if (ss.isNullOrUndefined(customViewCallbacks)) {
            return;
          }
          for (var $t1 = 0; $t1 < customViewCallbacks.length; $t1++) {
            var returnHandler = customViewCallbacks[$t1];
            if (!ss.staticEquals(returnHandler.get_successCallback(), null)) {
              returnHandler.get_successCallback()(null);
            }
          }
          delete this.$customViewLoadCallbacks[handlerId];
        },
        $handleLegacyNotifications: function JsApiMessageRouter$HandleLegacyNotifications(command, handler) {
          if (command.get_name() === "layoutInfoReq") {
            $tab__VizManagerImpl.$sendVisibleRects();
          } else if (ss.isValue(handler)) {
            if (command.get_name() === "tableau.completed" || command.get_name() === "completed") {
              handler.handleVizLoad();
            } else if (command.get_name() === "tableau.listening") {
              handler.handleVizListening();
            } else if (command.get_name() === "sf?") {
              if (ss.count(command.get_parameters()) > 0) {
                var requestId = ss.getItem(command.get_parameters(), 0);
                handler.sendScaleFactor(requestId);
              }
            }
          }
        }
      });
      var $tab_JsApiMessagingOptions = global2.tab.JsApiMessagingOptions = ss.mkType($asm, "tab.JsApiMessagingOptions", function(router, handler) {
        this.$router = null;
        this.$handler = null;
        tab._Param.verifyValue(router, "router");
        tab._Param.verifyValue(handler, "handler");
        this.$router = router;
        this.$handler = handler;
      }, {
        get_handler: function JsApiMessagingOptions$get_Handler() {
          return this.$handler;
        },
        get_router: function JsApiMessagingOptions$get_Router() {
          return this.$router;
        },
        sendCommand: function sendCommand(T) {
          return function JsApiMessagingOptions$SendCommand(commandParameters, returnHandler) {
            this.$router.sendCommand(T).call(this.$router, this.$handler, commandParameters, returnHandler);
          };
        },
        dispose: function JsApiMessagingOptions$Dispose() {
          this.$router.unregisterHandler(this.$handler);
        }
      });
      var $tab_MarksEvent = global2.tab.MarksEvent = ss.mkType($asm, "tab.MarksEvent", function(eventName, viz, worksheetImpl) {
        this.$context = null;
        $tab_WorksheetEvent.call(this, eventName, viz, worksheetImpl);
        this.$context = new $tab_$MarksEventContext(viz._impl.get__workbookImpl(), worksheetImpl);
      }, {
        getMarksAsync: function MarksEvent$GetMarksAsync() {
          var worksheetImpl = this.$context.get__worksheetImpl();
          if (ss.isValue(worksheetImpl.get_selectedMarks())) {
            var deferred = new tab._Deferred();
            return deferred.resolve(worksheetImpl.get_selectedMarks()._toApiCollection());
          }
          return worksheetImpl.$getSelectedMarksAsync();
        }
      });
      var $tab_ParameterEvent = global2.tab.ParameterEvent = ss.mkType($asm, "tab.ParameterEvent", function(eventName, viz, parameterName) {
        this.$context = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$context = new $tab_$ParameterEventContext(viz._impl.get__workbookImpl(), parameterName);
      }, {
        getParameterName: function ParameterEvent$GetParameterName() {
          return this.$context.get__parameterName();
        },
        getParameterAsync: function ParameterEvent$GetParameterAsync() {
          return this.$context.get__workbookImpl().$getSingleParameterAsync(this.$context.get__parameterName());
        }
      });
      var $tab_StoryPointInfoImplUtil = global2.tab.StoryPointInfoImplUtil = ss.mkType($asm, "tab.StoryPointInfoImplUtil", null, null, {
        clone: function StoryPointInfoImplUtil$Clone(impl) {
          return $tab__StoryPointInfoImpl.$ctor(impl.caption, impl.index, impl.storyPointId, impl.isActive, impl.isUpdated, impl.parentStoryImpl);
        }
      });
      var $tab_StoryPointSwitchEvent = global2.tab.StoryPointSwitchEvent = ss.mkType($asm, "tab.StoryPointSwitchEvent", function(eventName, viz, oldStoryPointInfo, newStoryPoint) {
        this.$oldStoryPointInfo = null;
        this.$newStoryPoint = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$oldStoryPointInfo = oldStoryPointInfo;
        this.$newStoryPoint = newStoryPoint;
      }, {
        getOldStoryPointInfo: function StoryPointSwitchEvent$GetOldStoryPointInfo() {
          return this.$oldStoryPointInfo;
        },
        getNewStoryPoint: function StoryPointSwitchEvent$GetNewStoryPoint() {
          return this.$newStoryPoint;
        }
      });
      var $tab_TableauEvent = global2.tab.TableauEvent = ss.mkType($asm, "tab.TableauEvent", function(eventName, viz) {
        this.$viz = null;
        this.$eventName = null;
        this.$viz = viz;
        this.$eventName = eventName;
      }, {
        getViz: function TableauEvent$GetViz() {
          return this.$viz;
        },
        getEventName: function TableauEvent$GetEventName() {
          return this.$eventName;
        }
      });
      var $tab_TabSwitchEvent = global2.tab.TabSwitchEvent = ss.mkType($asm, "tab.TabSwitchEvent", function(eventName, viz, oldName, newName) {
        this.$oldName = null;
        this.$newName = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$oldName = oldName;
        this.$newName = newName;
      }, {
        getOldSheetName: function TabSwitchEvent$GetOldSheetName() {
          return this.$oldName;
        },
        getNewSheetName: function TabSwitchEvent$GetNewSheetName() {
          return this.$newName;
        }
      });
      var $tab_ToolbarStateEvent = global2.tab.ToolbarStateEvent = ss.mkType($asm, "tab.ToolbarStateEvent", function(eventName, viz, toolbarStateImpl) {
        this.$toolbarStateImpl = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$toolbarStateImpl = toolbarStateImpl;
      }, {
        getToolbarState: function ToolbarStateEvent$GetToolbarState() {
          return this.$toolbarStateImpl.get_toolbarState();
        }
      });
      var $tab_UrlActionEvent = global2.tab.UrlActionEvent = ss.mkType($asm, "tab.UrlActionEvent", function(eventName, viz, url, target) {
        this.$url = null;
        this.$target = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$url = url;
        this.$target = target;
      }, {
        getUrl: function UrlActionEvent$GetUrl() {
          return this.$url;
        },
        getTarget: function UrlActionEvent$GetTarget() {
          return this.$target;
        }
      });
      var $tab_VizImpl = global2.tab.VizImpl = ss.mkType($asm, "tab.VizImpl", function(messageRouter, viz, parentElement, url, options) {
        this.$workbookTabSwitchHandler = null;
        this.$viz = null;
        this.$iframe = null;
        this.$staticImage = null;
        this.$parameters = null;
        this.$initialAvailableSize = null;
        this.$instanceId = null;
        this.$workbookImpl = null;
        this.$onFirstInteractiveCallback = null;
        this.$onFirstVizSizeKnownCallback = null;
        this.$onFirstInteractiveAlreadyCalled = false;
        this.$areTabsHidden = false;
        this.$isToolbarHidden = false;
        this.$areAutomaticUpdatesPaused = false;
        this.$messagingOptions = null;
        this.$vizSize = null;
        this.$windowResizeHandler = null;
        this.$initializingWorkbookImpl = false;
        this.$1$CustomViewsListLoadField = null;
        this.$1$StateReadyForQueryField = null;
        this.$1$MarksSelectionField = null;
        this.$1$MarksHighlightField = null;
        this.$1$FilterChangeField = null;
        this.$1$ParameterValueChangeField = null;
        this.$1$CustomViewLoadField = null;
        this.$1$CustomViewSaveField = null;
        this.$1$CustomViewRemoveField = null;
        this.$1$CustomViewSetDefaultField = null;
        this.$1$TabSwitchField = null;
        this.$1$ToolbarStateChangeField = null;
        this.$1$StoryPointSwitchField = null;
        this.$1$VizResizeField = null;
        this.$1$UrlActionField = null;
        this.$1$CustomMarkContextMenuField = null;
        if (!tab._Utility.hasWindowPostMessage() || !tab._Utility.hasJsonParse()) {
          throw tab._TableauException.createBrowserNotCapable();
        }
        this.$messagingOptions = new $tab_JsApiMessagingOptions(messageRouter, this);
        this.$viz = viz;
        if (ss.isNullOrUndefined(parentElement) || parentElement.nodeType !== 1) {
          parentElement = document.body;
        }
        this.$parameters = new $tab__VizParameters(parentElement, url, options);
        if (ss.isValue(options)) {
          this.$onFirstInteractiveCallback = options.onFirstInteractive;
          this.$onFirstVizSizeKnownCallback = options.onFirstVizSizeKnown;
        }
      }, {
        add_customViewsListLoad: function VizImpl$add_CustomViewsListLoad(value) {
          this.$1$CustomViewsListLoadField = ss.delegateCombine(this.$1$CustomViewsListLoadField, value);
        },
        remove_customViewsListLoad: function VizImpl$remove_CustomViewsListLoad(value) {
          this.$1$CustomViewsListLoadField = ss.delegateRemove(this.$1$CustomViewsListLoadField, value);
        },
        add_stateReadyForQuery: function VizImpl$add_StateReadyForQuery(value) {
          this.$1$StateReadyForQueryField = ss.delegateCombine(this.$1$StateReadyForQueryField, value);
        },
        remove_stateReadyForQuery: function VizImpl$remove_StateReadyForQuery(value) {
          this.$1$StateReadyForQueryField = ss.delegateRemove(this.$1$StateReadyForQueryField, value);
        },
        add_$marksSelection: function VizImpl$add_MarksSelection(value) {
          this.$1$MarksSelectionField = ss.delegateCombine(this.$1$MarksSelectionField, value);
        },
        remove_$marksSelection: function VizImpl$remove_MarksSelection(value) {
          this.$1$MarksSelectionField = ss.delegateRemove(this.$1$MarksSelectionField, value);
        },
        add_$marksHighlight: function VizImpl$add_MarksHighlight(value) {
          this.$1$MarksHighlightField = ss.delegateCombine(this.$1$MarksHighlightField, value);
        },
        remove_$marksHighlight: function VizImpl$remove_MarksHighlight(value) {
          this.$1$MarksHighlightField = ss.delegateRemove(this.$1$MarksHighlightField, value);
        },
        add_$filterChange: function VizImpl$add_FilterChange(value) {
          this.$1$FilterChangeField = ss.delegateCombine(this.$1$FilterChangeField, value);
        },
        remove_$filterChange: function VizImpl$remove_FilterChange(value) {
          this.$1$FilterChangeField = ss.delegateRemove(this.$1$FilterChangeField, value);
        },
        add_$parameterValueChange: function VizImpl$add_ParameterValueChange(value) {
          this.$1$ParameterValueChangeField = ss.delegateCombine(this.$1$ParameterValueChangeField, value);
        },
        remove_$parameterValueChange: function VizImpl$remove_ParameterValueChange(value) {
          this.$1$ParameterValueChangeField = ss.delegateRemove(this.$1$ParameterValueChangeField, value);
        },
        add_$customViewLoad: function VizImpl$add_CustomViewLoad(value) {
          this.$1$CustomViewLoadField = ss.delegateCombine(this.$1$CustomViewLoadField, value);
        },
        remove_$customViewLoad: function VizImpl$remove_CustomViewLoad(value) {
          this.$1$CustomViewLoadField = ss.delegateRemove(this.$1$CustomViewLoadField, value);
        },
        add_$customViewSave: function VizImpl$add_CustomViewSave(value) {
          this.$1$CustomViewSaveField = ss.delegateCombine(this.$1$CustomViewSaveField, value);
        },
        remove_$customViewSave: function VizImpl$remove_CustomViewSave(value) {
          this.$1$CustomViewSaveField = ss.delegateRemove(this.$1$CustomViewSaveField, value);
        },
        add_$customViewRemove: function VizImpl$add_CustomViewRemove(value) {
          this.$1$CustomViewRemoveField = ss.delegateCombine(this.$1$CustomViewRemoveField, value);
        },
        remove_$customViewRemove: function VizImpl$remove_CustomViewRemove(value) {
          this.$1$CustomViewRemoveField = ss.delegateRemove(this.$1$CustomViewRemoveField, value);
        },
        add_$customViewSetDefault: function VizImpl$add_CustomViewSetDefault(value) {
          this.$1$CustomViewSetDefaultField = ss.delegateCombine(this.$1$CustomViewSetDefaultField, value);
        },
        remove_$customViewSetDefault: function VizImpl$remove_CustomViewSetDefault(value) {
          this.$1$CustomViewSetDefaultField = ss.delegateRemove(this.$1$CustomViewSetDefaultField, value);
        },
        add_$tabSwitch: function VizImpl$add_TabSwitch(value) {
          this.$1$TabSwitchField = ss.delegateCombine(this.$1$TabSwitchField, value);
        },
        remove_$tabSwitch: function VizImpl$remove_TabSwitch(value) {
          this.$1$TabSwitchField = ss.delegateRemove(this.$1$TabSwitchField, value);
        },
        add_$toolbarStateChange: function VizImpl$add_ToolbarStateChange(value) {
          this.$1$ToolbarStateChangeField = ss.delegateCombine(this.$1$ToolbarStateChangeField, value);
        },
        remove_$toolbarStateChange: function VizImpl$remove_ToolbarStateChange(value) {
          this.$1$ToolbarStateChangeField = ss.delegateRemove(this.$1$ToolbarStateChangeField, value);
        },
        add_$storyPointSwitch: function VizImpl$add_StoryPointSwitch(value) {
          this.$1$StoryPointSwitchField = ss.delegateCombine(this.$1$StoryPointSwitchField, value);
        },
        remove_$storyPointSwitch: function VizImpl$remove_StoryPointSwitch(value) {
          this.$1$StoryPointSwitchField = ss.delegateRemove(this.$1$StoryPointSwitchField, value);
        },
        add_$vizResize: function VizImpl$add_VizResize(value) {
          this.$1$VizResizeField = ss.delegateCombine(this.$1$VizResizeField, value);
        },
        remove_$vizResize: function VizImpl$remove_VizResize(value) {
          this.$1$VizResizeField = ss.delegateRemove(this.$1$VizResizeField, value);
        },
        add_$urlAction: function VizImpl$add_UrlAction(value) {
          this.$1$UrlActionField = ss.delegateCombine(this.$1$UrlActionField, value);
        },
        remove_$urlAction: function VizImpl$remove_UrlAction(value) {
          this.$1$UrlActionField = ss.delegateRemove(this.$1$UrlActionField, value);
        },
        add_$customMarkContextMenu: function VizImpl$add_CustomMarkContextMenu(value) {
          this.$1$CustomMarkContextMenuField = ss.delegateCombine(this.$1$CustomMarkContextMenuField, value);
        },
        remove_$customMarkContextMenu: function VizImpl$remove_CustomMarkContextMenu(value) {
          this.$1$CustomMarkContextMenuField = ss.delegateRemove(this.$1$CustomMarkContextMenuField, value);
        },
        get_hostId: function VizImpl$get_HostId() {
          return this.$parameters.hostId;
        },
        set_hostId: function VizImpl$set_HostId(value) {
          this.$parameters.hostId = value;
        },
        get_iframe: function VizImpl$get_Iframe() {
          return this.$iframe;
        },
        get_instanceId: function VizImpl$get_InstanceId() {
          return this.$instanceId;
        },
        set_instanceId: function VizImpl$set_InstanceId(value) {
          this.$instanceId = value;
        },
        get_$viz: function VizImpl$get_Viz() {
          return this.$viz;
        },
        get_$areTabsHidden: function VizImpl$get_AreTabsHidden() {
          return this.$areTabsHidden;
        },
        get_$isToolbarHidden: function VizImpl$get_IsToolbarHidden() {
          return this.$isToolbarHidden;
        },
        get_$isHidden: function VizImpl$get_IsHidden() {
          return this.$iframe.style.display === "none";
        },
        get_$parentElement: function VizImpl$get_ParentElement() {
          return this.$parameters.parentElement;
        },
        get_$url: function VizImpl$get_Url() {
          return this.$parameters.get_baseUrl();
        },
        get_$workbook: function VizImpl$get_Workbook() {
          return this.$workbookImpl.get_workbook();
        },
        get__workbookImpl: function VizImpl$get_WorkbookImpl() {
          return this.$workbookImpl;
        },
        get_$areAutomaticUpdatesPaused: function VizImpl$get_AreAutomaticUpdatesPaused() {
          return this.$areAutomaticUpdatesPaused;
        },
        get_$vizSize: function VizImpl$get_VizSize() {
          return this.$vizSize;
        },
        getCurrentUrlAsync: function VizImpl$GetCurrentUrlAsync() {
          var deferred = new tab._Deferred();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [String]))("api.GetCurrentUrlCommand", 0, function(result) {
            deferred.resolve(result);
          }, function(remoteError, message) {
            deferred.reject(tab._TableauException.createInternalError(message));
          });
          this._sendCommand(String).call(this, null, returnHandler);
          return deferred.get_promise();
        },
        handleVizListening: function VizImpl$HandleVizListening() {
          this.$enableVisibleRectCommunication();
        },
        handleVizLoad: function VizImpl$HandleVizLoad() {
          if (ss.isNullOrUndefined(this.$vizSize)) {
            this.$setFrameSize(this.$initialAvailableSize.width + "px", this.$initialAvailableSize.height + "px");
            this.$show();
          }
          if (ss.isValue(this.$staticImage)) {
            this.$staticImage.style.display = "none";
          }
          if (ss.isNullOrUndefined(this.$workbookImpl)) {
            this.$workbookImpl = new $tab__WorkbookImpl(this, this.$messagingOptions, ss.mkdel(this, function() {
              this.$onWorkbookInteractive(null);
            }));
          } else if (!this.$initializingWorkbookImpl) {
            this.$workbookImpl._update(ss.mkdel(this, function() {
              this.$onWorkbookInteractive(null);
            }));
          }
          this.sendScaleFactor("-1");
        },
        $calculateFrameSize: function VizImpl$CalculateFrameSize(availableSize) {
          var chromeHeight = this.$vizSize.chromeHeight;
          var sheetSize = this.$vizSize.sheetSize;
          var width = 0;
          var height = 0;
          if (sheetSize.behavior === "exactly") {
            width = sheetSize.maxSize.width;
            height = sheetSize.maxSize.height + chromeHeight;
          } else {
            var minWidth;
            var maxWidth;
            var minHeight;
            var maxHeight;
            switch (sheetSize.behavior) {
              case "range": {
                minWidth = sheetSize.minSize.width;
                maxWidth = sheetSize.maxSize.width;
                minHeight = sheetSize.minSize.height + chromeHeight;
                maxHeight = sheetSize.maxSize.height + chromeHeight;
                width = Math.max(minWidth, Math.min(maxWidth, availableSize.width));
                height = Math.max(minHeight, Math.min(maxHeight, availableSize.height));
                break;
              }
              case "atleast": {
                minWidth = sheetSize.minSize.width;
                minHeight = sheetSize.minSize.height + chromeHeight;
                width = Math.max(minWidth, availableSize.width);
                height = Math.max(minHeight, availableSize.height);
                break;
              }
              case "atmost": {
                maxWidth = sheetSize.maxSize.width;
                maxHeight = sheetSize.maxSize.height + chromeHeight;
                width = Math.min(maxWidth, availableSize.width);
                height = Math.min(maxHeight, availableSize.height);
                break;
              }
              case "automatic": {
                width = availableSize.width;
                height = Math.max(availableSize.height, chromeHeight);
                break;
              }
              default: {
                throw tab._TableauException.createInternalError("Unknown SheetSizeBehavior for viz: " + sheetSize.behavior.toString());
              }
            }
          }
          return tab.Size.$ctor(width, height);
        },
        $getNewFrameSize: function VizImpl$GetNewFrameSize() {
          var availableSize;
          if (ss.isValue(this.$initialAvailableSize)) {
            availableSize = this.$initialAvailableSize;
            this.$initialAvailableSize = null;
          } else {
            availableSize = tab._Utility.computeContentSize(this.get_$parentElement());
          }
          this.$raiseVizResizeEvent(availableSize);
          return this.$calculateFrameSize(availableSize);
        },
        $refreshSize: function VizImpl$RefreshSize() {
          if (!ss.isValue(this.$vizSize)) {
            return;
          }
          var frameSize = this.$getNewFrameSize();
          if (frameSize.height === this.$vizSize.chromeHeight) {
            return;
          }
          this.$setFrameSize(frameSize.width + "px", frameSize.height + "px");
          var resizeAttempts = 10;
          for (var i = 0; i < resizeAttempts; i++) {
            var newFrameSize = this.$getNewFrameSize();
            if (ss.referenceEquals(JSON.stringify(frameSize), JSON.stringify(newFrameSize))) {
              return;
            }
            frameSize = newFrameSize;
            this.$setFrameSize(frameSize.width + "px", frameSize.height + "px");
          }
          throw tab._TableauException.create("maxVizResizeAttempts", "Viz resize limit hit. The calculated iframe size did not stabilize after " + resizeAttempts + " resizes.");
        },
        handleEventNotification: function VizImpl$HandleEventNotification(eventName, eventParameters) {
          var notification = tab._ApiServerNotification.deserialize(eventParameters);
          switch (eventName) {
            case "api.FirstVizSizeKnownEvent": {
              this.$handleFirstVizSizeKnownEvent(notification);
              break;
            }
            case "api.VizInteractiveEvent": {
              this.$handleVizInteractiveEvent(notification);
              break;
            }
            case "api.MarksSelectionChangedEvent": {
              this.$handleMarksSelectionChangedEvent(notification);
              break;
            }
            case "api.MarksHighlightChangedEvent": {
              this.$handleMarksHighlightChangedEvent(notification);
              break;
            }
            case "api.FilterChangedEvent": {
              this.$handleFilterChangedEvent(notification);
              break;
            }
            case "api.ParameterChangedEvent": {
              this.$handleParameterChangedEvent(notification);
              break;
            }
            case "api.CustomViewsListLoadedEvent": {
              this.$handleCustomViewsListLoadedEvent(notification);
              break;
            }
            case "api.CustomViewUpdatedEvent": {
              this.$handleCustomViewUpdatedEvent(notification);
              break;
            }
            case "api.CustomViewRemovedEvent": {
              this.$handleCustomViewRemovedEvent();
              break;
            }
            case "api.CustomViewSetDefaultEvent": {
              this.$handleCustomViewSetDefaultEvent(notification);
              break;
            }
            case "api.TabSwitchEvent": {
              this.$handleTabSwitchEvent(notification);
              break;
            }
            case "api.ToolbarStateChangedEvent": {
              this.$handleToolbarStateChangeEvent(notification);
              break;
            }
            case "api.StorytellingStateChangedEvent": {
              this.$handleStorytellingStateChangedEvent(notification);
              break;
            }
            case "api.UrlActionEvent": {
              this.$handleUrlActionEvent(notification);
              break;
            }
            case "api.CustomMarkMenuEvent": {
              this.$handleCustomMarkContextMenuEvent(notification);
              break;
            }
          }
        },
        addEventListener: function VizImpl$AddEventListener(eventName, handler) {
          var normalizedEventName = {};
          if (!tab.PublicEnums.tryNormalizeEnum(tab.ApiTableauEventName).call(null, eventName, normalizedEventName)) {
            throw tab._TableauException.createUnsupportedEventName(eventName.toString());
          }
          switch (normalizedEventName.$) {
            case "marksselection": {
              this.add_$marksSelection(ss.cast(handler, Function));
              break;
            }
            case "markshighlight": {
              this.add_$marksHighlight(ss.cast(handler, Function));
              break;
            }
            case "parametervaluechange": {
              this.add_$parameterValueChange(ss.cast(handler, Function));
              break;
            }
            case "filterchange": {
              this.add_$filterChange(ss.cast(handler, Function));
              break;
            }
            case "customviewload": {
              this.add_$customViewLoad(ss.cast(handler, Function));
              break;
            }
            case "customviewsave": {
              this.add_$customViewSave(ss.cast(handler, Function));
              break;
            }
            case "customviewremove": {
              this.add_$customViewRemove(ss.cast(handler, Function));
              break;
            }
            case "customviewsetdefault": {
              this.add_$customViewSetDefault(ss.cast(handler, Function));
              break;
            }
            case "tabswitch": {
              this.add_$tabSwitch(ss.cast(handler, Function));
              break;
            }
            case "storypointswitch": {
              this.add_$storyPointSwitch(ss.cast(handler, Function));
              break;
            }
            case "toolbarstatechange": {
              this.add_$toolbarStateChange(ss.cast(handler, Function));
              break;
            }
            case "vizresize": {
              this.add_$vizResize(ss.cast(handler, Function));
              break;
            }
            case "urlaction": {
              this.add_$urlAction(ss.cast(handler, Function));
              break;
            }
            case "custommarkcontextmenu": {
              this.add_$customMarkContextMenu(ss.cast(handler, Function));
              break;
            }
          }
        },
        removeEventListener: function VizImpl$RemoveEventListener(eventName, handler) {
          var normalizedEventName = {};
          if (!tab.PublicEnums.tryNormalizeEnum(tab.ApiTableauEventName).call(null, eventName, normalizedEventName)) {
            throw tab._TableauException.createUnsupportedEventName(eventName.toString());
          }
          switch (normalizedEventName.$) {
            case "marksselection": {
              this.remove_$marksSelection(ss.cast(handler, Function));
              break;
            }
            case "markshighlight": {
              this.remove_$marksHighlight(ss.cast(handler, Function));
              break;
            }
            case "parametervaluechange": {
              this.remove_$parameterValueChange(ss.cast(handler, Function));
              break;
            }
            case "filterchange": {
              this.remove_$filterChange(ss.cast(handler, Function));
              break;
            }
            case "customviewload": {
              this.remove_$customViewLoad(ss.cast(handler, Function));
              break;
            }
            case "customviewsave": {
              this.remove_$customViewSave(ss.cast(handler, Function));
              break;
            }
            case "customviewremove": {
              this.remove_$customViewRemove(ss.cast(handler, Function));
              break;
            }
            case "customviewsetdefault": {
              this.remove_$customViewSetDefault(ss.cast(handler, Function));
              break;
            }
            case "tabswitch": {
              this.remove_$tabSwitch(ss.cast(handler, Function));
              break;
            }
            case "toolbarstatechange": {
              this.remove_$toolbarStateChange(ss.cast(handler, Function));
              break;
            }
            case "storypointswitch": {
              this.remove_$storyPointSwitch(ss.cast(handler, Function));
              break;
            }
            case "vizresize": {
              this.remove_$vizResize(ss.cast(handler, Function));
              break;
            }
            case "urlaction": {
              this.remove_$urlAction(ss.cast(handler, Function));
              break;
            }
            case "custommarkcontextmenu": {
              this.remove_$customMarkContextMenu(ss.cast(handler, Function));
              break;
            }
          }
        },
        $dispose: function VizImpl$Dispose() {
          if (ss.isValue(this.$iframe)) {
            this.$iframe.parentNode.removeChild(this.$iframe);
            this.$iframe = null;
          }
          $tab__VizManagerImpl.$unregisterViz(this.$viz);
          this.$messagingOptions.get_router().unregisterHandler(this);
          this.$removeWindowResizeHandler();
        },
        $show: function VizImpl$Show() {
          this.$iframe.style.display = "block";
          this.$iframe.style.visibility = "visible";
        },
        $hide: function VizImpl$Hide() {
          this.$iframe.style.display = "none";
        },
        $makeInvisible: function VizImpl$MakeInvisible() {
          this.$iframe.style.visibility = "hidden";
        },
        $showDownloadDialog: function VizImpl$ShowDownloadDialog() {
          this.$invokeCommand("showDownloadDialog");
        },
        $showExportImageDialog: function VizImpl$ShowExportImageDialog() {
          this.$invokeCommand("showExportImageDialog");
        },
        $showExportDataDialog: function VizImpl$ShowExportDataDialog(sheetOrInfoOrName) {
          var sheetName = this.$verifyOperationAllowedOnActiveSheetOrSheetWithinActiveDashboard(sheetOrInfoOrName);
          this.$invokeCommand("showExportDataDialog", sheetName);
        },
        $showExportCrossTabDialog: function VizImpl$ShowExportCrossTabDialog(sheetOrInfoOrName) {
          var sheetName = this.$verifyOperationAllowedOnActiveSheetOrSheetWithinActiveDashboard(sheetOrInfoOrName);
          this.$invokeCommand("showExportCrosstabDialog", sheetName);
        },
        $showExportPDFDialog: function VizImpl$ShowExportPDFDialog() {
          this.$invokeCommand("showExportPDFDialog");
        },
        $showExportPowerPointDialog: function VizImpl$ShowExportPowerPointDialog() {
          this.$invokeCommand("showExportPowerPointDialog");
        },
        $exportCrossTabToExcel: function VizImpl$ExportCrossTabToExcel(sheetOrInfoOrName) {
          var sheetName = this.$verifyOperationAllowedOnActiveSheetOrSheetWithinActiveDashboard(sheetOrInfoOrName);
          this.$invokeCommand("exportCrosstabToExcel", sheetName);
        },
        $revertAllAsync: function VizImpl$RevertAllAsync() {
          return tab._Utility.noResultPromiseHelper("api.RevertAllCommand", null, this.$messagingOptions);
        },
        $refreshDataAsync: function VizImpl$RefreshDataAsync() {
          return tab._Utility.noResultPromiseHelper("api.RefreshDataCommand", null, this.$messagingOptions);
        },
        $showShareDialog: function VizImpl$ShowShareDialog() {
          this.$invokeCommand("showShareDialog");
        },
        $showDownloadWorkbookDialog: function VizImpl$ShowDownloadWorkbookDialog() {
          if (this.get__workbookImpl().get_isDownloadAllowed()) {
            this.$invokeCommand("showDownloadWorkbookDialog");
          } else {
            throw tab._TableauException.create("downloadWorkbookNotAllowed", "Download workbook is not allowed");
          }
        },
        $pauseAutomaticUpdatesAsync: function VizImpl$PauseAutomaticUpdatesAsync() {
          return this.$invokeAutomaticUpdatesCommandAsync("pauseAutomaticUpdates");
        },
        $resumeAutomaticUpdatesAsync: function VizImpl$ResumeAutomaticUpdatesAsync() {
          return this.$invokeAutomaticUpdatesCommandAsync("resumeAutomaticUpdates");
        },
        $toggleAutomaticUpdatesAsync: function VizImpl$ToggleAutomaticUpdatesAsync() {
          return this.$invokeAutomaticUpdatesCommandAsync("toggleAutomaticUpdates");
        },
        $setFrameSizeAndUpdate: function VizImpl$SetFrameSizeAndUpdate(width, height) {
          this.$raiseVizResizeEvent(tab.Size.$ctor(-1, -1));
          this.$setFrameSize(width, height);
          if (ss.isValue(this.$workbookImpl)) {
            this.$workbookImpl._updateActiveSheetAsync();
          }
        },
        $setAreAutomaticUpdatesPaused: function VizImpl$SetAreAutomaticUpdatesPaused(value) {
          this.$areAutomaticUpdatesPaused = value;
        },
        $contentRootElement: function VizImpl$ContentRootElement() {
          return this.$parameters.parentElement;
        },
        $create: function VizImpl$Create() {
          try {
            $tab__VizManagerImpl.$registerViz(this.$viz);
          } catch ($t1) {
            var e = ss.Exception.wrap($t1);
            this.$dispose();
            throw e;
          }
          if (!this.$parameters.fixedSize) {
            this.$initialAvailableSize = tab._Utility.computeContentSize(this.get_$parentElement());
            if (this.$initialAvailableSize.width === 0 || this.$initialAvailableSize.height === 0) {
              this.$initialAvailableSize = tab.Size.$ctor(800, 600);
            }
            this.$iframe = this.$createIframe();
            this.$makeInvisible();
            if (this.$parameters.displayStaticImage) {
              this.$staticImage = this.$createStaticImageElement(this.$initialAvailableSize.width + "px", this.$initialAvailableSize.height + "px");
              this.$staticImage.style.display = "block";
            }
          } else {
            if (this.$parameters.displayStaticImage) {
              this.$staticImage = this.$createStaticImageElement(this.$parameters.width, this.$parameters.height);
              this.$staticImage.style.display = "block";
            }
            this.$iframe = this.$createIframe();
            this.$show();
          }
          if (!tab._Utility.hasWindowPostMessage()) {
            if (tab._Utility.isIE()) {
              this.$iframe["onreadystatechange"] = this.$getOnCheckForDoneDelegate();
            } else {
              this.$iframe.onload = this.$getOnCheckForDoneDelegate();
            }
          }
          this.$isToolbarHidden = !this.$parameters.toolbar;
          this.$areTabsHidden = !this.$parameters.tabs;
          this.$messagingOptions.get_router().registerHandler(this);
          this.$iframe.src = this.$parameters.get_url();
        },
        $sendVisibleRect: function VizImpl$SendVisibleRect() {
          try {
            if (!tab._Utility.hasWindowPostMessage() || ss.isNullOrUndefined(this.$iframe) || !ss.isValue(this.$iframe.contentWindow)) {
              return;
            }
          } catch ($t1) {
            return;
          }
          var visibleRect = tab._Utility.visibleContentRectInDocumentCoordinates(this.get_iframe());
          var iframeContentRect = tab._Utility.contentRectInDocumentCoordinates(this.get_iframe());
          var command = new tab.NonApiCommand("layoutInfoResp", [(visibleRect.left - iframeContentRect.left).toString(), (visibleRect.top - iframeContentRect.top).toString(), visibleRect.width.toString(), visibleRect.height.toString()]);
          this.$iframe.contentWindow.postMessage(command.serialize(), "*");
        },
        $enableVisibleRectCommunication: function VizImpl$EnableVisibleRectCommunication() {
          if (!tab._Utility.hasWindowPostMessage() || ss.isNullOrUndefined(this.$iframe) || !ss.isValue(this.$iframe.contentWindow)) {
            return;
          }
          var command = new tab.NonApiCommand("tableau.enableVisibleRectCommunication", []);
          this.$iframe.contentWindow.postMessage(command.serialize(), "*");
        },
        $redoAsync: function VizImpl$RedoAsync() {
          return tab._Utility.noResultPromiseHelper("api.Redo", null, this.$messagingOptions);
        },
        $undoAsync: function VizImpl$UndoAsync() {
          return tab._Utility.noResultPromiseHelper("api.Undo", null, this.$messagingOptions);
        },
        sendScaleFactor: function VizImpl$SendScaleFactor(requestId) {
          var scaleFactor = document.documentElement.clientWidth / window.innerWidth;
          var scrollX = 0;
          var scrollY = 0;
          var command = new tab.NonApiCommand("sf", [requestId, scaleFactor.toString(), scrollX.toString(), scrollY.toString()]);
          if (ss.isValue(this.$iframe) && ss.isValue(this.$iframe.contentWindow)) {
            this.$iframe.contentWindow.postMessage(command.serialize(), "*");
          }
        },
        _sendCommand: function _sendCommand(T) {
          return function VizImpl$SendCommand(commandParameters, returnHandler) {
            this.$messagingOptions.sendCommand(T).call(this.$messagingOptions, commandParameters, returnHandler);
          };
        },
        $raiseParameterValueChange: function VizImpl$RaiseParameterValueChange(parameterName) {
          if (!ss.staticEquals(this.$1$ParameterValueChangeField, null)) {
            this.$1$ParameterValueChangeField(new $tab_ParameterEvent("parametervaluechange", this.$viz, parameterName));
          }
        },
        $raiseCustomViewLoad: function VizImpl$RaiseCustomViewLoad(customView) {
          this.get__workbookImpl()._update(ss.mkdel(this, function() {
            if (!ss.staticEquals(this.$1$CustomViewLoadField, null)) {
              this.$1$CustomViewLoadField(new $tab_CustomViewEvent("customviewload", this.$viz, ss.isValue(customView) ? customView._impl : null));
            }
          }));
        },
        $raiseCustomViewSave: function VizImpl$RaiseCustomViewSave(customView) {
          this.get__workbookImpl()._update(ss.mkdel(this, function() {
            if (!ss.staticEquals(this.$1$CustomViewSaveField, null)) {
              this.$1$CustomViewSaveField(new $tab_CustomViewEvent("customviewsave", this.$viz, customView._impl));
            }
          }));
        },
        $raiseCustomViewRemove: function VizImpl$RaiseCustomViewRemove(customView) {
          if (!ss.staticEquals(this.$1$CustomViewRemoveField, null)) {
            this.$1$CustomViewRemoveField(new $tab_CustomViewEvent("customviewremove", this.$viz, customView._impl));
          }
        },
        $raiseCustomViewSetDefault: function VizImpl$RaiseCustomViewSetDefault(customView) {
          if (!ss.staticEquals(this.$1$CustomViewSetDefaultField, null)) {
            this.$1$CustomViewSetDefaultField(new $tab_CustomViewEvent("customviewsetdefault", this.$viz, customView._impl));
          }
        },
        $raiseTabSwitch: function VizImpl$RaiseTabSwitch(oldSheetName, newSheetName) {
          if (!ss.staticEquals(this.$1$TabSwitchField, null)) {
            this.$1$TabSwitchField(new $tab_TabSwitchEvent("tabswitch", this.$viz, oldSheetName, newSheetName));
          }
        },
        raiseStoryPointSwitch: function VizImpl$RaiseStoryPointSwitch(oldStoryPointInfo, newStoryPoint) {
          if (!ss.staticEquals(this.$1$StoryPointSwitchField, null)) {
            this.$1$StoryPointSwitchField(new $tab_StoryPointSwitchEvent("storypointswitch", this.$viz, oldStoryPointInfo, newStoryPoint));
          }
        },
        $raiseStateReadyForQuery: function VizImpl$RaiseStateReadyForQuery() {
          if (!ss.staticEquals(this.$1$StateReadyForQueryField, null)) {
            this.$1$StateReadyForQueryField(this);
          }
        },
        $raiseCustomViewsListLoad: function VizImpl$RaiseCustomViewsListLoad() {
          if (!ss.staticEquals(this.$1$CustomViewsListLoadField, null)) {
            this.$1$CustomViewsListLoadField(this);
          }
        },
        $raiseVizResizeEvent: function VizImpl$RaiseVizResizeEvent(availableSize) {
          if (!ss.staticEquals(this.$1$VizResizeField, null)) {
            this.$1$VizResizeField(new $tab_VizResizeEvent("vizresize", this.$viz, availableSize));
          }
        },
        $raiseCustomMarkContextMenuEvent: function VizImpl$RaiseCustomMarkContextMenuEvent(notification) {
          if (!ss.staticEquals(this.$1$CustomMarkContextMenuField, null)) {
            var worksheetImpl = null;
            var activeSheetImpl = this.$workbookImpl.get_activeSheetImpl();
            if (activeSheetImpl.get_isStory()) {
              activeSheetImpl = ss.cast(activeSheetImpl, $tab__StoryImpl).get_activeStoryPointImpl().get_containedSheetImpl();
            }
            if (ss.referenceEquals(activeSheetImpl.get_name(), notification.get_worksheetName())) {
              worksheetImpl = ss.cast(activeSheetImpl, $tab__WorksheetImpl);
            } else if (activeSheetImpl.get_isDashboard()) {
              var dashboardImpl = ss.cast(activeSheetImpl, $tab__DashboardImpl);
              worksheetImpl = dashboardImpl.get_worksheets()._get(notification.get_worksheetName())._impl;
            }
            if (ss.isValue(worksheetImpl)) {
              worksheetImpl.set_selectedMarks(null);
              this.$1$CustomMarkContextMenuField(new $tab_CustomMarkContextMenuEvent("custommarkcontextmenu", this.$viz, notification.get_data().toString(), worksheetImpl));
            }
          }
        },
        $raiseUrlAction: function VizImpl$RaiseUrlAction(url, target) {
          if (!ss.staticEquals(this.$1$UrlActionField, null)) {
            this.$1$UrlActionField(new $tab_UrlActionEvent("urlaction", this.$viz, url, target));
          }
        },
        $setFrameSize: function VizImpl$SetFrameSize(width, height) {
          this.$parameters.width = width;
          this.$parameters.height = height;
          this.$iframe.style.width = this.$parameters.width;
          this.$iframe.style.height = this.$parameters.height;
        },
        $verifyOperationAllowedOnActiveSheetOrSheetWithinActiveDashboard: function VizImpl$VerifyOperationAllowedOnActiveSheetOrSheetWithinActiveDashboard(sheetOrInfoOrName) {
          if (ss.isNullOrUndefined(sheetOrInfoOrName)) {
            return null;
          }
          var sheetImpl = this.$workbookImpl.$findActiveSheetOrSheetWithinActiveDashboard(sheetOrInfoOrName);
          if (ss.isNullOrUndefined(sheetImpl)) {
            throw tab._TableauException.createNotActiveSheet();
          }
          return sheetImpl.get_name();
        },
        $invokeAutomaticUpdatesCommandAsync: function VizImpl$InvokeAutomaticUpdatesCommandAsync(command) {
          if (command !== "pauseAutomaticUpdates" && command !== "resumeAutomaticUpdates" && command !== "toggleAutomaticUpdates") {
            throw tab._TableauException.createInternalError(null);
          }
          var param = {};
          param["api.invokeCommandName"] = command;
          var deferred = new tab._Deferred();
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.InvokeCommandCommand", 0, ss.mkdel(this, function(result) {
            if (ss.isValue(result) && ss.isValue(result.isAutoUpdate)) {
              this.$areAutomaticUpdatesPaused = !result.isAutoUpdate;
            }
            deferred.resolve(this.$areAutomaticUpdatesPaused);
          }), function(remoteError, message) {
            deferred.reject(tab._TableauException.createServerError(message));
          });
          this._sendCommand(Object).call(this, param, returnHandler);
          return deferred.get_promise();
        },
        $invokeCommand: function VizImpl$InvokeCommand(command, sheetName) {
          if (command !== "showDownloadDialog" && command !== "showExportImageDialog" && command !== "showExportDataDialog" && command !== "showExportCrosstabDialog" && command !== "showExportPDFDialog" && command !== "showShareDialog" && command !== "showExportPowerPointDialog" && command !== "exportCrosstabToExcel" && command !== "showDownloadWorkbookDialog") {
            throw tab._TableauException.createInternalError(null);
          }
          var param = {};
          param["api.invokeCommandName"] = command;
          if (ss.isValue(sheetName)) {
            param["api.invokeCommandParam"] = sheetName;
          }
          var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))("api.InvokeCommandCommand", 0, null, null);
          this._sendCommand(Object).call(this, param, returnHandler);
        },
        $handleFirstVizSizeKnownEvent: function VizImpl$HandleFirstVizSizeKnownEvent(notification) {
          var size = JSON.parse(ss.cast(notification.get_data(), String));
          this.$handleInitialVizSize(size);
        },
        $handleVizInteractiveEvent: function VizImpl$HandleVizInteractiveEvent(notification) {
          if (ss.isValue(this.$workbookImpl) && ss.referenceEquals(this.$workbookImpl.get_name(), notification.get_workbookName())) {
            this.$onWorkbookInteractive(null);
          } else {
            this.$raiseStateReadyForQuery();
          }
        },
        $handleMarksSelectionChangedEvent: function VizImpl$HandleMarksSelectionChangedEvent(notification) {
          if (ss.staticEquals(this.$1$MarksSelectionField, null) || !ss.referenceEquals(this.$workbookImpl.get_name(), notification.get_workbookName())) {
            return;
          }
          var worksheetImpl = null;
          var activeSheetImpl = this.$workbookImpl.get_activeSheetImpl();
          if (activeSheetImpl.get_isStory()) {
            activeSheetImpl = ss.cast(activeSheetImpl, $tab__StoryImpl).get_activeStoryPointImpl().get_containedSheetImpl();
          }
          if (ss.referenceEquals(activeSheetImpl.get_name(), notification.get_worksheetName())) {
            worksheetImpl = ss.cast(activeSheetImpl, $tab__WorksheetImpl);
          } else if (activeSheetImpl.get_isDashboard()) {
            var dashboardImpl = ss.cast(activeSheetImpl, $tab__DashboardImpl);
            worksheetImpl = dashboardImpl.get_worksheets()._get(notification.get_worksheetName())._impl;
          }
          if (ss.isValue(worksheetImpl)) {
            worksheetImpl.set_selectedMarks(null);
            this.$1$MarksSelectionField(new $tab_MarksEvent("marksselection", this.$viz, worksheetImpl));
          }
        },
        $handleMarksHighlightChangedEvent: function VizImpl$HandleMarksHighlightChangedEvent(notification) {
          if (ss.staticEquals(this.$1$MarksHighlightField, null) || !ss.referenceEquals(this.$workbookImpl.get_name(), notification.get_workbookName())) {
            return;
          }
          var worksheetImpl = null;
          var activeSheetImpl = this.$workbookImpl.get_activeSheetImpl();
          if (activeSheetImpl.get_isStory()) {
            activeSheetImpl = ss.cast(activeSheetImpl, $tab__StoryImpl).get_activeStoryPointImpl().get_containedSheetImpl();
          }
          if (ss.referenceEquals(activeSheetImpl.get_name(), notification.get_worksheetName())) {
            worksheetImpl = ss.cast(activeSheetImpl, $tab__WorksheetImpl);
          } else if (activeSheetImpl.get_isDashboard()) {
            var dashboardImpl = ss.cast(activeSheetImpl, $tab__DashboardImpl);
            worksheetImpl = dashboardImpl.get_worksheets()._get(notification.get_worksheetName())._impl;
          }
          if (ss.isValue(worksheetImpl)) {
            worksheetImpl.highlightedMarks = null;
            this.$1$MarksHighlightField(new $tab_HighlightEvent("markshighlight", this.$viz, worksheetImpl));
          }
        },
        $handleFilterChangedEvent: function VizImpl$HandleFilterChangedEvent(notification) {
          if (ss.staticEquals(this.$1$FilterChangeField, null) || !ss.referenceEquals(this.$workbookImpl.get_name(), notification.get_workbookName())) {
            return;
          }
          var worksheetImpl = null;
          var activeSheetImpl = this.$workbookImpl.get_activeSheetImpl();
          if (ss.referenceEquals(activeSheetImpl.get_name(), notification.get_worksheetName())) {
            worksheetImpl = ss.cast(activeSheetImpl, $tab__WorksheetImpl);
          } else if (activeSheetImpl.get_isDashboard()) {
            var db = ss.cast(activeSheetImpl, $tab__DashboardImpl);
            worksheetImpl = db.get_worksheets()._get(notification.get_worksheetName())._impl;
          } else if (activeSheetImpl.get_isStory()) {
            var story = ss.cast(activeSheetImpl, $tab__StoryImpl);
            var activeStoryPoint = story.get_activeStoryPointImpl();
            var containedSheet = activeStoryPoint.get_containedSheetImpl();
            if (containedSheet.get_isDashboard()) {
              var db1 = ss.cast(containedSheet, $tab__DashboardImpl);
              worksheetImpl = db1.get_worksheets()._get(notification.get_worksheetName())._impl;
            } else if (ss.referenceEquals(containedSheet.get_name(), notification.get_worksheetName())) {
              worksheetImpl = ss.cast(containedSheet, $tab__WorksheetImpl);
            }
          }
          if (ss.isValue(worksheetImpl)) {
            var results = ss.cast(JSON.parse(ss.cast(notification.get_data(), String)), Array);
            var filterFieldName = results[0];
            var filterCaption = results[1];
            this.$1$FilterChangeField(new $tab_FilterEvent("filterchange", this.$viz, worksheetImpl, filterFieldName, filterCaption));
          }
        },
        $handleParameterChangedEvent: function VizImpl$HandleParameterChangedEvent(notification) {
          if (!ss.staticEquals(this.$1$ParameterValueChangeField, null)) {
            if (ss.referenceEquals(this.$workbookImpl.get_name(), notification.get_workbookName())) {
              this.$workbookImpl.set_$lastChangedParameterImpl(null);
              var parameterName = ss.cast(notification.get_data(), String);
              this.$raiseParameterValueChange(parameterName);
            }
          }
        },
        $handleCustomViewsListLoadedEvent: function VizImpl$HandleCustomViewsListLoadedEvent(notification) {
          var info = JSON.parse(ss.cast(notification.get_data(), String));
          var process2 = ss.mkdel(this, function() {
            $tab__CustomViewImpl._processCustomViews(this.$workbookImpl, this.$messagingOptions, info);
          });
          var raiseEvents = ss.mkdel(this, function() {
            this.$raiseCustomViewsListLoad();
            if (!ss.staticEquals(this.$1$CustomViewLoadField, null) && !info.customViewLoaded) {
              this.$raiseCustomViewLoad(this.$workbookImpl.get_activeCustomView());
            }
          });
          if (ss.isNullOrUndefined(this.$workbookImpl)) {
            this.$initializingWorkbookImpl = true;
            this.$workbookImpl = new $tab__WorkbookImpl(this, this.$messagingOptions, ss.mkdel(this, function() {
              process2();
              this.$onWorkbookInteractive(raiseEvents);
              this.$initializingWorkbookImpl = false;
            }));
          } else {
            process2();
            this.$ensureCalledAfterFirstInteractive(raiseEvents);
          }
        },
        $handleCustomViewUpdatedEvent: function VizImpl$HandleCustomViewUpdatedEvent(notification) {
          var info = JSON.parse(ss.cast(notification.get_data(), String));
          if (ss.isNullOrUndefined(this.$workbookImpl)) {
            this.$workbookImpl = new $tab__WorkbookImpl(this, this.$messagingOptions, null);
          }
          if (ss.isValue(this.$workbookImpl)) {
            $tab__CustomViewImpl._processCustomViewUpdate(this.$workbookImpl, this.$messagingOptions, info, true);
          }
          if (!ss.staticEquals(this.$1$CustomViewSaveField, null)) {
            var updated = this.$workbookImpl.get_$updatedCustomViews()._toApiCollection();
            for (var i = 0, len = updated.length; i < len; i++) {
              this.$raiseCustomViewSave(updated[i]);
            }
          }
        },
        $handleCustomViewRemovedEvent: function VizImpl$HandleCustomViewRemovedEvent() {
          if (!ss.staticEquals(this.$1$CustomViewRemoveField, null)) {
            var removed = this.$workbookImpl.get_$removedCustomViews()._toApiCollection();
            for (var i = 0, len = removed.length; i < len; i++) {
              this.$raiseCustomViewRemove(removed[i]);
            }
          }
        },
        $handleCustomViewSetDefaultEvent: function VizImpl$HandleCustomViewSetDefaultEvent(notification) {
          var info = JSON.parse(ss.cast(notification.get_data(), String));
          if (ss.isValue(this.$workbookImpl)) {
            $tab__CustomViewImpl._processCustomViews(this.$workbookImpl, this.$messagingOptions, info);
          }
          if (!ss.staticEquals(this.$1$CustomViewSetDefaultField, null) && ss.isValue(info.defaultCustomViewId)) {
            var views = this.$workbookImpl.get_$customViews();
            for (var i = 0; i < views.get__length(); i++) {
              var view = views.get_item(i);
              if (view.getDefault()) {
                this.$raiseCustomViewSetDefault(view);
                break;
              }
            }
          }
        },
        $handleTabSwitchEvent: function VizImpl$HandleTabSwitchEvent(notification) {
          this.$workbookImpl._update(ss.mkdel(this, function() {
            if (ss.isValue(this.$workbookTabSwitchHandler)) {
              this.$workbookTabSwitchHandler();
            }
            if (ss.referenceEquals(this.$workbookImpl.get_name(), notification.get_workbookName())) {
              var oldSheetName = notification.get_worksheetName();
              var currSheetName = ss.cast(notification.get_data(), String);
              this.$raiseTabSwitch(oldSheetName, currSheetName);
            }
            this.$onWorkbookInteractive(null);
          }));
        },
        $handleToolbarStateChangeEvent: function VizImpl$HandleToolbarStateChangeEvent(notification) {
          var toolbarStatePresModel = JSON.parse(ss.cast(notification.get_data(), String));
          var toolbarStateImpl = new $tab__ToolbarStateImpl(this, toolbarStatePresModel);
          if (!ss.staticEquals(this.$1$ToolbarStateChangeField, null)) {
            this.$1$ToolbarStateChangeField(new $tab_ToolbarStateEvent("toolbarstatechange", this.$viz, toolbarStateImpl));
          }
        },
        $handleStorytellingStateChangedEvent: function VizImpl$HandleStorytellingStateChangedEvent(notification) {
          var storyImpl = ss.cast(this.$workbookImpl.get_activeSheetImpl(), $tab__StoryImpl);
          if (storyImpl.get_sheetType() === "story") {
            storyImpl.update(JSON.parse(ss.cast(notification.get_data(), String)));
          }
        },
        $handleUrlActionEvent: function VizImpl$HandleUrlActionEvent(notification) {
          if (!ss.staticEquals(this.$1$UrlActionField, null)) {
            var pm = JSON.parse(ss.cast(notification.get_data(), String));
            this.$raiseUrlAction(pm.url, pm.target);
          }
        },
        $handleCustomMarkContextMenuEvent: function VizImpl$HandleCustomMarkContextMenuEvent(notification) {
          this.$raiseCustomMarkContextMenuEvent(notification);
        },
        $onWorkbookInteractive: function VizImpl$OnWorkbookInteractive(actionAfterFirstInteractive) {
          if (!this.$onFirstInteractiveAlreadyCalled) {
            var callback = this.$onFirstInteractiveCallback;
            window.setTimeout(ss.mkdel(this, function() {
              if (this.$onFirstInteractiveAlreadyCalled) {
                return;
              }
              if (!ss.staticEquals(callback, null)) {
                callback(new $tab_TableauEvent("firstinteractive", this.$viz));
              }
              if (!ss.staticEquals(actionAfterFirstInteractive, null)) {
                actionAfterFirstInteractive();
              }
              this.$onFirstInteractiveAlreadyCalled = true;
            }), 0);
          }
          this.$raiseStateReadyForQuery();
        },
        $ensureCalledAfterFirstInteractive: function VizImpl$EnsureCalledAfterFirstInteractive(action) {
          var start = /* @__PURE__ */ new Date();
          var poll = null;
          poll = ss.mkdel(this, function() {
            var now = /* @__PURE__ */ new Date();
            if (this.$onFirstInteractiveAlreadyCalled) {
              action();
            } else if (now - start > 5 * 60 * 1e3) {
              throw tab._TableauException.createInternalError("Timed out while waiting for the viz to become interactive");
            } else {
              window.setTimeout(poll, 10);
            }
          });
          poll();
        },
        $checkForDone: function VizImpl$CheckForDone() {
          if (tab._Utility.isIE()) {
            if (this.$iframe["readyState"] === "complete") {
              this.handleVizLoad();
            }
          } else {
            this.handleVizLoad();
          }
        },
        $onCheckForDone: function VizImpl$OnCheckForDone() {
          window.setTimeout(ss.mkdel(this, this.$checkForDone), 3e3);
        },
        $createStaticImageElement: function VizImpl$CreateStaticImageElement(width, height) {
          var $t1 = document.createElement("div");
          var img = ss.cast($t1, ss.isValue($t1) && ss.isInstanceOfType($t1, Element) && $t1.tagName === "DIV");
          img.style.background = "transparent url('" + this.$parameters.staticImageUrl + "') no-repeat scroll 0 0";
          img.style.left = "8px";
          img.style.top = this.$parameters.tabs ? "31px" : "9px";
          img.style.position = "absolute";
          img.style.width = width;
          img.style.height = height;
          this.$contentRootElement().appendChild(img);
          return img;
        },
        $createIframe: function VizImpl$CreateIframe() {
          if (ss.isNullOrUndefined(this.$contentRootElement())) {
            return null;
          }
          var $t1 = document.createElement("IFrame");
          var ifr = ss.cast($t1, ss.isValue($t1) && ss.isInstanceOfType($t1, window.Element) && $t1.tagName === "IFRAME");
          ifr.frameBorder = "0";
          ifr.setAttribute("allowTransparency", "true");
          ifr.setAttribute("allowFullScreen", "true");
          ifr.setAttribute("title", this.$getLocalizedTitle());
          ifr.marginHeight = "0";
          ifr.marginWidth = "0";
          ifr.style.display = "block";
          if (this.$parameters.fixedSize) {
            ifr.style.width = this.$parameters.width;
            ifr.style.height = this.$parameters.height;
            ifr.setAttribute("scrolling", "no");
          } else {
            ifr.style.width = "1px";
            ifr.style.height = "1px";
            ifr.setAttribute("scrolling", "no");
          }
          if (tab._Utility.isSafari()) {
            ifr.addEventListener("mousewheel", ss.mkdel(this, this.$onIframeMouseWheel), false);
          }
          this.$contentRootElement().appendChild(ifr);
          return ifr;
        },
        $getLocalizedTitle: function VizImpl$GetLocalizedTitle() {
          var lang;
          if (ss.isValue(window.navigator.language)) {
            lang = window.navigator.language;
          } else if (ss.isValue(window.navigator["userLanguage"])) {
            lang = window.navigator["userLanguage"];
          } else if (ss.isValue(window.navigator["browserLanguage"])) {
            lang = window.navigator["browserLanguage"];
          } else {
            lang = "en-US";
          }
          if (lang === "zh-CN") {
            return "æ•°æ®å¯è§†åŒ–";
          } else if (lang === "zh-TW") {
            return "è³‡æ–™å¯è¦–åŒ–";
          } else if (lang === "en-GB") {
            return "Data Visualisation";
          }
          switch (lang.substr(0, 2)) {
            case "fr": {
              return "Visualisation de donnÃ©es";
            }
            case "es": {
              return "VisualizaciÃ³n de datos";
            }
            case "it": {
              return "Visualizzazione dati";
            }
            case "pt": {
              return "VisualizaÃ§Ã£o de dados";
            }
            case "ja": {
              return "ãƒ‡ãƒ¼ã‚¿ ãƒ“ã‚¸ãƒ¥ã‚¢ãƒ©ã‚¤ã‚¼ãƒ¼ã‚·ãƒ§ãƒ³";
            }
            case "de": {
              return "Datenvisualisierung";
            }
            case "ko": {
              return "ë°ì´í„° ë¹„ì£¼ì–¼ë¦¬ì œì´ì…˜";
            }
            case "en":
            default: {
              return "Data Visualization";
            }
          }
        },
        $onIframeMouseWheel: function VizImpl$OnIframeMouseWheel(e) {
        },
        $getOnCheckForDoneDelegate: function VizImpl$GetOnCheckForDoneDelegate() {
          return ss.mkdel(this, function(e) {
            this.$onCheckForDone();
          });
        },
        $handleInitialVizSize: function VizImpl$HandleInitialVizSize(vizAndChromeSize) {
          var sheetSize = tab.SheetSizeFactory.fromSizeConstraints(vizAndChromeSize.sizeConstraints);
          this.$vizSize = $tab_VizSize.$ctor(sheetSize, vizAndChromeSize.chromeHeight);
          if (ss.isValue(this.$onFirstVizSizeKnownCallback)) {
            this.$onFirstVizSizeKnownCallback(new $tab_FirstVizSizeKnownEvent("firstvizsizeknown", this.$viz, this.$vizSize));
          }
          if (this.$parameters.fixedSize) {
            return;
          }
          this.$refreshSize();
          this.$addWindowResizeHandler();
          this.$show();
        },
        $removeWindowResizeHandler: function VizImpl$RemoveWindowResizeHandler() {
          if (ss.isNullOrUndefined(this.$windowResizeHandler)) {
            return;
          }
          if (tab._Utility.hasWindowAddEventListener()) {
            window.removeEventListener("resize", this.$windowResizeHandler, false);
          } else {
            window.self.detachEvent("onresize", this.$windowResizeHandler);
          }
          this.$windowResizeHandler = null;
        },
        $addWindowResizeHandler: function VizImpl$AddWindowResizeHandler() {
          if (ss.isValue(this.$windowResizeHandler)) {
            return;
          }
          this.$windowResizeHandler = ss.mkdel(this, function() {
            this.$refreshSize();
          });
          if (tab._Utility.hasWindowAddEventListener()) {
            window.addEventListener("resize", this.$windowResizeHandler, false);
          } else {
            window.self.attachEvent("onresize", this.$windowResizeHandler);
          }
        }
      });
      var $tab_VizResizeEvent = global2.tab.VizResizeEvent = ss.mkType($asm, "tab.VizResizeEvent", function(eventName, viz, availableSize) {
        this.$availableSize = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$availableSize = availableSize;
      }, {
        getAvailableSize: function VizResizeEvent$GetAvailableSize() {
          return this.$availableSize;
        }
      });
      var $tab_VizSize = global2.tab.VizSize = ss.mkType($asm, "tab.VizSize", null, null, {
        $ctor: function $ctor(sheetSize, chromeHeight) {
          var $this = new Object();
          $this.sheetSize = null;
          $this.chromeHeight = 0;
          $this.sheetSize = sheetSize;
          $this.chromeHeight = chromeHeight;
          return $this;
        },
        isInstanceOfType: function isInstanceOfType() {
          return true;
        }
      });
      var $tab_WorksheetEvent = global2.tab.WorksheetEvent = ss.mkType($asm, "tab.WorksheetEvent", function(eventName, viz, worksheetImpl) {
        this.$worksheetImpl = null;
        $tab_TableauEvent.call(this, eventName, viz);
        this.$worksheetImpl = worksheetImpl;
      }, {
        getWorksheet: function WorksheetEvent$GetWorksheet() {
          return this.$worksheetImpl.get_worksheet();
        }
      });
      var $tableauSoftware_CategoricalFilter = global2.tableauSoftware.CategoricalFilter = ss.mkType($asm, "tableauSoftware.CategoricalFilter", function(worksheetImpl, pm) {
        this.$isExclude = false;
        this.$isAllSelected = false;
        this.$appliedValues = null;
        $tableauSoftware_Filter.call(this, worksheetImpl, pm);
        this.$initializeFromJson$1(pm);
      }, {
        getIsExcludeMode: function CategoricalFilter$GetIsExcludeMode() {
          return this.$isExclude;
        },
        getIsAllSelected: function CategoricalFilter$GetIsAllSelected() {
          return this.$isAllSelected;
        },
        getAppliedValues: function CategoricalFilter$GetAppliedValues() {
          return this.$appliedValues;
        },
        _updateFromJson: function CategoricalFilter$UpdateFromJson(pm) {
          this.$initializeFromJson$1(pm);
        },
        $initializeFromJson$1: function CategoricalFilter$InitializeFromJson(pm) {
          this.$isExclude = pm.isExclude;
          this.$isAllSelected = pm.isAllSelected;
          if (ss.isValue(pm.appliedValues)) {
            this.$appliedValues = [];
            for (var $t1 = 0; $t1 < pm.appliedValues.length; $t1++) {
              var v = pm.appliedValues[$t1];
              this.$appliedValues.push(tab._Utility.getDataValue(v));
            }
          }
        }
      });
      var $tableauSoftware_CustomView = global2.tableauSoftware.CustomView = ss.mkType($asm, "tableauSoftware.CustomView", function(customViewImpl) {
        this._impl = null;
        this._impl = customViewImpl;
      }, {
        getWorkbook: function CustomView$GetWorkbook() {
          return this._impl.get_$workbook();
        },
        getUrl: function CustomView$GetUrl() {
          return this._impl.get_$url();
        },
        getName: function CustomView$GetName() {
          return this._impl.get_$name();
        },
        setName: function CustomView$SetName(value) {
          this._impl.set_$name(value);
        },
        getOwnerName: function CustomView$GetOwnerName() {
          return this._impl.get_$ownerName();
        },
        getAdvertised: function CustomView$GetAdvertised() {
          return this._impl.get_$advertised();
        },
        setAdvertised: function CustomView$SetAdvertised(value) {
          this._impl.set_$advertised(value);
        },
        getDefault: function CustomView$GetDefault() {
          return this._impl.get_$isDefault();
        },
        saveAsync: function CustomView$SaveAsync() {
          return this._impl.saveAsync();
        }
      });
      var $tableauSoftware_Dashboard = global2.tableauSoftware.Dashboard = ss.mkType($asm, "tableauSoftware.Dashboard", function(dashboardImpl) {
        this._impl = null;
        $tableauSoftware_Sheet.call(this, dashboardImpl);
      }, {
        getParentStoryPoint: function Dashboard$GetParentStoryPoint() {
          return this._impl.get_parentStoryPoint();
        },
        getObjects: function Dashboard$GetObjects() {
          return this._impl.get_objects()._toApiCollection();
        },
        getWorksheets: function Dashboard$GetWorksheets() {
          return this._impl.get_worksheets()._toApiCollection();
        },
        getFiltersAsync: function Dashboard$GetFiltersAsync() {
          return this._impl.$getFiltersAsync();
        },
        applyFilterAsync: function Dashboard$ApplyFilterAsync(fieldName, values, updateType, options) {
          return this._impl.$applyFilterAsync(fieldName, values, updateType, options);
        }
      });
      var $tableauSoftware_DashboardObject = global2.tableauSoftware.DashboardObject = ss.mkType($asm, "tableauSoftware.DashboardObject", function(frameInfo, dashboard, worksheet) {
        this.$zoneInfo = null;
        this.$dashboard = null;
        this.$worksheet = null;
        if (frameInfo.objectType === "worksheet" && ss.isNullOrUndefined(worksheet)) {
          throw tab._TableauException.createInternalError("worksheet parameter is required for WORKSHEET objects");
        } else if (frameInfo.objectType !== "worksheet" && ss.isValue(worksheet)) {
          throw tab._TableauException.createInternalError("worksheet parameter should be undefined for non-WORKSHEET objects");
        }
        this.$zoneInfo = frameInfo;
        this.$dashboard = dashboard;
        this.$worksheet = worksheet;
      }, {
        getObjectType: function DashboardObject$GetObjectType() {
          return this.$zoneInfo.objectType;
        },
        getDashboard: function DashboardObject$GetDashboard() {
          return this.$dashboard;
        },
        getWorksheet: function DashboardObject$GetWorksheet() {
          return this.$worksheet;
        },
        getPosition: function DashboardObject$GetPosition() {
          return this.$zoneInfo.position;
        },
        getSize: function DashboardObject$GetSize() {
          return this.$zoneInfo.size;
        }
      });
      var $tableauSoftware_DataSource = global2.tableauSoftware.DataSource = ss.mkType($asm, "tableauSoftware.DataSource", function(impl) {
        this.$impl = null;
        this.$impl = impl;
      }, {
        getName: function DataSource$GetName() {
          return this.$impl.get_name();
        },
        getFields: function DataSource$GetFields() {
          return this.$impl.get_fields()._toApiCollection();
        },
        getIsPrimary: function DataSource$GetIsPrimary() {
          return this.$impl.get_isPrimary();
        }
      });
      var $tableauSoftware_Field = global2.tableauSoftware.Field = ss.mkType($asm, "tableauSoftware.Field", function(dataSource, name, fieldRoleType, fieldAggrType) {
        this.$dataSource = null;
        this.$name = null;
        this.$fieldRoleType = null;
        this.$fieldAggrType = null;
        this.$dataSource = dataSource;
        this.$name = name;
        this.$fieldRoleType = fieldRoleType;
        this.$fieldAggrType = fieldAggrType;
      }, {
        getDataSource: function Field$GetDataSource() {
          return this.$dataSource;
        },
        getName: function Field$GetName() {
          return this.$name;
        },
        getRole: function Field$GetRole() {
          return this.$fieldRoleType;
        },
        getAggregation: function Field$GetAggregation() {
          return this.$fieldAggrType;
        }
      });
      var $tableauSoftware_Filter = global2.tableauSoftware.Filter = ss.mkType($asm, "tableauSoftware.Filter", function(worksheetImpl, pm) {
        this.$worksheetImpl = null;
        this.$type = null;
        this.$fieldCaption = null;
        this.$fieldName = null;
        this.$field = null;
        this.$dataSourceName = null;
        this.$fieldRole = null;
        this.$fieldAggregation = null;
        this.$worksheetImpl = worksheetImpl;
        this.$initializeFromJson(pm);
      }, {
        getFilterType: function Filter$GetFilterType() {
          return this.$type;
        },
        getFieldName: function Filter$GetFieldName() {
          return this.$fieldCaption;
        },
        getWorksheet: function Filter$GetWorksheet() {
          return this.$worksheetImpl.get_worksheet();
        },
        getFieldAsync: function Filter$GetFieldAsync() {
          var deferred = new tab._Deferred();
          if (ss.isNullOrUndefined(this.$field)) {
            var rejected = function rejected2(e) {
              deferred.reject(e);
              return null;
            };
            var fulfilled = ss.mkdel(this, function(value) {
              this.$field = new $tableauSoftware_Field(value, this.$fieldCaption, this.$fieldRole, this.$fieldAggregation);
              deferred.resolve(this.$field);
              return null;
            });
            this.$worksheetImpl.$getDataSourceAsync(this.$dataSourceName).then(fulfilled, rejected);
          } else {
            window.setTimeout(ss.mkdel(this, function() {
              deferred.resolve(this.$field);
            }), 0);
          }
          return deferred.get_promise();
        },
        getAppliedWorksheetsAsync: function Filter$GetAppliedWorksheetsAsync() {
          return this.$worksheetImpl.$getAppliedWorksheetsAsync(this.getWorksheet().getName(), this.$fieldName);
        },
        setAppliedWorksheetsAsync: function Filter$SetAppliedWorksheetsAsync(applyToWorksheets) {
          return this.$worksheetImpl.$setAppliedWorksheetsAsync(applyToWorksheets, this.getWorksheet().getName(), this.$fieldName, this.$fieldCaption);
        },
        _update: function Filter$Update(pm) {
          this.$initializeFromJson(pm);
          this._updateFromJson(pm);
        },
        _addFieldParams: function Filter$AddFieldParams(param) {
        },
        _updateFromJson: null,
        $initializeFromJson: function Filter$InitializeFromJson(pm) {
          this.$fieldName = pm.fieldName;
          this.$fieldCaption = pm.caption;
          this.$type = tab.ApiEnumConverter.convertFilterType(pm.filterType);
          this.$field = null;
          this.$dataSourceName = pm.dataSourceName;
          this.$fieldRole = tab.ApiEnumConverter.convertFieldRole(ss.coalesce(pm.fieldRole, "unknown"));
          this.$fieldAggregation = tab.ApiEnumConverter.convertFieldAggregation(ss.coalesce(pm.fieldAggregation, "NONE"));
        }
      }, {
        $createFilter: function Filter$CreateFilter(worksheetImpl, pm) {
          switch (pm.filterType) {
            case "categorical": {
              return new $tableauSoftware_CategoricalFilter(worksheetImpl, pm);
            }
            case "relativedate": {
              return new $tableauSoftware_RelativeDateFilter(worksheetImpl, pm);
            }
            case "hierarchical": {
              return new $tableauSoftware_HierarchicalFilter(worksheetImpl, pm);
            }
            case "quantitative": {
              return new $tableauSoftware_QuantitativeFilter(worksheetImpl, pm);
            }
          }
          return null;
        },
        processFiltersList: function Filter$ProcessFiltersList(worksheetImpl, filtersListDict) {
          var filterCaptions = new tab._Collection();
          for (var $t1 = 0; $t1 < filtersListDict.filters.length; $t1++) {
            var filterPm = filtersListDict.filters[$t1];
            if (!filterCaptions._has(filterPm.caption)) {
              filterCaptions._add(filterPm.caption, filterPm.caption);
            }
          }
          var filters = new tab._Collection();
          for (var $t2 = 0; $t2 < filtersListDict.filters.length; $t2++) {
            var filterPm1 = filtersListDict.filters[$t2];
            var filter = $tableauSoftware_Filter.$createFilter(worksheetImpl, filterPm1);
            if (!filters._has(filterPm1.caption)) {
              filters._add(filterPm1.caption, filter);
              continue;
            }
            var filterCollectionKey = filterPm1.caption.toString() + "_" + filterPm1.filterType.toString();
            var filterCollectionKeyNumbered = filterCollectionKey;
            var numberLabel = 1;
            while (filterCaptions._has(filterCollectionKeyNumbered)) {
              filterCollectionKeyNumbered = filterCollectionKey + "_" + numberLabel;
              numberLabel++;
            }
            filters._add(filterCollectionKeyNumbered, filter);
          }
          return filters;
        }
      });
      var $tableauSoftware_HierarchicalFilter = global2.tableauSoftware.HierarchicalFilter = ss.mkType($asm, "tableauSoftware.HierarchicalFilter", function(worksheetImpl, pm) {
        this.$levels = 0;
        $tableauSoftware_Filter.call(this, worksheetImpl, pm);
        this.$initializeFromJson$1(pm);
      }, {
        _addFieldParams: function HierarchicalFilter$AddFieldParams(param) {
          param["api.filterHierarchicalLevels"] = this.$levels;
        },
        _updateFromJson: function HierarchicalFilter$UpdateFromJson(pm) {
          this.$initializeFromJson$1(pm);
        },
        $initializeFromJson$1: function HierarchicalFilter$InitializeFromJson(pm) {
          this.$levels = pm.levels;
        }
      });
      var $tableauSoftware_Parameter = global2.tableauSoftware.Parameter = ss.mkType($asm, "tableauSoftware.Parameter", function(impl) {
        this._impl = null;
        this._impl = impl;
      }, {
        getName: function Parameter$GetName() {
          return this._impl.get_$name();
        },
        getCurrentValue: function Parameter$GetCurrentValue() {
          return this._impl.get_$currentValue();
        },
        getDataType: function Parameter$GetDataType() {
          return this._impl.get_$dataType();
        },
        getAllowableValuesType: function Parameter$GetAllowableValuesType() {
          return this._impl.get_$allowableValuesType();
        },
        getAllowableValues: function Parameter$GetAllowableValues() {
          return this._impl.get_$allowableValues();
        },
        getMinValue: function Parameter$GetMinValue() {
          return this._impl.get_$minValue();
        },
        getMaxValue: function Parameter$GetMaxValue() {
          return this._impl.get_$maxValue();
        },
        getStepSize: function Parameter$GetStepSize() {
          return this._impl.get_$stepSize();
        },
        getDateStepPeriod: function Parameter$GetDateStepPeriod() {
          return this._impl.get_$dateStepPeriod();
        }
      });
      var $tableauSoftware_QuantitativeFilter = global2.tableauSoftware.QuantitativeFilter = ss.mkType($asm, "tableauSoftware.QuantitativeFilter", function(worksheetImpl, pm) {
        this.$domainMin = null;
        this.$domainMax = null;
        this.$min = null;
        this.$max = null;
        this.$includeNullValues = false;
        $tableauSoftware_Filter.call(this, worksheetImpl, pm);
        this.$initializeFromJson$1(pm);
      }, {
        getMin: function QuantitativeFilter$GetMin() {
          return this.$min;
        },
        getMax: function QuantitativeFilter$GetMax() {
          return this.$max;
        },
        getIncludeNullValues: function QuantitativeFilter$GetIncludeNullValues() {
          return this.$includeNullValues;
        },
        getDomainMin: function QuantitativeFilter$GetDomainMin() {
          return this.$domainMin;
        },
        getDomainMax: function QuantitativeFilter$GetDomainMax() {
          return this.$domainMax;
        },
        _updateFromJson: function QuantitativeFilter$UpdateFromJson(pm) {
          this.$initializeFromJson$1(pm);
        },
        $initializeFromJson$1: function QuantitativeFilter$InitializeFromJson(pm) {
          this.$domainMin = tab._Utility.getDataValue(pm.domainMinValue);
          this.$domainMax = tab._Utility.getDataValue(pm.domainMaxValue);
          this.$min = tab._Utility.getDataValue(pm.minValue);
          this.$max = tab._Utility.getDataValue(pm.maxValue);
          this.$includeNullValues = pm.includeNullValues;
        }
      });
      var $tableauSoftware_RelativeDateFilter = global2.tableauSoftware.RelativeDateFilter = ss.mkType($asm, "tableauSoftware.RelativeDateFilter", function(worksheetImpl, pm) {
        this.$periodType = null;
        this.$rangeType = null;
        this.$rangeN = 0;
        $tableauSoftware_Filter.call(this, worksheetImpl, pm);
        this.$initializeFromJson$1(pm);
      }, {
        getPeriod: function RelativeDateFilter$GetPeriod() {
          return this.$periodType;
        },
        getRange: function RelativeDateFilter$GetRange() {
          return this.$rangeType;
        },
        getRangeN: function RelativeDateFilter$GetRangeN() {
          return this.$rangeN;
        },
        _updateFromJson: function RelativeDateFilter$UpdateFromJson(pm) {
          this.$initializeFromJson$1(pm);
        },
        $initializeFromJson$1: function RelativeDateFilter$InitializeFromJson(pm) {
          if (ss.isValue(pm.periodType)) {
            this.$periodType = tab.ApiEnumConverter.convertPeriodType(ss.unbox(pm.periodType));
          }
          if (ss.isValue(pm.rangeType)) {
            this.$rangeType = tab.ApiEnumConverter.convertDateRange(ss.unbox(pm.rangeType));
          }
          if (ss.isValue(pm.rangeN)) {
            this.$rangeN = ss.unbox(pm.rangeN);
          }
        }
      });
      var $tableauSoftware_Sheet = global2.tableauSoftware.Sheet = ss.mkType($asm, "tableauSoftware.Sheet", function(sheetImpl) {
        this._impl = null;
        tab._Param.verifyValue(sheetImpl, "sheetImpl");
        this._impl = sheetImpl;
      }, {
        getName: function Sheet$GetName() {
          return this._impl.get_name();
        },
        getIndex: function Sheet$GetIndex() {
          return this._impl.get_index();
        },
        getWorkbook: function Sheet$GetWorkbook() {
          return this._impl.get_workbookImpl().get_workbook();
        },
        getSize: function Sheet$GetSize() {
          return this._impl.get_size();
        },
        getIsHidden: function Sheet$GetIsHidden() {
          return this._impl.get_isHidden();
        },
        getIsActive: function Sheet$GetIsActive() {
          return this._impl.get_isActive();
        },
        getSheetType: function Sheet$GetSheetType() {
          return this._impl.get_sheetType();
        },
        getUrl: function Sheet$GetUrl() {
          return this._impl.get_url();
        },
        changeSizeAsync: function Sheet$ChangeSizeAsync(size) {
          return this._impl.changeSizeAsync(size);
        }
      });
      var $tableauSoftware_SheetInfo = global2.tableauSoftware.SheetInfo = ss.mkType($asm, "tableauSoftware.SheetInfo", function(impl) {
        this.$impl = null;
        this.$impl = impl;
      }, {
        getName: function ApiSheetInfo$GetName() {
          return this.$impl.name;
        },
        getSheetType: function ApiSheetInfo$GetSheetType() {
          return this.$impl.sheetType;
        },
        getSize: function ApiSheetInfo$GetSize() {
          return this.$impl.size;
        },
        getIndex: function ApiSheetInfo$GetIndex() {
          return this.$impl.index;
        },
        getUrl: function ApiSheetInfo$GetUrl() {
          return this.$impl.url;
        },
        getIsActive: function ApiSheetInfo$GetIsActive() {
          return this.$impl.isActive;
        },
        getIsHidden: function ApiSheetInfo$GetIsHidden() {
          return this.$impl.isHidden;
        },
        getWorkbook: function ApiSheetInfo$GetWorkbook() {
          return this.$impl.workbook;
        }
      });
      var $tableauSoftware_Story = global2.tableauSoftware.Story = ss.mkType($asm, "tableauSoftware.Story", function(storyImpl) {
        this._impl = null;
        $tableauSoftware_Sheet.call(this, storyImpl);
      }, {
        getActiveStoryPoint: function Story$GetActiveStoryPoint() {
          return this._impl.get_activeStoryPointImpl().get_storyPoint();
        },
        getStoryPointsInfo: function Story$GetStoryPointsInfo() {
          return this._impl.get_storyPointsInfo();
        },
        activatePreviousStoryPointAsync: function Story$ActivatePreviousStoryPointAsync() {
          return this._impl.activatePreviousStoryPointAsync();
        },
        activateNextStoryPointAsync: function Story$ActivateNextStoryPointAsync() {
          return this._impl.activateNextStoryPointAsync();
        },
        activateStoryPointAsync: function Story$ActivateStoryPointAsync(index) {
          return this._impl.activateStoryPointAsync(index);
        },
        revertStoryPointAsync: function Story$RevertStoryPointAsync(index) {
          return this._impl.revertStoryPointAsync(index);
        }
      });
      var $tableauSoftware_StoryPoint = global2.tableauSoftware.StoryPoint = ss.mkType($asm, "tableauSoftware.StoryPoint", function(impl) {
        this.$impl = null;
        this.$impl = impl;
      }, {
        getCaption: function StoryPoint$GetCaption() {
          return this.$impl.get_caption();
        },
        getContainedSheet: function StoryPoint$GetContainedSheet() {
          return ss.isValue(this.$impl.get_containedSheetImpl()) ? this.$impl.get_containedSheetImpl().get_sheet() : null;
        },
        getIndex: function StoryPoint$GetIndex() {
          return this.$impl.get_index();
        },
        getIsActive: function StoryPoint$GetIsActive() {
          return this.$impl.get_isActive();
        },
        getIsUpdated: function StoryPoint$GetIsUpdated() {
          return this.$impl.get_isUpdated();
        },
        getParentStory: function StoryPoint$GetParentStory() {
          return this.$impl.get_parentStoryImpl().get_story();
        }
      });
      var $tableauSoftware_StoryPointInfo = global2.tableauSoftware.StoryPointInfo = ss.mkType($asm, "tableauSoftware.StoryPointInfo", function(impl) {
        this._impl = null;
        this._impl = impl;
      }, {
        getCaption: function StoryPointInfo$GetCaption() {
          return this._impl.caption;
        },
        getIndex: function StoryPointInfo$GetIndex() {
          return this._impl.index;
        },
        getIsActive: function StoryPointInfo$GetIsActive() {
          return this._impl.isActive;
        },
        getIsUpdated: function StoryPointInfo$GetIsUpdated() {
          return this._impl.isUpdated;
        },
        getParentStory: function StoryPointInfo$GetParentStory() {
          return this._impl.parentStoryImpl.get_story();
        }
      });
      var $tableauSoftware_ToolbarState = global2.tableauSoftware.ToolbarState = ss.mkType($asm, "tableauSoftware.ToolbarState", function(toolbarStateImpl) {
        this._impl = null;
        this._impl = toolbarStateImpl;
      }, {
        getViz: function ToolbarState$GetViz() {
          return this._impl.get_viz();
        },
        isButtonEnabled: function ToolbarState$IsButtonEnabled(toolbarButtonName) {
          return this._impl.isButtonEnabled(toolbarButtonName);
        }
      });
      var $tableauSoftware_Version = global2.tableauSoftware.Version = ss.mkType($asm, "tableauSoftware.Version", function(major, minor, patch, metadata) {
        this.$major = 0;
        this.$minor = 0;
        this.$patch = 0;
        this.$metadata = null;
        this.$major = major;
        this.$minor = minor;
        this.$patch = patch;
        this.$metadata = ss.coalesce(metadata, null);
      }, {
        getMajor: function Version$GetMajor() {
          return this.$major;
        },
        getMinor: function Version$GetMinor() {
          return this.$minor;
        },
        getPatch: function Version$GetPatch() {
          return this.$patch;
        },
        getMetadata: function Version$GetMetadata() {
          return this.$metadata;
        },
        toString: function Version$ToString() {
          var version = this.$major + "." + this.$minor + "." + this.$patch;
          if (ss.isValue(this.$metadata) && this.$metadata.length > 0) {
            version += "-" + this.$metadata;
          }
          return version;
        }
      }, {
        getCurrent: function Version$GetCurrent() {
          return $tableauSoftware_Version.$currentVersion;
        }
      });
      var $tableauSoftware_Viz = global2.tableauSoftware.Viz = ss.mkType($asm, "tableauSoftware.Viz", function(parentElement, url, options) {
        this._impl = null;
        var messageRouter = tab._ApiObjectRegistry.getApiMessageRouter();
        this._impl = new $tab_VizImpl(messageRouter, this, parentElement, url, options);
        this._impl.$create();
      }, {
        getAreTabsHidden: function Viz$GetAreTabsHidden() {
          return this._impl.get_$areTabsHidden();
        },
        getIsToolbarHidden: function Viz$GetIsToolbarHidden() {
          return this._impl.get_$isToolbarHidden();
        },
        getIsHidden: function Viz$GetIsHidden() {
          return this._impl.get_$isHidden();
        },
        getInstanceId: function Viz$GetInstanceId() {
          return this._impl.get_instanceId();
        },
        getParentElement: function Viz$GetParentElement() {
          return this._impl.get_$parentElement();
        },
        getUrl: function Viz$GetUrl() {
          return this._impl.get_$url();
        },
        getVizSize: function Viz$GetVizSize() {
          return this._impl.get_$vizSize();
        },
        getWorkbook: function Viz$GetWorkbook() {
          return this._impl.get_$workbook();
        },
        getAreAutomaticUpdatesPaused: function Viz$GetAreAutomaticUpdatesPaused() {
          return this._impl.get_$areAutomaticUpdatesPaused();
        },
        getCurrentUrlAsync: function Viz$GetCurrentUrlAsync() {
          return this._impl.getCurrentUrlAsync();
        },
        addEventListener: function Viz$AddEventListener(eventName, handler) {
          this._impl.addEventListener(eventName, handler);
        },
        removeEventListener: function Viz$RemoveEventListener(eventName, handler) {
          this._impl.removeEventListener(eventName, handler);
        },
        dispose: function Viz$Dispose() {
          this._impl.$dispose();
        },
        show: function Viz$Show() {
          this._impl.$show();
        },
        hide: function Viz$Hide() {
          this._impl.$hide();
        },
        showExportDataDialog: function Viz$ShowExportDataDialog(worksheetWithinDashboard) {
          this._impl.$showExportDataDialog(worksheetWithinDashboard);
        },
        showDownloadDialog: function Viz$ShowDownloadDialog() {
          this._impl.$showDownloadDialog();
        },
        showExportCrossTabDialog: function Viz$ShowExportCrossTabDialog(worksheetWithinDashboard) {
          this._impl.$showExportCrossTabDialog(worksheetWithinDashboard);
        },
        showExportImageDialog: function Viz$ShowExportImageDialog() {
          this._impl.$showExportImageDialog();
        },
        showExportPDFDialog: function Viz$ShowExportPDFDialog() {
          this._impl.$showExportPDFDialog();
        },
        showExportPowerPointDialog: function Viz$ShowExportPowerPointDialog() {
          this._impl.$showExportPowerPointDialog();
        },
        exportCrossTabToExcel: function Viz$ExportCrossTabToExcel(worksheetWithinDashboard) {
          this._impl.$exportCrossTabToExcel(worksheetWithinDashboard);
        },
        revertAllAsync: function Viz$RevertAllAsync() {
          return this._impl.$revertAllAsync();
        },
        refreshDataAsync: function Viz$RefreshDataAsync() {
          return this._impl.$refreshDataAsync();
        },
        showShareDialog: function Viz$ShowShareDialog() {
          this._impl.$showShareDialog();
        },
        showDownloadWorkbookDialog: function Viz$ShowDownloadWorkbookDialog() {
          this._impl.$showDownloadWorkbookDialog();
        },
        pauseAutomaticUpdatesAsync: function Viz$PauseAutomaticUpdatesAsync() {
          return this._impl.$pauseAutomaticUpdatesAsync();
        },
        resumeAutomaticUpdatesAsync: function Viz$ResumeAutomaticUpdatesAsync() {
          return this._impl.$resumeAutomaticUpdatesAsync();
        },
        toggleAutomaticUpdatesAsync: function Viz$ToggleAutomaticUpdatesAsync() {
          return this._impl.$toggleAutomaticUpdatesAsync();
        },
        refreshSize: function Viz$RefreshSize() {
          this._impl.$refreshSize();
        },
        setFrameSize: function Viz$SetFrameSize(width, height) {
          var widthString = width;
          var heightString = height;
          if (tab._Utility.isNumber(width)) {
            widthString = width.toString() + "px";
          }
          if (tab._Utility.isNumber(height)) {
            heightString = height.toString() + "px";
          }
          this._impl.$setFrameSizeAndUpdate(widthString, heightString);
        },
        redoAsync: function Viz$RedoAsync() {
          return this._impl.$redoAsync();
        },
        undoAsync: function Viz$UndoAsync() {
          return this._impl.$undoAsync();
        }
      }, {
        getLastRequestMessage: function Viz$GetLastRequestMessage() {
          return tab._ApiCommand.lastRequestMessage;
        },
        getLastResponseMessage: function Viz$GetLastResponseMessage() {
          return tab._ApiCommand.lastResponseMessage;
        },
        getLastClientInfoResponseMessage: function Viz$GetLastClientInfoResponseMessage() {
          return tab._ApiCommand.lastClientInfoResponseMessage;
        }
      });
      var $tableauSoftware_VizManager = global2.tableauSoftware.VizManager = ss.mkType($asm, "tableauSoftware.VizManager", null, null, {
        getVizs: function VizManager$GetVizs() {
          return $tab__VizManagerImpl.get_$clonedVizs();
        }
      });
      var $tableauSoftware_Workbook = global2.tableauSoftware.Workbook = ss.mkType($asm, "tableauSoftware.Workbook", function(workbookImpl) {
        this.$workbookImpl = null;
        this.$workbookImpl = workbookImpl;
      }, {
        getViz: function Workbook$GetViz() {
          return this.$workbookImpl.get_viz();
        },
        getPublishedSheetsInfo: function Workbook$GetPublishedSheetsInfo() {
          return this.$workbookImpl.get_publishedSheets()._toApiCollection();
        },
        getName: function Workbook$GetName() {
          return this.$workbookImpl.get_name();
        },
        getActiveSheet: function Workbook$GetActiveSheet() {
          return this.$workbookImpl.get_activeSheetImpl().get_sheet();
        },
        getActiveCustomView: function Workbook$GetActiveCustomView() {
          return this.$workbookImpl.get_activeCustomView();
        },
        activateSheetAsync: function Workbook$ActivateSheetAsync(sheetNameOrIndex) {
          return this.$workbookImpl._setActiveSheetAsync(sheetNameOrIndex);
        },
        revertAllAsync: function Workbook$RevertAllAsync() {
          return this.$workbookImpl._revertAllAsync();
        },
        getCustomViewsAsync: function Workbook$GetCustomViewsAsync() {
          return this.$workbookImpl.$getCustomViewsAsync();
        },
        showCustomViewAsync: function Workbook$ShowCustomViewAsync(customViewName) {
          return this.$workbookImpl.$showCustomViewAsync(customViewName);
        },
        removeCustomViewAsync: function Workbook$RemoveCustomViewAsync(customViewName) {
          return this.$workbookImpl.$removeCustomViewAsync(customViewName);
        },
        rememberCustomViewAsync: function Workbook$RememberCustomViewAsync(customViewName) {
          return this.$workbookImpl.$rememberCustomViewAsync(customViewName);
        },
        setActiveCustomViewAsDefaultAsync: function Workbook$SetActiveCustomViewAsDefaultAsync() {
          return this.$workbookImpl.$setActiveCustomViewAsDefaultAsync();
        },
        getParametersAsync: function Workbook$GetParametersAsync() {
          return this.$workbookImpl.$getParametersAsync();
        },
        changeParameterValueAsync: function Workbook$ChangeParameterValueAsync(parameterName, value) {
          return this.$workbookImpl.$changeParameterValueAsync(parameterName, value);
        }
      });
      var $tableauSoftware_Worksheet = global2.tableauSoftware.Worksheet = ss.mkType($asm, "tableauSoftware.Worksheet", function(impl) {
        this._impl = null;
        $tableauSoftware_Sheet.call(this, impl);
      }, {
        getParentDashboard: function Worksheet$GetParentDashboard() {
          return this._impl.get_parentDashboard();
        },
        getParentStoryPoint: function Worksheet$GetParentStoryPoint() {
          return this._impl.get_parentStoryPoint();
        },
        getDataSourcesAsync: function Worksheet$GetDataSourcesAsync() {
          return this._impl.$getDataSourcesAsync();
        },
        getFilterAsync: function Worksheet$GetFilterAsync(fieldName, options) {
          return this._impl.$getFilterAsync(null, fieldName, options);
        },
        getFiltersAsync: function Worksheet$GetFiltersAsync(options) {
          return this._impl.$getFiltersAsync(options);
        },
        applyFilterAsync: function Worksheet$ApplyFilterAsync(fieldName, values, updateType, options) {
          return this._impl.$applyFilterAsync(fieldName, values, updateType, options);
        },
        clearFilterAsync: function Worksheet$ClearFilterAsync(fieldName) {
          return this._impl.$clearFilterAsync(fieldName);
        },
        applyRangeFilterAsync: function Worksheet$ApplyRangeFilterAsync(fieldName, options) {
          return this._impl.$applyRangeFilterAsync(fieldName, options);
        },
        applyRelativeDateFilterAsync: function Worksheet$ApplyRelativeDateFilterAsync(fieldName, options) {
          return this._impl.$applyRelativeDateFilterAsync(fieldName, options);
        },
        applyHierarchicalFilterAsync: function Worksheet$ApplyHierarchicalFilterAsync(fieldName, values, updateType, options) {
          return this._impl.$applyHierarchicalFilterAsync(fieldName, values, updateType, options);
        },
        clearSelectedMarksAsync: function Worksheet$ClearSelectedMarksAsync() {
          return this._impl.$clearSelectedMarksAsync();
        },
        selectMarksAsync: function Worksheet$SelectMarksAsync(fieldNameOrFieldValuesMap, valueOrUpdateType, updateType) {
          return this._impl.$selectMarksAsync(fieldNameOrFieldValuesMap, valueOrUpdateType, updateType);
        },
        getSelectedMarksAsync: function Worksheet$GetSelectedMarksAsync() {
          return this._impl.$getSelectedMarksAsync();
        },
        getSummaryDataAsync: function Worksheet$GetSummaryDataAsync(options) {
          return this._impl.$getSummaryDataAsync(options);
        },
        getUnderlyingDataAsync: function Worksheet$GetUnderlyingDataAsync(options) {
          console.warn("Method getUnderlyingDataAsync is deprecated. Please use getUnderlyingTableDataAsync instead.");
          return this._impl.$getUnderlyingDataAsync(options);
        },
        getUnderlyingTablesAsync: function Worksheet$GetUnderlyingTablesAsync() {
          return this._impl.$getUnderlyingTablesAsync();
        },
        getUnderlyingTableDataAsync: function Worksheet$GetUnderlyingTableDataAsync(tableId, options) {
          return this._impl.$getUnderlyingTableDataAsync(tableId, options);
        },
        clearHighlightedMarksAsync: function Worksheet$ClearHighlightedMarksAsync() {
          return this._impl.$clearHighlightedMarksAsync();
        },
        highlightMarksAsync: function Worksheet$HighlightMarksAsync(fieldName, values) {
          return this._impl.$highlightMarksAsync(fieldName, values);
        },
        highlightMarksByPatternMatchAsync: function Worksheet$HighlightMarksByPatternMatchAsync(fieldName, patternMatch) {
          return this._impl.$highlightMarksByPatternMatchAsync(fieldName, patternMatch);
        },
        getHighlightedMarksAsync: function Worksheet$GetHighlightedMarksAsync() {
          return this._impl.$getHighlightedMarksAsync();
        },
        appendContextMenuAsync: function Worksheet$AppendContextMenuAsync(targetMenu, config) {
          return this._impl.$appendContextMenuAsync(this.getName(), targetMenu, config);
        },
        removeContextMenuAsync: function Worksheet$RemoveContextMenuAsync(targetMenu, menuItemId) {
          return this._impl.$removeContextMenuAsync(this.getName(), targetMenu, menuItemId);
        },
        executeContextMenuAsync: function Worksheet$ExecuteContextMenuAsync(targetMenu, menuItemId) {
          return this._impl.$executeContextMenuAsync(this.getName(), targetMenu, menuItemId);
        }
      });
      ss.initClass($tab__ApiBootstrap);
      ss.initClass($tab__CustomViewImpl);
      ss.initClass($tab__SheetImpl);
      ss.initClass($tab__DashboardImpl, $tab__SheetImpl);
      ss.initClass($tab__DataSourceImpl);
      ss.initClass($tab__SheetInfoImpl, Object);
      ss.initClass($tab__StoryImpl, $tab__SheetImpl);
      ss.initClass($tab__StoryPointImpl);
      ss.initClass($tab__StoryPointInfoImpl, Object);
      ss.initClass($tab__ToolbarStateImpl);
      ss.initClass($tab__VizManagerImpl);
      ss.initClass($tab__VizParameters);
      ss.initClass($tab__WorkbookImpl);
      ss.initClass($tab__WorksheetImpl, $tab__SheetImpl);
      ss.initClass($tab_EventContext);
      ss.initClass($tab_$CustomViewEventContext, $tab_EventContext);
      ss.initClass($tab_$DashboardZoneInfo);
      ss.initClass($tab_$FilterEventContext, $tab_EventContext);
      ss.initClass($tab_$HighlightEventContext, $tab_EventContext);
      ss.initClass($tab_$MarksEventContext, $tab_EventContext);
      ss.initClass($tab_$ParameterEventContext, $tab_EventContext);
      ss.initClass($tab_$ParameterImpl);
      ss.initClass($tab_TableauEvent);
      ss.initClass($tab_CustomMarkContextMenuEvent, $tab_TableauEvent);
      ss.initClass($tab_CustomViewEvent, $tab_TableauEvent);
      ss.initClass($tab_WorksheetEvent, $tab_TableauEvent);
      ss.initClass($tab_FilterEvent, $tab_WorksheetEvent);
      ss.initClass($tab_FirstVizSizeKnownEvent, $tab_TableauEvent);
      ss.initClass($tab_HighlightEvent, $tab_WorksheetEvent);
      ss.initInterface($tab_IJsApiMessageHandler, { add_customViewsListLoad: null, remove_customViewsListLoad: null, handleVizLoad: null, handleVizListening: null, sendScaleFactor: null });
      ss.initClass($tab_JsApiMessageRouter);
      ss.initClass($tab_JsApiMessagingOptions);
      ss.initClass($tab_MarksEvent, $tab_WorksheetEvent);
      ss.initClass($tab_ParameterEvent, $tab_TableauEvent);
      ss.initClass($tab_StoryPointInfoImplUtil);
      ss.initClass($tab_StoryPointSwitchEvent, $tab_TableauEvent);
      ss.initClass($tab_TabSwitchEvent, $tab_TableauEvent);
      ss.initClass($tab_ToolbarStateEvent, $tab_TableauEvent);
      ss.initClass($tab_UrlActionEvent, $tab_TableauEvent);
      ss.initClass($tab_VizImpl, null, [$tab_IJsApiMessageHandler]);
      ss.initClass($tab_VizResizeEvent, $tab_TableauEvent);
      ss.initClass($tab_VizSize, Object);
      ss.initClass($tableauSoftware_Filter);
      ss.initClass($tableauSoftware_CategoricalFilter, $tableauSoftware_Filter);
      ss.initClass($tableauSoftware_CustomView);
      ss.initClass($tableauSoftware_Sheet);
      ss.initClass($tableauSoftware_Dashboard, $tableauSoftware_Sheet);
      ss.initClass($tableauSoftware_DashboardObject);
      ss.initClass($tableauSoftware_DataSource);
      ss.initClass($tableauSoftware_Field);
      ss.initClass($tableauSoftware_HierarchicalFilter, $tableauSoftware_Filter);
      ss.initClass($tableauSoftware_Parameter);
      ss.initClass($tableauSoftware_QuantitativeFilter, $tableauSoftware_Filter);
      ss.initClass($tableauSoftware_RelativeDateFilter, $tableauSoftware_Filter);
      ss.initClass($tableauSoftware_SheetInfo);
      ss.initClass($tableauSoftware_Story, $tableauSoftware_Sheet);
      ss.initClass($tableauSoftware_StoryPoint);
      ss.initClass($tableauSoftware_StoryPointInfo);
      ss.initClass($tableauSoftware_ToolbarState);
      ss.initClass($tableauSoftware_Version);
      ss.initClass($tableauSoftware_Viz);
      ss.initClass($tableauSoftware_VizManager);
      ss.initClass($tableauSoftware_Workbook);
      ss.initClass($tableauSoftware_Worksheet, $tableauSoftware_Sheet);
      (function() {
        $tab__VizManagerImpl.$vizs = [];
      })();
      (function() {
        $tab__SheetImpl.noZoneId = 4294967295;
      })();
      (function() {
        $tab__WorksheetImpl.$regexHierarchicalFieldName = new RegExp("\\[[^\\]]+\\]\\.", "g");
      })();
      (function() {
        $tableauSoftware_Version.$currentVersion = new $tableauSoftware_Version(2, 9, 1, "null");
      })();
    })();
    window.tableau = window.tableauSoftware = global2.tableauSoftware;
    var tableauSoftware = global2.tableauSoftware;
    tableauSoftware.Promise = tab._PromiseImpl;
    tab._Deferred = tab._DeferredImpl;
    tab._Collection = tab._CollectionImpl;
    tab._ApiBootstrap.initialize();
    window.tableau._apiLoaded = true;
    module.exports = tableauSoftware;
  }
});

// node_modules/tableau-react/dist/TableauReport.js
var require_TableauReport = __commonJS({
  "node_modules/tableau-react/dist/TableauReport.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _url = require_url();
    var _url2 = _interopRequireDefault(_url);
    var _es6Promise = require_es6_promise();
    var _shallowequal = require_modules();
    var _shallowequal2 = _interopRequireDefault(_shallowequal);
    var _tokenizeUrl = require_tokenizeUrl();
    var _tokenizeUrl2 = _interopRequireDefault(_tokenizeUrl);
    var _tableauSdk = require_tableau_sdk();
    var _tableauSdk2 = _interopRequireDefault(_tableauSdk);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self2, call) {
      if (!self2) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var propTypes = {
      filters: _propTypes2.default.object,
      url: _propTypes2.default.string.isRequired,
      parameters: _propTypes2.default.object,
      options: _propTypes2.default.object,
      token: _propTypes2.default.string,
      onLoad: _propTypes2.default.func,
      query: _propTypes2.default.string
    };
    var defaultProps = {
      loading: false,
      parameters: {},
      filters: {},
      options: {},
      query: "?:embed=yes&:comments=no&:toolbar=yes&:refresh=yes"
    };
    var TableauReport = function(_React$Component) {
      _inherits(TableauReport2, _React$Component);
      function TableauReport2(props) {
        _classCallCheck(this, TableauReport2);
        var _this = _possibleConstructorReturn(this, (TableauReport2.__proto__ || Object.getPrototypeOf(TableauReport2)).call(this, props));
        _this.state = {
          filters: props.filters,
          parameters: props.parameters,
          intervalId: null
        };
        return _this;
      }
      _createClass(TableauReport2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.initTableau();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.clearInterval();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var isReportChanged = this.props.url !== prevProps.url;
          var isFiltersChanged = !(0, _shallowequal2.default)(prevProps.filters, this.props.filters, this.compareArrays);
          var isParametersChanged = !(0, _shallowequal2.default)(prevProps.parameters, this.props.parameters);
          var isIntervalChanged = this.props.options.interval !== prevProps.options.interval;
          var isLoading = this.state.loading;
          if (isReportChanged) {
            this.initTableau(this.props.url);
          }
          if (!isReportChanged && isFiltersChanged && !isLoading) {
            this.applyFilters(this.props.filters);
          }
          if (!isReportChanged && isParametersChanged && !isLoading) {
            this.applyParameters(this.props.parameters);
          }
          if (this.props.token !== prevProps.token) {
            this.setState({ didInvalidateToken: false });
          }
          if (isIntervalChanged && typeof this.props.options.interval === "number") {
            this.initInterval();
          }
        }
        /**
         * Compares the values of filters to see if they are the same.
         * @param  {Array<Number>} a
         * @param  {Array<Number>} b
         * @return {Boolean}
         */
      }, {
        key: "compareArrays",
        value: function compareArrays(a, b) {
          if (Array.isArray(a) && Array.isArray(b)) {
            return a.sort().toString() === b.sort().toString();
          }
          return void 0;
        }
        /**
         * Execute a callback when an array of promises complete, regardless of
         * whether any throw an error.
         */
      }, {
        key: "onComplete",
        value: function onComplete(promises, cb) {
          _es6Promise.Promise.all(promises).then(function() {
            return cb();
          }, function() {
            return cb();
          });
        }
        /**
         * Returns a vizUrl, tokenizing it if a token is passed and immediately
         * invalidating it to prevent it from being used more than once.
         */
      }, {
        key: "getUrl",
        value: function getUrl(nextUrl) {
          var newUrl = nextUrl || this.props.url;
          var _props = this.props, token = _props.token, query = _props.query;
          var parsed = _url2.default.parse(newUrl, true);
          if (!this.state.didInvalidateToken && token) {
            this.invalidateToken();
            return (0, _tokenizeUrl2.default)(newUrl, token) + query;
          }
          return parsed.protocol + "//" + parsed.host + parsed.pathname + query;
        }
      }, {
        key: "invalidateToken",
        value: function invalidateToken() {
          this.setState({ didInvalidateToken: true });
        }
        /**
         * Asynchronously applies filters to the worksheet, excluding those that have
         * already been applied, which is determined by checking against state.
         * @param  {Object} filters
         * @return {void}
         */
      }, {
        key: "applyFilters",
        value: function applyFilters(filters) {
          var _this2 = this;
          var REPLACE = _tableauSdk2.default.FilterUpdateType.REPLACE;
          var promises = [];
          if (!this.sheet) {
            console.warn("tableau-react: Not appplying filters because the sheet is not loaded yet.");
            return;
          }
          this.setState({ loading: true });
          for (var key in filters) {
            if (!this.state.filters.hasOwnProperty(key) || !this.compareArrays(this.state.filters[key], filters[key])) {
              promises.push(this.sheet.applyFilterAsync(key, filters[key], REPLACE));
            }
          }
          this.onComplete(promises, function() {
            return _this2.setState({ loading: false, filters });
          });
        }
      }, {
        key: "applyParameters",
        value: function applyParameters(parameters) {
          var _this3 = this;
          var promises = [];
          for (var key in parameters) {
            if (!this.state.parameters.hasOwnProperty(key) || this.state.parameters[key] !== parameters[key]) {
              var val = parameters[key];
              if (this.workbook && this.workbook.changeParameterValueAsync) {
                promises.push(this.workbook.changeParameterValueAsync(key, val));
              }
            }
          }
          this.onComplete(promises, function() {
            return _this3.setState({ loading: false, parameters });
          });
        }
        /**
         * If an interval is passed, refrshes the report every interval.
         */
      }, {
        key: "initInterval",
        value: function initInterval() {
          var _this4 = this;
          if (typeof this.props.options.interval === "number") {
            var interval = setInterval(function() {
              _this4.viz.refreshDataAsync();
            }, this.props.options.interval);
            this.setState({ intervalId: interval });
          }
        }
        /**
         * Clear interval if set.
         */
      }, {
        key: "clearInterval",
        value: function(_clearInterval) {
          function clearInterval2() {
            return _clearInterval.apply(this, arguments);
          }
          clearInterval2.toString = function() {
            return _clearInterval.toString();
          };
          return clearInterval2;
        }(function() {
          if (typeof this.state.intervalId === "number") {
            clearInterval(this.state.intervalId);
            this.setState({ intervalId: null });
          }
        })
        /**
         * Initialize the viz via the Tableau JS API.
         * @return {void}
         */
      }, {
        key: "initTableau",
        value: function initTableau(nextUrl) {
          var _this5 = this;
          var _props2 = this.props, filters = _props2.filters, parameters = _props2.parameters;
          var vizUrl = this.getUrl(nextUrl);
          var options = _extends({}, filters, parameters, this.props.options, {
            onFirstInteractive: function onFirstInteractive() {
              _this5.workbook = _this5.viz.getWorkbook();
              _this5.sheet = _this5.workbook.getActiveSheet();
              var hasChildSheets = typeof _this5.sheet.getWorksheets !== "undefined";
              if (hasChildSheets) {
                var childSheets = _this5.sheet.getWorksheets();
                if (childSheets && childSheets.length) {
                  _this5.sheet = childSheets[0];
                }
              }
              _this5.props.onLoad && _this5.props.onLoad(/* @__PURE__ */ new Date());
            }
          });
          if (this.viz) {
            this.viz.dispose();
            this.viz = null;
          }
          this.viz = new _tableauSdk2.default.Viz(this.container, vizUrl, options);
          this.initInterval();
        }
      }, {
        key: "render",
        value: function render() {
          var _this6 = this;
          return _react2.default.createElement("div", { ref: function ref(c) {
            return _this6.container = c;
          } });
        }
      }]);
      return TableauReport2;
    }(_react2.default.Component);
    TableauReport.propTypes = propTypes;
    TableauReport.defaultProps = defaultProps;
    exports.default = TableauReport;
    module.exports = exports["default"];
  }
});

// node_modules/tableau-react/dist/index.js
var require_dist = __commonJS({
  "node_modules/tableau-react/dist/index.js"(exports, module) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _TableauReport = require_TableauReport();
    var _TableauReport2 = _interopRequireDefault(_TableauReport);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _TableauReport2.default;
    module.exports = exports["default"];
  }
});
export default require_dist();
/*! Bundled license information:

punycode/punycode.js:
  (*! https://mths.be/punycode v1.4.1 by @mathias *)

es6-promise/dist/es6-promise.js:
  (*!
   * @overview es6-promise - a tiny implementation of Promises/A+.
   * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
   * @license   Licensed under MIT license
   *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
   * @version   v4.2.8+1e68dce6
   *)

tableau-react/dist/tableau-sdk.js:
  (*! tableau-2.9.1 *)
  (*! BEGIN MscorlibSlim *)
  (*! BEGIN CoreSlim *)
  (*! BEGIN ApiShared *)
  (*! API *)
*/
//# sourceMappingURL=tableau-react.js.map

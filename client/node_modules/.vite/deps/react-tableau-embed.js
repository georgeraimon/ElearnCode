import {
  require_react
} from "./chunk-4UQS7KPA.js";
import {
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/react-tableau-embed/src/index.tsx
var React4 = __toESM(require_react());

// node_modules/react-tableau-embed/src/useTableau/index.tsx
var React2 = __toESM(require_react());

// node_modules/react-tableau-embed/src/TableauViz.tsx
var React = __toESM(require_react());

// node_modules/react-tableau-embed/src/scrapedTableauTypes/Enums.ts
var DeviceType = /* @__PURE__ */ ((DeviceType2) => {
  DeviceType2["Default"] = "default";
  DeviceType2["Desktop"] = "desktop";
  DeviceType2["Tablet"] = "tablet";
  DeviceType2["Phone"] = "phone";
  return DeviceType2;
})(DeviceType || {});
var EmbeddingErrorCodes = /* @__PURE__ */ ((EmbeddingErrorCodes2) => {
  EmbeddingErrorCodes2["BrowserNotCapable"] = "browser-not-capable";
  EmbeddingErrorCodes2["DownloadWorkbookNotAllowed"] = "download-workbook-not-allowed";
  EmbeddingErrorCodes2["FilterCannotBePerformed"] = "filter-cannot-be-performed";
  EmbeddingErrorCodes2["IndexOutOfRange"] = "index-out-of-range";
  EmbeddingErrorCodes2["InternalError"] = "internal-error";
  EmbeddingErrorCodes2["InvalidCustomViewName"] = "invalid-custom-view-name";
  EmbeddingErrorCodes2["InvalidDateParameter"] = "invalid-date-parameter";
  EmbeddingErrorCodes2["invalidFilterFieldNameOrValue"] = "invalid-filter-field-name";
  EmbeddingErrorCodes2["InvalidParameter"] = "invalid-parameter";
  EmbeddingErrorCodes2["InvalidSize"] = "invalid-size";
  EmbeddingErrorCodes2["InvalidSizeBehavior"] = "invalid-size-behavior";
  EmbeddingErrorCodes2["InvalidSizeBehaviorOnWorksheet"] = "invalid-size-behavior-on-worksheet";
  EmbeddingErrorCodes2["InvalidUrl"] = "invalid-url";
  EmbeddingErrorCodes2["MissingMaxSize"] = "missing-max-size";
  EmbeddingErrorCodes2["MissingMinSize"] = "missing-min-size";
  EmbeddingErrorCodes2["MissingMinMaxSize"] = "missing-min-max-size";
  EmbeddingErrorCodes2["MissingParameter"] = "missing-parameter";
  EmbeddingErrorCodes2["MissingRangeNForRelativeDateFilters"] = "missing-range-n-for-relative-date-filters";
  EmbeddingErrorCodes2["NoUrlForHiddenWorksheet"] = "no-url-for-hidden-worksheet";
  EmbeddingErrorCodes2["NoUrlOrParentElementNotFound"] = "no-url-or-parent-element-not-found";
  EmbeddingErrorCodes2["NotActiveSheet"] = "not-active-sheet";
  EmbeddingErrorCodes2["NullOrEmptyParameter"] = "null-or-empty-parameter";
  EmbeddingErrorCodes2["SheetNotInWorkbook"] = "sheet-not-in-workbook";
  EmbeddingErrorCodes2["StaleDataReference"] = "stale-data-reference";
  EmbeddingErrorCodes2["UnsupportedEventName"] = "unsupported-event-name";
  EmbeddingErrorCodes2["VizAlreadyInManager"] = "viz-already-in-manager";
  EmbeddingErrorCodes2["ImplementationError"] = "wrong-implementation";
  EmbeddingErrorCodes2["NotImplemented"] = "not-implemented";
  EmbeddingErrorCodes2["EventInitializationError"] = "event-initialization-error";
  EmbeddingErrorCodes2["IncompatibleVersionError"] = "incompatible-version-error";
  EmbeddingErrorCodes2["UnknownDialogType"] = "unknown-dialog-type";
  EmbeddingErrorCodes2["FilterMissingOrNotImplemented"] = "filter-missing-not-implemented";
  EmbeddingErrorCodes2["StoryPointIdMismatch"] = "storypoint-id-mismatch";
  return EmbeddingErrorCodes2;
})(EmbeddingErrorCodes || {});
var FileFormats = /* @__PURE__ */ ((FileFormats2) => {
  FileFormats2["PDF"] = "pdf";
  FileFormats2["PNG"] = "png";
  return FileFormats2;
})(FileFormats || {});
var RevertVizSelection = /* @__PURE__ */ ((RevertVizSelection2) => {
  RevertVizSelection2["All"] = "all";
  RevertVizSelection2["Axes"] = "axes";
  RevertVizSelection2["Filters"] = "filters";
  RevertVizSelection2["Sorts"] = "sorts";
  RevertVizSelection2["Shelves"] = "shelves";
  return RevertVizSelection2;
})(RevertVizSelection || {});
var ToolbarButtons = /* @__PURE__ */ ((ToolbarButtons2) => {
  ToolbarButtons2["Alerts"] = "alerts";
  ToolbarButtons2["AskData"] = "askData";
  ToolbarButtons2["CustomViews"] = "customViews";
  ToolbarButtons2["DataDetails"] = "dataDetails";
  ToolbarButtons2["Share"] = "share";
  ToolbarButtons2["Subscribe"] = "subscribe";
  return ToolbarButtons2;
})(ToolbarButtons || {});
var Toolbar = /* @__PURE__ */ ((Toolbar2) => {
  Toolbar2["Top"] = "top";
  Toolbar2["Bottom"] = "bottom";
  Toolbar2["Hidden"] = "hidden";
  return Toolbar2;
})(Toolbar || {});
var SheetSizeBehavior = /* @__PURE__ */ ((SheetSizeBehavior2) => {
  SheetSizeBehavior2["Automatic"] = "automatic";
  SheetSizeBehavior2["Exactly"] = "exactly";
  SheetSizeBehavior2["Range"] = "range";
  SheetSizeBehavior2["AtLeast"] = "atleast";
  SheetSizeBehavior2["AtMost"] = "atmost";
  return SheetSizeBehavior2;
})(SheetSizeBehavior || {});
var TableauEventType = /* @__PURE__ */ ((TableauEventType2) => {
  TableauEventType2["CustomViewLoaded"] = "customviewloaded";
  TableauEventType2["CustomViewRemoved"] = "customviewremoved";
  TableauEventType2["CustomViewSaved"] = "customviewsaved";
  TableauEventType2["CustomViewSetDefault"] = "customviewsetdefault";
  TableauEventType2["EditButtonClicked"] = "editbuttonclicked";
  TableauEventType2["EditInDesktopButtonClicked"] = "editindesktopbuttonclicked";
  TableauEventType2["FilterChanged"] = "filterchanged";
  TableauEventType2["FirstVizSizeKnown"] = "firstvizsizeknown";
  TableauEventType2["FirstInteractive"] = "firstinteractive";
  TableauEventType2["CustomMarkContextMenuEvent"] = "custommarkcontextmenu";
  TableauEventType2["MarkSelectionChanged"] = "markselectionchanged";
  TableauEventType2["ParameterChanged"] = "parameterchanged";
  TableauEventType2["ToolbarStateChanged"] = "toolbarstatechanged";
  TableauEventType2["WorkbookReadyToClose"] = "workbookreadytoclose";
  TableauEventType2["WorkbookPublished"] = "workbookpublished";
  TableauEventType2["WorkbookPublishedAs"] = "workbookpublishedas";
  TableauEventType2["UrlAction"] = "urlaction";
  TableauEventType2["TabSwitched"] = "tabswitched";
  TableauEventType2["StoryPointSwitched"] = "storypointswitched";
  return TableauEventType2;
})(TableauEventType || {});
var ApiMenuType = /* @__PURE__ */ ((ApiMenuType2) => {
  ApiMenuType2["Ubertip"] = "ubertip";
  return ApiMenuType2;
})(ApiMenuType || {});
var TableauDialogType = /* @__PURE__ */ ((TableauDialogType2) => {
  TableauDialogType2["ExportPDF"] = "export-pdf";
  TableauDialogType2["ExportPowerPoint"] = "export-powerpoint";
  TableauDialogType2["ExportData"] = "export-data";
  TableauDialogType2["ExportCrossTab"] = "export-cross-tab";
  TableauDialogType2["ExportWorkbook"] = "export-workbook";
  TableauDialogType2["Share"] = "share";
  return TableauDialogType2;
})(TableauDialogType || {});

// node_modules/react-tableau-embed/src/TableauViz.tsx
function TableauViz(props, ref) {
  const vizRef = React.useRef(null);
  React.useImperativeHandle(ref, () => vizRef.current);
  React.useEffect(() => {
    if (vizRef && vizRef.current) {
      const viz = vizRef.current;
      if (props.onEventListenerCustomMarkContextMenuEvent) {
        viz.addEventListener(
          "custommarkcontextmenu" /* CustomMarkContextMenuEvent */,
          props.onEventListenerCustomMarkContextMenuEvent
        );
      }
      if (props.onEventListenerCustomViewLoaded) {
        viz.addEventListener(
          "customviewloaded" /* CustomViewLoaded */,
          props.onEventListenerCustomViewLoaded
        );
      }
      if (props.onEventListenerCustomViewRemoved) {
        viz.addEventListener(
          "customviewremoved" /* CustomViewRemoved */,
          props.onEventListenerCustomViewRemoved
        );
      }
      if (props.onEventListenerCustomViewSaved) {
        viz.addEventListener(
          "customviewsaved" /* CustomViewSaved */,
          props.onEventListenerCustomViewSaved
        );
      }
      if (props.onEventListenerCustomViewSetDefault) {
        viz.addEventListener(
          "customviewsetdefault" /* CustomViewSetDefault */,
          props.onEventListenerCustomViewSetDefault
        );
      }
      if (props.onEventListenerEditButtonClicked) {
        viz.addEventListener(
          "editbuttonclicked" /* EditButtonClicked */,
          props.onEventListenerEditButtonClicked
        );
      }
      if (props.onEventListenerEditInDesktopButtonClicked) {
        viz.addEventListener(
          "editindesktopbuttonclicked" /* EditInDesktopButtonClicked */,
          props.onEventListenerEditInDesktopButtonClicked
        );
      }
      if (props.onEventListenerFilterChanged) {
        viz.addEventListener(
          "filterchanged" /* FilterChanged */,
          props.onEventListenerFilterChanged
        );
      }
      if (props.onEventListenerFirstInteractive) {
        viz.addEventListener(
          "firstinteractive" /* FirstInteractive */,
          props.onEventListenerFirstInteractive
        );
      }
      if (props.onEventListenerFirstVizSizeKnown) {
        viz.addEventListener(
          "firstvizsizeknown" /* FirstVizSizeKnown */,
          props.onEventListenerFirstVizSizeKnown
        );
      }
      if (props.onEventListenerMarkSelectionChanged) {
        viz.addEventListener(
          "markselectionchanged" /* MarkSelectionChanged */,
          props.onEventListenerMarkSelectionChanged
        );
      }
      if (props.onEventListenerToolbarStateChanged) {
        viz.addEventListener(
          "toolbarstatechanged" /* ToolbarStateChanged */,
          props.onEventListenerToolbarStateChanged
        );
      }
      if (props.onEventListenerTabSwitched) {
        viz.addEventListener(
          "tabswitched" /* TabSwitched */,
          props.onEventListenerTabSwitched
        );
      }
      if (props.onEventListenerParameterChanged) {
        viz.addEventListener(
          "parameterchanged" /* ParameterChanged */,
          props.onEventListenerParameterChanged
        );
      }
      if (props.onEventListenerUrlAction) {
        viz.addEventListener(
          "urlaction" /* UrlAction */,
          props.onEventListenerUrlAction
        );
      }
      if (props.onEventListenerWorkbookPublished) {
        viz.addEventListener(
          "workbookpublished" /* WorkbookPublished */,
          props.onEventListenerWorkbookPublished
        );
      }
      if (props.onEventListenerWorkbookPublishedAs) {
        viz.addEventListener(
          "workbookpublishedas" /* WorkbookPublishedAs */,
          props.onEventListenerWorkbookPublishedAs
        );
      }
      if (props.onEventListenerWorkbookReadyToClose) {
        viz.addEventListener(
          "workbookreadytoclose" /* WorkbookReadyToClose */,
          props.onEventListenerWorkbookReadyToClose
        );
      }
      return () => {
        if (props.onEventListenerCustomMarkContextMenuEvent) {
          viz.removeEventListener(
            "custommarkcontextmenu" /* CustomMarkContextMenuEvent */,
            props.onEventListenerCustomMarkContextMenuEvent
          );
        }
        if (props.onEventListenerCustomViewLoaded) {
          viz.removeEventListener(
            "customviewloaded" /* CustomViewLoaded */,
            props.onEventListenerCustomViewLoaded
          );
        }
        if (props.onEventListenerCustomViewRemoved) {
          viz.removeEventListener(
            "customviewremoved" /* CustomViewRemoved */,
            props.onEventListenerCustomViewRemoved
          );
        }
        if (props.onEventListenerCustomViewSaved) {
          viz.removeEventListener(
            "customviewsaved" /* CustomViewSaved */,
            props.onEventListenerCustomViewSaved
          );
        }
        if (props.onEventListenerCustomViewSetDefault) {
          viz.removeEventListener(
            "customviewsetdefault" /* CustomViewSetDefault */,
            props.onEventListenerCustomViewSetDefault
          );
        }
        if (props.onEventListenerEditButtonClicked) {
          viz.removeEventListener(
            "editbuttonclicked" /* EditButtonClicked */,
            props.onEventListenerEditButtonClicked
          );
        }
        if (props.onEventListenerEditInDesktopButtonClicked) {
          viz.removeEventListener(
            "editindesktopbuttonclicked" /* EditInDesktopButtonClicked */,
            props.onEventListenerEditInDesktopButtonClicked
          );
        }
        if (props.onEventListenerFilterChanged) {
          viz.removeEventListener(
            "filterchanged" /* FilterChanged */,
            props.onEventListenerFilterChanged
          );
        }
        if (props.onEventListenerFirstInteractive) {
          viz.removeEventListener(
            "firstinteractive" /* FirstInteractive */,
            props.onEventListenerFirstInteractive
          );
        }
        if (props.onEventListenerFirstVizSizeKnown) {
          viz.removeEventListener(
            "firstvizsizeknown" /* FirstVizSizeKnown */,
            props.onEventListenerFirstVizSizeKnown
          );
        }
        if (props.onEventListenerMarkSelectionChanged) {
          viz.removeEventListener(
            "markselectionchanged" /* MarkSelectionChanged */,
            props.onEventListenerMarkSelectionChanged
          );
        }
        if (props.onEventListenerToolbarStateChanged) {
          viz.removeEventListener(
            "toolbarstatechanged" /* ToolbarStateChanged */,
            props.onEventListenerToolbarStateChanged
          );
        }
        if (props.onEventListenerTabSwitched) {
          viz.removeEventListener(
            "tabswitched" /* TabSwitched */,
            props.onEventListenerTabSwitched
          );
        }
        if (props.onEventListenerParameterChanged) {
          viz.removeEventListener(
            "parameterchanged" /* ParameterChanged */,
            props.onEventListenerParameterChanged
          );
        }
        if (props.onEventListenerUrlAction) {
          viz.removeEventListener(
            "urlaction" /* UrlAction */,
            props.onEventListenerUrlAction
          );
        }
        if (props.onEventListenerWorkbookPublished) {
          viz.removeEventListener(
            "workbookpublished" /* WorkbookPublished */,
            props.onEventListenerWorkbookPublished
          );
        }
        if (props.onEventListenerWorkbookPublishedAs) {
          viz.removeEventListener(
            "workbookpublishedas" /* WorkbookPublishedAs */,
            props.onEventListenerWorkbookPublishedAs
          );
        }
        if (props.onEventListenerWorkbookReadyToClose) {
          viz.removeEventListener(
            "workbookreadytoclose" /* WorkbookReadyToClose */,
            props.onEventListenerWorkbookReadyToClose
          );
        }
      };
    }
    return () => {
    };
  }, [vizRef]);
  return React.createElement("tableau-viz", { id: "tableauViz", ref: vizRef, ...props });
}
var TableauViz_default = React.forwardRef(TableauViz);

// node_modules/react-tableau-embed/src/useTableau/useScript.tsx
var import_react = __toESM(require_react());
var cachedScriptStatuses = {};
function getScriptNode(src) {
  const node = document.querySelector(
    `script[src="${src}"]`
  );
  const status = node == null ? void 0 : node.getAttribute("data-status");
  return {
    node,
    status
  };
}
function useScript(src, options) {
  const [status, setStatus] = (0, import_react.useState)(() => {
    if (!src || (options == null ? void 0 : options.shouldPreventLoad)) {
      return "idle";
    }
    if (typeof window === "undefined") {
      return "loading";
    }
    return cachedScriptStatuses[src] ?? "loading";
  });
  const [errorMessage, setErrorMessage] = (0, import_react.useState)("");
  (0, import_react.useEffect)(() => {
    if (!src || (options == null ? void 0 : options.shouldPreventLoad)) {
      return;
    }
    const cachedScriptStatus = cachedScriptStatuses[src];
    if (cachedScriptStatus === "ready" || cachedScriptStatus === "error") {
      setStatus(cachedScriptStatus);
      return;
    }
    const script = getScriptNode(src);
    let scriptNode = script.node;
    if (!scriptNode) {
      scriptNode = document.createElement("script");
      scriptNode.type = "module";
      scriptNode.src = src;
      scriptNode.async = true;
      scriptNode.setAttribute("data-status", "loading");
      document.body.appendChild(scriptNode);
      const setAttributeFromEvent = (event) => {
        const scriptStatus = event.type === "load" ? "ready" : "error";
        scriptNode == null ? void 0 : scriptNode.setAttribute("data-status", scriptStatus);
      };
      scriptNode.addEventListener("load", setAttributeFromEvent);
      scriptNode.addEventListener("error", setAttributeFromEvent);
    } else {
      setStatus(script.status ?? cachedScriptStatus ?? "loading");
    }
    const setStateFromEvent = (event) => {
      const newStatus = event.type === "load" ? "ready" : "error";
      if (newStatus === "error") {
        setErrorMessage(event.message ?? JSON.stringify(event));
      }
      setStatus(newStatus);
      cachedScriptStatuses[src] = newStatus;
    };
    scriptNode.addEventListener("load", setStateFromEvent);
    scriptNode.addEventListener("error", setStateFromEvent);
    return () => {
      if (scriptNode) {
        scriptNode.removeEventListener("load", setStateFromEvent);
        scriptNode.removeEventListener("error", setStateFromEvent);
      }
      if (scriptNode && (options == null ? void 0 : options.removeOnUnmount)) {
        scriptNode.remove();
      }
    };
  }, [src, options == null ? void 0 : options.shouldPreventLoad, options == null ? void 0 : options.removeOnUnmount]);
  return { status, errorMessage };
}
var useScript_default = useScript;

// node_modules/react-tableau-embed/src/useTableau/index.tsx
var cachedApiStatuses = {};
function extractHostname(urlString) {
  const url = new URL(urlString);
  return url.hostname;
}
function buildTableauApiUrl(hostname, version, min = false) {
  return `https://${hostname}/javascripts/api/tableau.embedding.${version ?? "3.latest"}${min ? ".min" : ""}.js`;
}
function useTableau(args) {
  const apiVersion = args.version ?? "latest";
  const tableauVizProps = React2.useMemo(
    () => ({
      src: args.sourceUrl,
      ...args.optionalProperties
    }),
    [args.sourceUrl, args.optionalProperties]
  );
  const [status, setStatus] = React2.useState(() => {
    if (!args.sourceUrl)
      return "idle";
    if (typeof window === "undefined")
      return "loading";
    return cachedApiStatuses[apiVersion] ?? "loading";
  });
  const [errMsg, setErrMsg] = React2.useState();
  const hostname = extractHostname(args.sourceUrl);
  const apiUrl = buildTableauApiUrl(hostname, args.version, !!args.version);
  const { status: apiLoadStatus, errorMessage: apiErrorMessage } = useScript_default(apiUrl);
  React2.useEffect(() => {
    setStatus(apiLoadStatus);
    if (status === "error") {
      setErrMsg(apiErrorMessage);
    }
    if (apiLoadStatus === "idle") {
      setErrMsg("");
    }
  }, [apiLoadStatus]);
  return {
    status,
    component: status === "ready" && React2.createElement(TableauViz_default, { ref: args.ref, ...tableauVizProps }),
    errorMessage: errMsg,
    isIdle: status === "idle",
    isLoading: status === "loading",
    isError: status === "error",
    isSuccess: status === "ready"
  };
}

// node_modules/react-tableau-embed/src/loadingSpinner/index.tsx
var React3 = __toESM(require_react());
import classes from "C:/Practical/testing/test4/ElearnCode/client/node_modules/react-tableau-embed/src/loadingSpinner/spinner.module.css";
function LoadingSpinner() {
  return React3.createElement("div", { className: classes["lds-ripple"] }, React3.createElement("div", null), React3.createElement("div", null));
}

// node_modules/react-tableau-embed/src/index.tsx
function TableauEmbed(props, ref) {
  const { sourceUrl, version, ...optionalProperties } = props;
  const {
    isSuccess,
    isError,
    component,
    ...tableau
  } = useTableau({
    ref,
    sourceUrl,
    version,
    optionalProperties
  });
  if (isError) {
    console.error(`Error loading tableau embed api: ${tableau.errorMessage}`);
    return React4.createElement("h3", null, "error loading tableau");
  }
  if (!isSuccess) {
    return props.loadingSpinner ?? React4.createElement(LoadingSpinner, null);
  }
  if (!component) {
    console.error(
      `Finished loading but component is falsy. Error message: ${tableau.errorMessage}`
    );
    return React4.createElement("h3", null, 'component error: falsy"');
  }
  return React4.createElement(React4.Fragment, null, component);
}
var src_default = React4.forwardRef(TableauEmbed);

// node_modules/react-tableau-embed/src/scrapedTableauTypes/ExternalContract_Shared_Namespaces_Tableau.ts
var AnalyticsObjectType = /* @__PURE__ */ ((AnalyticsObjectType2) => {
  AnalyticsObjectType2["Cluster"] = "cluster";
  AnalyticsObjectType2["Forecast"] = "forecast";
  AnalyticsObjectType2["TrendLine"] = "trend-line";
  return AnalyticsObjectType2;
})(AnalyticsObjectType || {});
var AnnotationType = /* @__PURE__ */ ((AnnotationType2) => {
  AnnotationType2["Mark"] = "mark";
  AnnotationType2["Point"] = "point";
  AnnotationType2["Area"] = "area";
  return AnnotationType2;
})(AnnotationType || {});
var ColumnType = /* @__PURE__ */ ((ColumnType2) => {
  ColumnType2["Discrete"] = "discrete";
  ColumnType2["Continuous"] = "continuous";
  return ColumnType2;
})(ColumnType || {});
var ClassNameKey = /* @__PURE__ */ ((ClassNameKey2) => {
  ClassNameKey2["WorksheetTitle"] = "tableau-worksheet-title";
  ClassNameKey2["Worksheet"] = "tableau-worksheet";
  ClassNameKey2["Tooltip"] = "tableau-tooltip";
  ClassNameKey2["StoryTitle"] = "tableau-story-title";
  ClassNameKey2["DashboardTitle"] = "tableau-dashboard-title";
  return ClassNameKey2;
})(ClassNameKey || {});
var DashboardObjectType = /* @__PURE__ */ ((DashboardObjectType2) => {
  DashboardObjectType2["Blank"] = "blank";
  DashboardObjectType2["Worksheet"] = "worksheet";
  DashboardObjectType2["QuickFilter"] = "quick-filter";
  DashboardObjectType2["ParameterControl"] = "parameter-control";
  DashboardObjectType2["PageFilter"] = "page-filter";
  DashboardObjectType2["Legend"] = "legend";
  DashboardObjectType2["Title"] = "title";
  DashboardObjectType2["Text"] = "text";
  DashboardObjectType2["Image"] = "image";
  DashboardObjectType2["WebPage"] = "web-page";
  DashboardObjectType2["Extension"] = "extension";
  return DashboardObjectType2;
})(DashboardObjectType || {});
var DashboardObjectVisibilityType = /* @__PURE__ */ ((DashboardObjectVisibilityType2) => {
  DashboardObjectVisibilityType2["Show"] = "show";
  DashboardObjectVisibilityType2["Hide"] = "hide";
  return DashboardObjectVisibilityType2;
})(DashboardObjectVisibilityType || {});
var DataType = /* @__PURE__ */ ((DataType2) => {
  DataType2["String"] = "string";
  DataType2["Int"] = "int";
  DataType2["Float"] = "float";
  DataType2["Bool"] = "bool";
  DataType2["Date"] = "date";
  DataType2["DateTime"] = "date-time";
  DataType2["Spatial"] = "spatial";
  return DataType2;
})(DataType || {});
var DashboardLayoutChange = /* @__PURE__ */ ((DashboardLayoutChange2) => {
  DashboardLayoutChange2["Added"] = "added";
  DashboardLayoutChange2["Removed"] = "removed";
  DashboardLayoutChange2["IsFloatingChanged"] = "is-floating-changed";
  DashboardLayoutChange2["IsVisibleChanged"] = "is-visible-changed";
  DashboardLayoutChange2["PositionChanged"] = "position-changed";
  DashboardLayoutChange2["SizeChanged"] = "size-changed";
  DashboardLayoutChange2["NameChanged"] = "name-changed";
  return DashboardLayoutChange2;
})(DashboardLayoutChange || {});
var DateRangeType = /* @__PURE__ */ ((DateRangeType2) => {
  DateRangeType2["Last"] = "last";
  DateRangeType2["LastN"] = "last-n";
  DateRangeType2["Next"] = "next";
  DateRangeType2["NextN"] = "next-n";
  DateRangeType2["Current"] = "current";
  DateRangeType2["ToDate"] = "to-date";
  return DateRangeType2;
})(DateRangeType || {});
var DialogStyle = /* @__PURE__ */ ((DialogStyle2) => {
  DialogStyle2["Window"] = "window";
  DialogStyle2["Modal"] = "modal";
  DialogStyle2["Modeless"] = "modeless";
  return DialogStyle2;
})(DialogStyle || {});
var EncodingType = /* @__PURE__ */ ((EncodingType2) => {
  EncodingType2["Column"] = "column";
  EncodingType2["Row"] = "row";
  EncodingType2["Page"] = "page";
  EncodingType2["Filter"] = "filter";
  EncodingType2["MarksType"] = "marks-type";
  EncodingType2["MeasureValues"] = "measure-values";
  EncodingType2["Color"] = "color";
  EncodingType2["Size"] = "size";
  EncodingType2["Label"] = "label";
  EncodingType2["Detail"] = "detail";
  EncodingType2["Tooltip"] = "tooltip";
  EncodingType2["Shape"] = "shape";
  EncodingType2["Path"] = "path";
  EncodingType2["Angle"] = "angle";
  return EncodingType2;
})(EncodingType || {});
var FieldAggregationType = /* @__PURE__ */ ((FieldAggregationType2) => {
  FieldAggregationType2["Sum"] = "sum";
  FieldAggregationType2["Avg"] = "avg";
  FieldAggregationType2["Min"] = "min";
  FieldAggregationType2["Max"] = "max";
  FieldAggregationType2["Stdev"] = "stdev";
  FieldAggregationType2["Stdevp"] = "stdevp";
  FieldAggregationType2["Var"] = "var";
  FieldAggregationType2["Varp"] = "varp";
  FieldAggregationType2["Count"] = "count";
  FieldAggregationType2["Countd"] = "countd";
  FieldAggregationType2["Median"] = "median";
  FieldAggregationType2["Attr"] = "attr";
  FieldAggregationType2["None"] = "none";
  FieldAggregationType2["Year"] = "year";
  FieldAggregationType2["Qtr"] = "qtr";
  FieldAggregationType2["Month"] = "month";
  FieldAggregationType2["Day"] = "day";
  FieldAggregationType2["Hour"] = "hour";
  FieldAggregationType2["Minute"] = "minute";
  FieldAggregationType2["Second"] = "second";
  FieldAggregationType2["Week"] = "week";
  FieldAggregationType2["Weekday"] = "weekday";
  FieldAggregationType2["MonthYear"] = "month-year";
  FieldAggregationType2["Mdy"] = "mdy";
  FieldAggregationType2["End"] = "end";
  FieldAggregationType2["TruncYear"] = "trunc-year";
  FieldAggregationType2["TruncQtr"] = "trunc-qtr";
  FieldAggregationType2["TruncMonth"] = "trunc-month";
  FieldAggregationType2["TruncWeek"] = "trunc-week";
  FieldAggregationType2["TruncDay"] = "trunc-day";
  FieldAggregationType2["TruncHour"] = "trunc-hour";
  FieldAggregationType2["TruncMinute"] = "trunc-minute";
  FieldAggregationType2["TruncSecond"] = "trunc-second";
  FieldAggregationType2["Quart1"] = "quart1";
  FieldAggregationType2["Quart3"] = "quart3";
  FieldAggregationType2["Skewness"] = "skewness";
  FieldAggregationType2["Kurtosis"] = "kurtosis";
  FieldAggregationType2["InOut"] = "in-out";
  FieldAggregationType2["User"] = "user";
  return FieldAggregationType2;
})(FieldAggregationType || {});
var FieldRoleType = /* @__PURE__ */ ((FieldRoleType2) => {
  FieldRoleType2["Dimension"] = "dimension";
  FieldRoleType2["Measure"] = "measure";
  FieldRoleType2["Unknown"] = "unknown";
  return FieldRoleType2;
})(FieldRoleType || {});
var FilterType = /* @__PURE__ */ ((FilterType2) => {
  FilterType2["Categorical"] = "categorical";
  FilterType2["Range"] = "range";
  FilterType2["Hierarchical"] = "hierarchical";
  FilterType2["RelativeDate"] = "relative-date";
  return FilterType2;
})(FilterType || {});
var FilterUpdateType = /* @__PURE__ */ ((FilterUpdateType2) => {
  FilterUpdateType2["Add"] = "add";
  FilterUpdateType2["All"] = "all";
  FilterUpdateType2["Replace"] = "replace";
  FilterUpdateType2["Remove"] = "remove";
  return FilterUpdateType2;
})(FilterUpdateType || {});
var FilterDomainType = /* @__PURE__ */ ((FilterDomainType2) => {
  FilterDomainType2["Relevant"] = "relevant";
  FilterDomainType2["Database"] = "database";
  return FilterDomainType2;
})(FilterDomainType || {});
var FilterNullOption = /* @__PURE__ */ ((FilterNullOption2) => {
  FilterNullOption2["NullValues"] = "null-values";
  FilterNullOption2["NonNullValues"] = "non-null-values";
  FilterNullOption2["AllValues"] = "all-values";
  return FilterNullOption2;
})(FilterNullOption || {});
var IncludeDataValuesOption = /* @__PURE__ */ ((IncludeDataValuesOption2) => {
  IncludeDataValuesOption2["AllValues"] = "all-values";
  IncludeDataValuesOption2["OnlyNativeValues"] = "only-native-values";
  IncludeDataValuesOption2["OnlyFormattedValues"] = "only-formatted-values";
  return IncludeDataValuesOption2;
})(IncludeDataValuesOption || {});
var MarkType = /* @__PURE__ */ ((MarkType2) => {
  MarkType2["Bar"] = "bar";
  MarkType2["Line"] = "line";
  MarkType2["Area"] = "area";
  MarkType2["Square"] = "square";
  MarkType2["Circle"] = "circle";
  MarkType2["Shape"] = "shape";
  MarkType2["Text"] = "text";
  MarkType2["Map"] = "map";
  MarkType2["Pie"] = "pie";
  MarkType2["GanttBar"] = "gantt-bar";
  MarkType2["Polygon"] = "polygon";
  return MarkType2;
})(MarkType || {});
var ParameterValueType = /* @__PURE__ */ ((ParameterValueType2) => {
  ParameterValueType2["All"] = "all";
  ParameterValueType2["List"] = "list";
  ParameterValueType2["Range"] = "range";
  return ParameterValueType2;
})(ParameterValueType || {});
var PeriodType = /* @__PURE__ */ ((PeriodType2) => {
  PeriodType2["Years"] = "years";
  PeriodType2["Quarters"] = "quarters";
  PeriodType2["Months"] = "months";
  PeriodType2["Weeks"] = "weeks";
  PeriodType2["Days"] = "days";
  PeriodType2["Hours"] = "hours";
  PeriodType2["Minutes"] = "minutes";
  PeriodType2["Seconds"] = "seconds";
  return PeriodType2;
})(PeriodType || {});
var QuickTableCalcType = /* @__PURE__ */ ((QuickTableCalcType2) => {
  QuickTableCalcType2["RunningTotal"] = "running-total";
  QuickTableCalcType2["Difference"] = "difference";
  QuickTableCalcType2["PercentDifference"] = "percent-difference";
  QuickTableCalcType2["PercentOfTotal"] = "percent-of-total";
  QuickTableCalcType2["Rank"] = "rank";
  QuickTableCalcType2["Percentile"] = "percentile";
  QuickTableCalcType2["MovingAverage"] = "moving-average";
  QuickTableCalcType2["YTDTotal"] = "ytd-total";
  QuickTableCalcType2["CompoundGrowthRate"] = "compound-growth-rate";
  QuickTableCalcType2["YearOverYearGrowth"] = "year-over-year-growth";
  QuickTableCalcType2["YTDGrowth"] = "ytd-growth";
  QuickTableCalcType2["Undefined"] = "undefined";
  return QuickTableCalcType2;
})(QuickTableCalcType || {});
var SelectionUpdateType = /* @__PURE__ */ ((SelectionUpdateType2) => {
  SelectionUpdateType2["Replace"] = "select-replace";
  SelectionUpdateType2["Add"] = "select-add";
  SelectionUpdateType2["Remove"] = "select-remove";
  return SelectionUpdateType2;
})(SelectionUpdateType || {});
var SheetType = /* @__PURE__ */ ((SheetType2) => {
  SheetType2["Dashboard"] = "dashboard";
  SheetType2["Story"] = "story";
  SheetType2["Worksheet"] = "worksheet";
  return SheetType2;
})(SheetType || {});
var SortDirection = /* @__PURE__ */ ((SortDirection2) => {
  SortDirection2["Increasing"] = "increasing";
  SortDirection2["Decreasing"] = "decreasing";
  return SortDirection2;
})(SortDirection || {});
var TrendLineModelType = /* @__PURE__ */ ((TrendLineModelType2) => {
  TrendLineModelType2["Linear"] = "linear";
  TrendLineModelType2["Logarithmic"] = "logarithmic";
  TrendLineModelType2["Exponential"] = "exponential";
  TrendLineModelType2["Polynomial"] = "polynomial";
  return TrendLineModelType2;
})(TrendLineModelType || {});
var ReplaySpeedType = /* @__PURE__ */ ((ReplaySpeedType2) => {
  ReplaySpeedType2["Slow"] = "slow";
  ReplaySpeedType2["Normal"] = "normal";
  ReplaySpeedType2["Fast"] = "fast";
  return ReplaySpeedType2;
})(ReplaySpeedType || {});
var HierarchicalLevelSelectionState = /* @__PURE__ */ ((HierarchicalLevelSelectionState2) => {
  HierarchicalLevelSelectionState2["AllSelected"] = "all-selected";
  HierarchicalLevelSelectionState2["NoneSelected"] = "none-selected";
  HierarchicalLevelSelectionState2["SomeSelected"] = "some-selected";
  HierarchicalLevelSelectionState2["UnknownSelected"] = "unknown-selected";
  return HierarchicalLevelSelectionState2;
})(HierarchicalLevelSelectionState || {});
var ZoneVisibilityType = { ...DashboardObjectVisibilityType };

// node_modules/react-tableau-embed/src/scrapedTableauTypes/VizInterfaces.ts
var VizAttributes = /* @__PURE__ */ ((VizAttributes2) => {
  VizAttributes2["Src"] = "src";
  VizAttributes2["Width"] = "width";
  VizAttributes2["Height"] = "height";
  VizAttributes2["Token"] = "token";
  VizAttributes2["TouchOptimize"] = "touch-optimize";
  VizAttributes2["HideEditInDesktopButton"] = "hide-edit-in-desktop-button";
  VizAttributes2["SuppressDefaultEditBehavior"] = "suppress-default-edit-behavior";
  VizAttributes2["Debug"] = "debug";
  VizAttributes2["DisableVersionCheck"] = "disable-version-check";
  VizAttributes2["OnEditInDesktopButtonClicked"] = "onEditInDesktopButtonClicked";
  VizAttributes2["OnFirstVizSizeKnown"] = "onFirstVizSizeKnown";
  VizAttributes2["OnFirstInteractive"] = "onFirstInteractive";
  VizAttributes2["DisableUrlActionsPopups"] = "disable-url-actions";
  VizAttributes2["HideTabs"] = "hide-tabs";
  VizAttributes2["Toolbar"] = "toolbar";
  VizAttributes2["InstanceIdToClone"] = "instance-id-to-clone";
  VizAttributes2["Device"] = "device";
  VizAttributes2["HideEditButton"] = "hide-edit-button";
  VizAttributes2["OnEditButtonClicked"] = "onEditButtonClicked";
  VizAttributes2["OnFilterChanged"] = "onFilterChanged";
  VizAttributes2["OnCustomMarkContextMenuEvent"] = "onCustomMarkContextMenuEvent";
  VizAttributes2["OnMarkSelectionChanged"] = "onMarkSelectionChanged";
  VizAttributes2["OnParameterChanged"] = "onParameterChanged";
  VizAttributes2["OnToolbarStateChanged"] = "onToolbarStateChanged";
  VizAttributes2["OnUrlAction"] = "onUrlAction";
  VizAttributes2["OnTabSwitched"] = "onTabSwitched";
  VizAttributes2["OnCustomViewLoaded"] = "onCustomViewLoaded";
  VizAttributes2["OnCustomViewRemoved"] = "onCustomViewRemoved";
  VizAttributes2["OnCustomViewSaved"] = "onCustomViewSaved";
  VizAttributes2["OnCustomViewSetDefault"] = "onCustomViewSetDefault";
  VizAttributes2["OnStoryPointSwitched"] = "onStoryPointSwitched";
  return VizAttributes2;
})(VizAttributes || {});
var VizAuthoringAttributes = /* @__PURE__ */ ((VizAuthoringAttributes2) => {
  VizAuthoringAttributes2["Src"] = "src";
  VizAuthoringAttributes2["Width"] = "width";
  VizAuthoringAttributes2["Height"] = "height";
  VizAuthoringAttributes2["Token"] = "token";
  VizAuthoringAttributes2["TouchOptimize"] = "touch-optimize";
  VizAuthoringAttributes2["HideEditInDesktopButton"] = "hide-edit-in-desktop-button";
  VizAuthoringAttributes2["SuppressDefaultEditBehavior"] = "suppress-default-edit-behavior";
  VizAuthoringAttributes2["Debug"] = "debug";
  VizAuthoringAttributes2["DisableVersionCheck"] = "disable-version-check";
  VizAuthoringAttributes2["OnEditInDesktopButtonClicked"] = "onEditInDesktopButtonClicked";
  VizAuthoringAttributes2["OnFirstVizSizeKnown"] = "onFirstVizSizeKnown";
  VizAuthoringAttributes2["OnFirstInteractive"] = "onFirstInteractive";
  VizAuthoringAttributes2["OnWorkbookPublished"] = "onWorkbookPublished";
  VizAuthoringAttributes2["OnWorkbookPublishedAs"] = "onWorkbookPublishedAs";
  VizAuthoringAttributes2["OnWorkbookReadyToClose"] = "onWorkbookReadyToClose";
  VizAuthoringAttributes2["HideCloseButton"] = "hide-close-button";
  return VizAuthoringAttributes2;
})(VizAuthoringAttributes || {});
var VizChildElements = /* @__PURE__ */ ((VizChildElements2) => {
  VizChildElements2["VizFilter"] = "viz-filter";
  VizChildElements2["VizParameter"] = "viz-parameter";
  VizChildElements2["CustomParameter"] = "custom-parameter";
  return VizChildElements2;
})(VizChildElements || {});
var VizChildElementAttributes = /* @__PURE__ */ ((VizChildElementAttributes2) => {
  VizChildElementAttributes2["Field"] = "field";
  VizChildElementAttributes2["Value"] = "value";
  VizChildElementAttributes2["Name"] = "name";
  return VizChildElementAttributes2;
})(VizChildElementAttributes || {});
export {
  AnalyticsObjectType,
  AnnotationType,
  ApiMenuType,
  ClassNameKey,
  ColumnType,
  DashboardLayoutChange,
  DashboardObjectType,
  DashboardObjectVisibilityType,
  DataType,
  DateRangeType,
  DeviceType,
  DialogStyle,
  EmbeddingErrorCodes,
  EncodingType,
  FieldAggregationType,
  FieldRoleType,
  FileFormats,
  FilterDomainType,
  FilterNullOption,
  FilterType,
  FilterUpdateType,
  HierarchicalLevelSelectionState,
  IncludeDataValuesOption,
  MarkType,
  ParameterValueType,
  PeriodType,
  QuickTableCalcType,
  ReplaySpeedType,
  RevertVizSelection,
  SelectionUpdateType,
  SheetSizeBehavior,
  SheetType,
  SortDirection,
  TableauDialogType,
  src_default as TableauEmbed,
  TableauEventType,
  Toolbar,
  ToolbarButtons,
  TrendLineModelType,
  VizAttributes,
  VizAuthoringAttributes,
  VizChildElementAttributes,
  VizChildElements,
  ZoneVisibilityType,
  useTableau
};
//# sourceMappingURL=react-tableau-embed.js.map
